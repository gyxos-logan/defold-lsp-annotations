elements {
  type: ENUM
  name: "ParseResult"
  brief: "header parse result enumeration"
  description: "Header parse result enumeration."
  members {
    name: "dmHttpClient::PARSE_RESULT_NEED_MORE_DATA"
    doc: "= 1"
    type: ""
  }
  members {
    name: "dmHttpClient::PARSE_RESULT_OK"
    doc: "= 0"
    type: ""
  }
  members {
    name: "dmHttpClient::PARSE_RESULT_SYNTAX_ERROR"
    doc: "= -1"
    type: ""
  }
}
elements {
  type: FUNCTION
  name: "ParseHeader"
  brief: "parse the headers"
  description: "Parse the header data and make callbacks for each header/version entry and the start of the body."
  returnvalues {
    name: "result"
    doc: "the parse result"
    types: "dmHttpClient::ParseResult"
  }
  parameters {
    name: "header_str"
    doc: "http response headers. Must be a null terminated string."
    types: "char*"
  }
  parameters {
    name: "user_data"
    doc: "user data to the callbacks."
    types: "const void*"
  }
  parameters {
    name: "end_of_receive"
    doc: "true if there is no more data"
    types: "bool"
  }
  parameters {
    name: "version_cbk"
    doc: "callback for the http version\n    void (<em>version_cbk)(void</em> user_data, int major, int minor, int status, const char* status_str);"
    types: "function"
  }
  parameters {
    name: "header_cbk"
    doc: "callback for each header/value pair\n    void (<em>header_cbk)(void</em> user_data, const char<em> key, const char</em> value);"
    types: "function"
  }
  parameters {
    name: "body_cbk"
    doc: "callback to note the start offset of the body data.\n    void (<em>body_cbk)(void</em> user_data, int offset)"
    types: "function"
  }
}
info {
  namespace: "dmHttpClient"
  name: "Http Client"
  brief: "SDK Http Client API documentation"
  description: "Http client functions."
  path: "engine/dlib/src/dmsdk/dlib/hash.h"
  file: "dmsdk/dlib/hash.h"
}
