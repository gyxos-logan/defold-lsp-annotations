- desc: 'The gain on the sound-component. Note that gain is in linear scale,

    between 0 and 1.'
  name: gain
  type: property
- desc: 'The pan on the sound-component. The valid range is from -1.0 to 1.0,

    representing -45 degrees left, to +45 degrees right.'
  name: pan
  type: property
- desc: 'The speed on the sound-component where 1.0 is normal speed, 0.5 is half

    speed and 2.0 is double speed.'
  name: speed
  type: property
- desc: 'Post this message to a sound-component to make it play its sound. Multiple
    voices is supported. The limit is set to 32 voices per sound component.


    [icon:attention] Note that gain is in linear scale, between 0 and 1.

    To get the dB value from the gain, use the formula `20 * log(gain)`.

    Inversely, to find the linear value from a dB value, use the formula

    <code>10<sup>db/20</sup></code>.


    [icon:attention] A sound will continue to play even if the game object the sound
    component belonged to is deleted. You can send a `stop_sound` to stop the sound.'
  name: play_sound
  type: message
- desc: Post this message to a sound-component to make it stop playing all active
    voices
  name: stop_sound
  type: message
- desc: 'Post this message to a sound-component to set gain on all active playing
    voices.


    [icon:attention] Note that gain is in linear scale, between 0 and 1.

    To get the dB value from the gain, use the formula `20 * log(gain)`.

    Inversely, to find the linear value from a dB value, use the formula

    <code>10<sup>db/20</sup></code>.'
  name: set_gain
  type: message
- desc: ''
  members:
  - desc: The sound data used when playing the sound. The type of the property is
      hash.
    name: ''
    type: property
  - desc: 'Checks if background music is playing, e.g. from iTunes.


      [icon:macOS][icon:windows][icon:linux][icon:html5] On non mobile platforms,

      this function always return `false`.


      [icon:attention][icon:android] On Android you can only get a correct reading

      of this state if your game is not playing any sounds itself. This is a limitation

      in the Android SDK. If your game is playing any sounds, *even with a gain of
      zero*, this

      function will return `false`.


      The best time to call this function is:


      - In the `init` function of your main collection script before any sounds are
      triggered

      - In a window listener callback when the window.WINDOW_EVENT_FOCUS_GAINED event
      is received


      Both those times will give you a correct reading of the state even when your
      application is

      swapped out and in while playing sounds and it works equally well on Android
      and iOS.'
    name: is_music_playing
    parameters: []
    returns:
    - desc: '`true` if music is playing, otherwise `false`.'
      type: boolean
    type: function
  - desc: 'Get RMS (Root Mean Square) value from mixer group. This value is the

      square root of the mean (average) value of the squared function of

      the instantaneous values.


      For instance: for a sinewave signal with a peak gain of -1.94 dB (0.8 linear),

      the RMS is <code>0.8 &times; 1/sqrt(2)</code> which is about 0.566.


      [icon:attention] Note the returned value might be an approximation and in particular

      the effective window might be larger than specified.'
    name: get_rms
    parameters:
    - desc: group name
      name: group
      type:
      - string
      - hash
    - desc: window length in seconds
      name: window
      type: number
    returns:
    - desc: RMS value for left channel
      type: number
    - desc: RMS value for right channel
      type: number
    type: function
  - desc: 'Get peak value from mixer group.


      [icon:attention] Note that gain is in linear scale, between 0 and 1.

      To get the dB value from the gain, use the formula `20 * log(gain)`.

      Inversely, to find the linear value from a dB value, use the formula

      <code>10<sup>db/20</sup></code>.

      Also note that the returned value might be an approximation and in particular

      the effective window might be larger than specified.'
    name: get_peak
    parameters:
    - desc: group name
      name: group
      type:
      - string
      - hash
    - desc: window length in seconds
      name: window
      type: number
    returns:
    - desc: peak value for left channel
      type: number
    - desc: peak value for right channel
      type: number
    type: function
  - desc: 'Set mixer group gain


      [icon:attention] Note that gain is in linear scale, between 0 and 1.

      To get the dB value from the gain, use the formula `20 * log(gain)`.

      Inversely, to find the linear value from a dB value, use the formula

      <code>10<sup>db/20</sup></code>.'
    name: set_group_gain
    parameters:
    - desc: group name
      name: group
      type:
      - string
      - hash
    - desc: gain in linear scale
      name: gain
      type: number
    type: function
  - desc: 'Get mixer group gain


      [icon:attention] Note that gain is in linear scale, between 0 and 1.

      To get the dB value from the gain, use the formula `20 * log(gain)`.

      Inversely, to find the linear value from a dB value, use the formula

      <code>10<sup>db/20</sup></code>.'
    name: get_group_gain
    parameters:
    - desc: group name
      name: group
      type:
      - string
      - hash
    returns:
    - desc: gain in linear scale
      type: number
    type: function
  - desc: Get a table of all mixer group names (hashes).
    name: get_groups
    parameters: []
    returns:
    - desc: table of mixer group names
      type: table
    type: function
  - desc: 'Get a mixer group name as a string.


      [icon:attention] This function is to be used for debugging and

      development tooling only. The function does a reverse hash lookup, which does
      not

      return a proper string value when the game is built in release mode.'
    name: get_group_name
    parameters:
    - desc: group name
      name: group
      type:
      - string
      - hash
    returns:
    - desc: group name
      type: string
    type: function
  - desc: 'Checks if a phone call is active. If there is an active phone call all

      other sounds will be muted until the phone call is finished.


      [icon:macOS][icon:windows][icon:linux][icon:html5] On non mobile platforms,

      this function always return `false`.'
    name: is_phone_call_active
    parameters: []
    returns:
    - desc: '`true` if there is an active phone call, `false` otherwise.'
      type: boolean
    type: function
  - desc: 'Make the sound component play its sound. Multiple voices are supported.
      The limit is set to 32 voices per sound component.


      [icon:attention] Note that gain is in linear scale, between 0 and 1.

      To get the dB value from the gain, use the formula `20 * log(gain)`.

      Inversely, to find the linear value from a dB value, use the formula

      <code>10<sup>db/20</sup></code>.


      [icon:attention] A sound will continue to play even if the game object the sound
      component belonged to is deleted. You can call `sound.stop()` to stop the sound.'
    name: play
    parameters:
    - desc: the sound that should play
      name: url
      type:
      - string
      - hash
      - url
    - desc: 'optional table with properties:

        `delay`

        : [type:number] delay in seconds before the sound starts playing, default
        is 0.


        `gain`

        : [type:number] sound gain between 0 and 1, default is 1. The final gain of
        the sound will be a combination of this gain, the group gain and the master
        gain.


        `pan`

        : [type:number] sound pan between -1 and 1, default is 0. The final pan of
        the sound will be an addition of this pan and the sound pan.


        `speed`

        : [type:number] sound speed where 1.0 is normal speed, 0.5 is half speed and
        2.0 is double speed. The final speed of the sound will be a multiplication
        of this speed and the sound speed.'
      name: play_properties
      optional: true
      type: table
    - desc: 'function to call when the sound has finished playing.


        `self`

        : [type:object] The current object.


        `message_id`

        : [type:hash] The name of the completion message, `"sound_done"`.


        `message`

        : [type:table] Information about the completion:


        - [type:number] `play_id` - the sequential play identifier that was given
        by the sound.play function.


        `sender`

        : [type:url] The invoker of the callback: the sound component.'
      name: complete_function
      optional: true
      type: function(self, message_id, message, sender))
    returns:
    - desc: The identifier for the sound voice
      type: number
    type: function
  - desc: Stop playing all active voices
    name: stop
    parameters:
    - desc: the sound that should stop
      name: url
      type:
      - string
      - hash
      - url
    type: function
  - desc: Pause all active voices
    name: pause
    parameters:
    - desc: the sound that should pause
      name: url
      type:
      - string
      - hash
      - url
    - desc: true if the sound should pause
      name: pause
      type: bool
    type: function
  - desc: 'Set gain on all active playing voices of a sound.


      [icon:attention] Note that gain is in linear scale, between 0 and 1.

      To get the dB value from the gain, use the formula `20 * log(gain)`.

      Inversely, to find the linear value from a dB value, use the formula

      <code>10<sup>db/20</sup></code>.'
    name: set_gain
    parameters:
    - desc: the sound to set the gain of
      name: url
      type:
      - string
      - hash
      - url
    - desc: sound gain between 0 and 1. The final gain of the sound will be a combination
        of this gain, the group gain and the master gain.
      name: gain
      optional: true
      type: number
    type: function
  - desc: 'Set panning on all active playing voices of a sound.


      The valid range is from -1.0 to 1.0, representing -45 degrees left, to +45 degrees
      right.'
    name: set_pan
    parameters:
    - desc: the sound to set the panning value to
      name: url
      type:
      - string
      - hash
      - url
    - desc: sound panning between -1.0 and 1.0
      name: pan
      optional: true
      type: number
    type: function
  - desc: 'This message is sent back to the sender of a `play_sound` message, if the
      sound

      could be played to completion.'
    name: done
    type: message
  name: sound
  type: table
