- desc: '[mark:READ ONLY] Returns the defined physical mass of the collision object
    component as a number.'
  name: mass
  type: property
- desc: 'The current linear velocity of the collision object component as a vector3.

    The velocity is measured in units/s (pixels/s).'
  name: linear_velocity
  type: property
- desc: 'The current angular velocity of the collision object component as a [type:vector3].

    The velocity is measured as a rotation around the vector with a speed equivalent
    to the vector length

    in radians/s.'
  name: angular_velocity
  type: property
- desc: 'The linear damping value for the collision object. Setting this value alters
    the damping of

    linear motion of the object. Valid values are between 0 (no damping) and 1 (full
    damping).'
  name: linear_damping
  type: property
- desc: 'The angular damping value for the collision object. Setting this value alters
    the damping of

    angular motion of the object (rotation). Valid values are between 0 (no damping)
    and 1 (full damping).'
  name: angular_damping
  type: property
- desc: 'Post this message to a collision-object-component to apply the specified
    force on the collision object.

    The collision object must be dynamic.'
  name: apply_force
  type: message
- desc: 'This message is broadcasted to every component of an instance that has a
    collision object,

    when the collision object collides with another collision object. For a script
    to take action

    when such a collision happens, it should check for this message in its `on_message`
    callback

    function.


    This message only reports that a collision actually happened and will only be
    sent once per

    colliding pair and frame.

    To retrieve more detailed information, check for the `contact_point_response`
    instead.'
  name: collision_response
  type: message
- desc: 'This message is broadcasted to every component of an instance that has a
    collision object,

    when the collision object has contact points with respect to another collision
    object.

    For a script to take action when such contact points occur, it should check for
    this message

    in its `on_message` callback function.


    Since multiple contact points can occur for two colliding objects, this message
    can be sent

    multiple times in the same frame for the same two colliding objects. To only be
    notified once

    when the collision occurs, check for the `collision_response` message instead.'
  name: contact_point_response
  type: message
- desc: 'This message is broadcasted to every component of an instance that has a
    collision object,

    when the collision object interacts with another collision object and one of them
    is a trigger.

    For a script to take action when such an interaction happens, it should check
    for this message

    in its `on_message` callback function.


    This message only reports that an interaction actually happened and will only
    be sent once per

    colliding pair and frame. To retrieve more detailed information, check for the

    `contact_point_response` instead.'
  name: trigger_response
  type: message
- desc: 'This message is sent back to the sender of a `ray_cast_request`, if the ray
    hit a

    collision object. See `physics.raycast_async` for examples of how to use it.'
  name: ray_cast_response
  type: message
- desc: 'This message is sent back to the sender of a `ray_cast_request`, if the ray
    didn''t hit any

    collision object. See `physics.raycast_async` for examples of how to use it.'
  name: ray_cast_missed
  type: message
- desc: ''
  members:
  - desc: 'The following properties are available when connecting a joint of `JOINT_TYPE_SPRING`
      type:'
    name: JOINT_TYPE_SPRING
    type: number
  - desc: 'The following properties are available when connecting a joint of `JOINT_TYPE_FIXED`
      type:'
    name: JOINT_TYPE_FIXED
    type: number
  - desc: 'The following properties are available when connecting a joint of `JOINT_TYPE_HINGE`
      type:'
    name: JOINT_TYPE_HINGE
    type: number
  - desc: 'The following properties are available when connecting a joint of `JOINT_TYPE_SLIDER`
      type:'
    name: JOINT_TYPE_SLIDER
    type: number
  - desc: 'The following properties are available when connecting a joint of `JOINT_TYPE_WELD`
      type:'
    name: JOINT_TYPE_WELD
    type: number
  - desc: 'Ray casts are used to test for intersections against collision objects
      in the physics world.

      Collision objects of types kinematic, dynamic and static are tested against.
      Trigger objects

      do not intersect with ray casts.

      Which collision objects to hit is filtered by their collision groups and can
      be configured

      through `groups`.

      The actual ray cast will be performed during the physics-update.


      - If an object is hit, the result will be reported via a `ray_cast_response`
      message.

      - If there is no object hit, the result will be reported via a `ray_cast_missed`
      message.'
    name: raycast_async
    parameters:
    - desc: the world position of the start of the ray
      name: from
      type: vector3
    - desc: the world position of the end of the ray
      name: to
      type: vector3
    - desc: a lua table containing the hashed groups for which to test collisions
        against
      name: groups
      type: table
    - desc: a number between [0,-255]. It will be sent back in the response for identification,
        0 by default
      name: request_id
      optional: true
      type: number
    type: function
  - desc: 'Ray casts are used to test for intersections against collision objects
      in the physics world.

      Collision objects of types kinematic, dynamic and static are tested against.
      Trigger objects

      do not intersect with ray casts.

      Which collision objects to hit is filtered by their collision groups and can
      be configured

      through `groups`.'
    name: raycast
    parameters:
    - desc: the world position of the start of the ray
      name: from
      type: vector3
    - desc: the world position of the end of the ray
      name: to
      type: vector3
    - desc: a lua table containing the hashed groups for which to test collisions
        against
      name: groups
      type: table
    - desc: 'a lua table containing options for the raycast.


        `all`

        : [type:boolean] Set to `true` to return all ray cast hits. If `false`, it
        will only return the closest hit.'
      name: options
      type: table
    returns:
    - desc: It returns a list. If missed it returns nil. See `ray_cast_response` for
        details on the returned values.
      type: table
    type: function
  - desc: 'Create a physics joint between two collision object components.


      Note: Currently only supported in 2D physics.'
    name: create_joint
    parameters:
    - desc: the joint type
      name: joint_type
      type: number
    - desc: first collision object
      name: collisionobject_a
      type:
      - string
      - hash
      - url
    - desc: id of the joint
      name: joint_id
      type:
      - string
      - hash
    - desc: local position where to attach the joint on the first collision object
      name: position_a
      type: vector3
    - desc: second collision object
      name: collisionobject_b
      type:
      - string
      - hash
      - url
    - desc: local position where to attach the joint on the second collision object
      name: position_b
      type: vector3
    - desc: 'optional joint specific properties table


        See each joint type for possible properties field. The one field that is accepted
        for all joint types is:

        - [type:boolean] `collide_connected`: Set this flag to true if the attached
        bodies should collide.'
      name: properties
      optional: true
      type: table
    type: function
  - desc: 'Destroy an already physics joint. The joint has to be created before a

      destroy can be issued.


      Note: Currently only supported in 2D physics.'
    name: destroy_joint
    parameters:
    - desc: collision object where the joint exist
      name: collisionobject
      type:
      - string
      - hash
      - url
    - desc: id of the joint
      name: joint_id
      type:
      - string
      - hash
    type: function
  - desc: 'Get a table for properties for a connected joint. The joint has to be created
      before

      properties can be retrieved.


      Note: Currently only supported in 2D physics.'
    name: get_joint_properties
    parameters:
    - desc: collision object where the joint exist
      name: collisionobject
      type:
      - string
      - hash
      - url
    - desc: id of the joint
      name: joint_id
      type:
      - string
      - hash
    returns:
    - desc: 'properties table. See the joint types for what fields are available,
        the only field available for all types is:


        - [type:boolean] `collide_connected`: Set this flag to true if the attached
        bodies should collide.'
      type: ''
    type: function
  - desc: 'Updates the properties for an already connected joint. The joint has to
      be created before

      properties can be changed.


      Note: Currently only supported in 2D physics.'
    name: set_joint_properties
    parameters:
    - desc: collision object where the joint exist
      name: collisionobject
      type:
      - string
      - hash
      - url
    - desc: id of the joint
      name: joint_id
      type:
      - string
      - hash
    - desc: 'joint specific properties table


        Note: The `collide_connected` field cannot be updated/changed after a connection
        has been made.'
      name: properties
      type: table
    type: function
  - desc: 'Get the reaction force for a joint. The joint has to be created before

      the reaction force can be calculated.


      Note: Currently only supported in 2D physics.'
    name: get_joint_reaction_force
    parameters:
    - desc: collision object where the joint exist
      name: collisionobject
      type:
      - string
      - hash
      - url
    - desc: id of the joint
      name: joint_id
      type:
      - string
      - hash
    returns:
    - desc: reaction force for the joint
      type: vector3
    type: function
  - desc: 'Get the reaction torque for a joint. The joint has to be created before

      the reaction torque can be calculated.


      Note: Currently only supported in 2D physics.'
    name: get_joint_reaction_torque
    parameters:
    - desc: collision object where the joint exist
      name: collisionobject
      type:
      - string
      - hash
      - url
    - desc: id of the joint
      name: joint_id
      type:
      - string
      - hash
    returns:
    - desc: the reaction torque on bodyB in N*m.
      type: float
    type: function
  - desc: 'Set the gravity in runtime. The gravity change is not global, it will only
      affect

      the collection that the function is called from.


      Note: For 2D physics the z component of the gravity vector will be ignored.'
    name: set_gravity
    parameters:
    - desc: the new gravity vector
      name: gravity
      type: vector3
    type: function
  - desc: 'Get the gravity in runtime. The gravity returned is not global, it will
      return

      the gravity for the collection that the function is called from.


      Note: For 2D physics the z component will always be zero.'
    name: get_gravity
    parameters: []
    returns:
    - desc: gravity vector of collection
      type: ''
    type: function
  - desc: Flips the collision shapes horizontally for a collision object
    name: set_hflip
    parameters:
    - desc: the collision object that should flip its shapes
      name: url
      type:
      - string
      - hash
      - url
    - desc: '`true` if the collision object should flip its shapes, `false` if not'
      name: flip
      type: boolean
    type: function
  - desc: Flips the collision shapes vertically for a collision object
    name: set_vflip
    parameters:
    - desc: the collision object that should flip its shapes
      name: url
      type:
      - string
      - hash
      - url
    - desc: '`true` if the collision object should flip its shapes, `false` if not'
      name: flip
      type: boolean
    type: function
  - desc: 'Collision objects tend to fall asleep when inactive for a small period
      of time for

      efficiency reasons. This function wakes them up.'
    name: wakeup
    parameters:
    - desc: "the collision object to wake.\n```lua\nfunction on_input(self, action_id,\
        \ action)\n    if action_id == hash(\"test\") and action.pressed then\n  \
        \      physics.wakeup(\"#collisionobject\")\n    end\nend\n```"
      name: url
      type:
      - string
      - hash
      - url
    type: function
  - desc: 'Updates the group property of a collision object to the specified

      string value. The group name should exist i.e. have been used in

      a collision object in the editor.'
    name: set_group
    parameters:
    - desc: the collision object affected.
      name: url
      type:
      - string
      - hash
      - url
    - desc: "the new group name to be assigned.\n```lua\nlocal function change_collision_group()\n\
        \     physics.set_group(\"#collisionobject\", \"enemy\")\nend\n```"
      name: group
      type: string
    type: function
  - desc: Returns the group name of a collision object as a hash.
    name: get_group
    parameters:
    - desc: the collision object to return the group of.
      name: url
      type:
      - string
      - hash
      - url
    returns:
    - desc: "hash value of the group.\n```lua\nlocal function check_is_enemy()\n \
        \   local group = physics.get_group(\"#collisionobject\")\n    return group\
        \ == hash(\"enemy\")\nend\n```"
      type: ''
    type: function
  - desc: Sets or clears the masking of a group (maskbit) in a collision object.
    name: set_maskbit
    parameters:
    - desc: the collision object to change the mask of.
      name: url
      type:
      - string
      - hash
      - url
    - desc: the name of the group (maskbit) to modify in the mask.
      name: group
      type: string
    - desc: "boolean value of the new maskbit. 'true' to enable, 'false' to disable.\n\
        ```lua\nlocal function make_invincible()\n    -- no longer collide with the\
        \ \"bullet\" group\n    physics.set_maskbit(\"#collisionobject\", \"bullet\"\
        , false)\nend\n```"
      name: maskbit
      type: boolean
    type: function
  - desc: 'Returns true if the specified group is set in the mask of a collision

      object, false otherwise.'
    name: get_maskbit
    parameters:
    - desc: the collision object to check the mask of.
      name: url
      type:
      - string
      - hash
      - url
    - desc: the name of the group to check for.
      name: group
      type: string
    returns:
    - desc: "boolean value of the maskbit. 'true' if present, 'false' otherwise.\n\
        ```lua\nlocal function is_invincible()\n    -- check if the collisionobject\
        \ would collide with the \"bullet\" group\n    local invincible = physics.get_maskbit(\"\
        #collisionobject\", \"bullet\")\n    return invincible\nend\n```"
      type: ''
    type: function
  name: physics
  type: table
