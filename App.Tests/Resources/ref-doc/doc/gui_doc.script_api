- desc: 'This message is broadcast to every GUI component when a layout change has
    been initiated

    on device.'
  name: layout_changed
  type: message
- desc: The material used when rendering the gui. The type of the property is hash.
  name: material
  type: property
- desc: 'The textures used in the gui. The type of the property is hash.

    Key must be specified in options table.'
  name: textures
  type: property
- desc: 'The fonts used in the gui. The type of the property is hash.

    Key must be specified in options table.'
  name: fonts
  type: property
- desc: 'This is a callback-function, which is called by the engine when a gui component
    is initialized. It can be used

    to set the initial state of the script and gui scene.'
  name: init
  parameters:
  - desc: reference to the script state to be used for storing data
    name: self
    type: object
  type: function
- desc: 'This is a callback-function, which is called by the engine when a gui component
    is finalized (destroyed). It can

    be used to e.g. take some last action, report the finalization to other game object
    instances

    or release user input focus (see <code>release_input_focus</code>). There is no
    use in starting any animations or similar

    from this function since the gui component is about to be destroyed.'
  name: final
  parameters:
  - desc: reference to the script state to be used for storing data
    name: self
    type: object
  type: function
- desc: 'This is a callback-function, which is called by the engine every frame to
    update the state of a gui component.

    It can be used to perform any kind of gui related tasks, e.g. animating nodes.'
  name: update
  parameters:
  - desc: reference to the script state to be used for storing data
    name: self
    type: object
  - desc: the time-step of the frame update
    name: dt
    type: number
  type: function
- desc: 'This is a callback-function, which is called by the engine whenever a message
    has been sent to the gui component.

    It can be used to take action on the message, e.g. update the gui or send a response
    back to the sender of the message.


    The <code>message</code> parameter is a table containing the message data. If
    the message is sent from the engine, the

    documentation of the message specifies which data is supplied.


    See the [ref:update] function for examples on how to use this callback-function.'
  name: on_message
  parameters:
  - desc: reference to the script state to be used for storing data
    name: self
    type: object
  - desc: id of the received message
    name: message_id
    type: hash
  - desc: a table containing the message data
    name: message
    type: table
  type: function
- desc: 'This is a callback-function, which is called by the engine when user input
    is sent to the instance of the gui component.

    It can be used to take action on the input, e.g. modify the gui according to the
    input.


    For an instance to obtain user input, it must first acquire input

    focus through the message `acquire_input_focus`.


    Any instance that has obtained input will be put on top of an

    input stack. Input is sent to all listeners on the stack until the

    end of stack is reached, or a listener returns `true`

    to signal that it wants input to be consumed.


    See the documentation of <a href="/ref/go/#acquire_input_focus">acquire_input_focus</a>
    for more

    information.


    The `action` parameter is a table containing data about the input mapped to the

    `action_id`.

    For mapped actions it specifies the value of the input and if it was just pressed
    or released.

    Actions are mapped to input in an input_binding-file.


    Mouse movement is specifically handled and uses `nil` as its `action_id`.

    The `action` only contains positional parameters in this case, such as x and y
    of the pointer.


    Here is a brief description of the available table fields:


    Field       | Description

    ----------- | ----------------------------------------------------------

    `value`     | The amount of input given by the user. This is usually 1 for buttons
    and 0-1 for analogue inputs. This is not present for mouse movement.

    `pressed`   | If the input was pressed this frame. This is not present for mouse
    movement.

    `released`  | If the input was released this frame. This is not present for mouse
    movement.

    `repeated`  | If the input was repeated this frame. This is similar to how a key
    on a keyboard is repeated when you hold it down. This is not present for mouse
    movement.

    `x`         | The x value of a pointer device, if present.

    `y`         | The y value of a pointer device, if present.

    `screen_x`  | The screen space x value of a pointer device, if present.

    `screen_y`  | The screen space y value of a pointer device, if present.

    `dx`        | The change in x value of a pointer device, if present.

    `dy`        | The change in y value of a pointer device, if present.

    `screen_dx` | The change in screen space x value of a pointer device, if present.

    `screen_dy` | The change in screen space y value of a pointer device, if present.

    `gamepad`   | The index of the gamepad device that provided the input.

    `touch`     | List of touch input, one element per finger, if present. See table
    below about touch input


    Touch input table:


    Field       | Description

    ----------- | ----------------------------------------------------------

    `id`        | A number identifying the touch input during its duration.

    `pressed`   | True if the finger was pressed this frame.

    `released`  | True if the finger was released this frame.

    `tap_count` | Number of taps, one for single, two for double-tap, etc

    `x`         | The x touch location.

    `y`         | The y touch location.

    `dx`        | The change in x value.

    `dy`        | The change in y value.

    `acc_x`     | Accelerometer x value (if present).

    `acc_y`     | Accelerometer y value (if present).

    `acc_z`     | Accelerometer z value (if present).'
  name: on_input
  parameters:
  - desc: reference to the script state to be used for storing data
    name: self
    type: object
  - desc: id of the received input action, as mapped in the input_binding-file
    name: action_id
    type: hash
  - desc: a table containing the input data, see above for a description
    name: action
    type: table
  returns:
  - desc: optional boolean to signal if the input should be consumed (not passed on
      to others) or not, default is false
    type: boolean
  type: function
- desc: '<p>

    This is a callback-function, which is called by the engine when the gui script
    is reloaded, e.g. from the editor.

    It can be used for live development, e.g. to tweak constants or set up the state
    properly for the script.

    </p>'
  name: on_reload
  parameters:
  - desc: reference to the script state to be used for storing data
    name: self
    type: object
  type: function
- desc: 'GUI core hooks, functions, messages, properties and constants for

    creation and manipulation of GUI nodes. The "gui" namespace is

    accessible only from gui scripts.'
  members:
  - desc: Retrieves the node with the specified id.
    name: get_node
    parameters:
    - desc: id of the node to retrieve
      name: id
      type:
      - string
      - hash
    returns:
    - desc: a new node instance
      type: node
    type: function
  - desc: Retrieves the id of the specified node.
    name: get_id
    parameters:
    - desc: the node to retrieve the id from
      name: node
      type: node
    returns:
    - desc: the id of the node
      type: hash
    type: function
  - desc: 'Set the id of the specicied node to a new value.

      Nodes created with the gui.new_*_node() functions get

      an empty id. This function allows you to give dynamically

      created nodes an id.


      [icon:attention] No checking is done on the uniqueness of supplied ids.

      It is up to you to make sure you use unique ids.'
    name: set_id
    parameters:
    - desc: node to set the id for
      name: node
      type: node
    - desc: id to set
      name: id
      type:
      - string
      - hash
    type: function
  - desc: 'Retrieve the index of the specified node among its siblings.

      The index defines the order in which a node appear in a GUI scene.

      Higher index means the node is drawn on top of lower indexed nodes.'
    name: get_index
    parameters:
    - desc: the node to retrieve the id from
      name: node
      type: node
    returns:
    - desc: the index of the node
      type: number
    type: function
  - desc: 'Deletes the specified node. Any child nodes of the specified node will
      be

      recursively deleted.'
    name: delete_node
    parameters:
    - desc: node to delete
      name: node
      type: node
    type: function
  - desc: once forward
    name: PLAYBACK_ONCE_FORWARD
    type: number
  - desc: once backward
    name: PLAYBACK_ONCE_BACKWARD
    type: number
  - desc: once forward and then backward
    name: PLAYBACK_ONCE_PINGPONG
    type: number
  - desc: loop forward
    name: PLAYBACK_LOOP_FORWARD
    type: number
  - desc: loop backward
    name: PLAYBACK_LOOP_BACKWARD
    type: number
  - desc: ping pong loop
    name: PLAYBACK_LOOP_PINGPONG
    type: number
  - desc: linear interpolation
    name: EASING_LINEAR
    type: number
  - desc: in-quadratic
    name: EASING_INQUAD
    type: number
  - desc: out-quadratic
    name: EASING_OUTQUAD
    type: number
  - desc: in-out-quadratic
    name: EASING_INOUTQUAD
    type: number
  - desc: out-in-quadratic
    name: EASING_OUTINQUAD
    type: number
  - desc: in-cubic
    name: EASING_INCUBIC
    type: number
  - desc: out-cubic
    name: EASING_OUTCUBIC
    type: number
  - desc: in-out-cubic
    name: EASING_INOUTCUBIC
    type: number
  - desc: out-in-cubic
    name: EASING_OUTINCUBIC
    type: number
  - desc: in-quartic
    name: EASING_INQUART
    type: number
  - desc: out-quartic
    name: EASING_OUTQUART
    type: number
  - desc: in-out-quartic
    name: EASING_INOUTQUART
    type: number
  - desc: out-in-quartic
    name: EASING_OUTINQUART
    type: number
  - desc: in-quintic
    name: EASING_INQUINT
    type: number
  - desc: out-quintic
    name: EASING_OUTQUINT
    type: number
  - desc: in-out-quintic
    name: EASING_INOUTQUINT
    type: number
  - desc: out-in-quintic
    name: EASING_OUTINQUINT
    type: number
  - desc: in-sine
    name: EASING_INSINE
    type: number
  - desc: out-sine
    name: EASING_OUTSINE
    type: number
  - desc: in-out-sine
    name: EASING_INOUTSINE
    type: number
  - desc: out-in-sine
    name: EASING_OUTINSINE
    type: number
  - desc: in-exponential
    name: EASING_INEXPO
    type: number
  - desc: out-exponential
    name: EASING_OUTEXPO
    type: number
  - desc: in-out-exponential
    name: EASING_INOUTEXPO
    type: number
  - desc: out-in-exponential
    name: EASING_OUTINEXPO
    type: number
  - desc: in-circlic
    name: EASING_INCIRC
    type: number
  - desc: out-circlic
    name: EASING_OUTCIRC
    type: number
  - desc: in-out-circlic
    name: EASING_INOUTCIRC
    type: number
  - desc: out-in-circlic
    name: EASING_OUTINCIRC
    type: number
  - desc: in-elastic
    name: EASING_INELASTIC
    type: number
  - desc: out-elastic
    name: EASING_OUTELASTIC
    type: number
  - desc: in-out-elastic
    name: EASING_INOUTELASTIC
    type: number
  - desc: out-in-elastic
    name: EASING_OUTINELASTIC
    type: number
  - desc: in-back
    name: EASING_INBACK
    type: number
  - desc: out-back
    name: EASING_OUTBACK
    type: number
  - desc: in-out-back
    name: EASING_INOUTBACK
    type: number
  - desc: out-in-back
    name: EASING_OUTINBACK
    type: number
  - desc: in-bounce
    name: EASING_INBOUNCE
    type: number
  - desc: out-bounce
    name: EASING_OUTBOUNCE
    type: number
  - desc: in-out-bounce
    name: EASING_INOUTBOUNCE
    type: number
  - desc: out-in-bounce
    name: EASING_OUTINBOUNCE
    type: number
  - desc: 'This starts an animation of a node property according to the specified
      parameters.

      If the node property is already being animated, that animation will be canceled
      and

      replaced by the new one. Note however that several different node properties

      can be animated simultaneously. Use `gui.cancel_animation` to stop the animation

      before it has completed.


      Composite properties of type vector3, vector4 or quaternion

      also expose their sub-components (x, y, z and w).

      You can address the components individually by suffixing the name with a dot
      ''.''

      and the name of the component.

      For instance, `"position.x"` (the position x coordinate) or `"color.w"`

      (the color alpha value).


      If a `complete_function` (Lua function) is specified, that function will be
      called

      when the animation has completed.

      By starting a new animation in that function, several animations can be sequenced

      together. See the examples below for more information.'
    name: animate
    parameters:
    - desc: node to animate
      name: node
      type: node
    - desc: 'property to animate


        - `"position"`

        - `"rotation"`

        - `"scale"`

        - `"color"`

        - `"outline"`

        - `"shadow"`

        - `"size"`

        - `"fill_angle"` (pie)

        - `"inner_radius"` (pie)

        - `"slice9"` (slice9)


        The following property constants are defined equaling the corresponding property
        string names.


        - `gui.PROP_POSITION`

        - `gui.PROP_ROTATION`

        - `gui.PROP_SCALE`

        - `gui.PROP_COLOR`

        - `gui.PROP_OUTLINE`

        - `gui.PROP_SHADOW`

        - `gui.PROP_SIZE`

        - `gui.PROP_FILL_ANGLE`

        - `gui.PROP_INNER_RADIUS`

        - `gui.PROP_SLICE9`'
      name: property
      type:
      - string
      - constant
    - desc: target property value
      name: to
      type:
      - vector3
      - vector4
    - desc: "easing to use during animation.\n     Either specify one of the `gui.EASING_*`\
        \ constants or provide a\n     [type:vector] with a custom curve. See the\
        \ <a href=\"/manuals/animation#_easing\">animation guide</a> for more information."
      name: easing
      type:
      - constant
      - vector
    - desc: duration of the animation in seconds.
      name: duration
      type: number
    - desc: delay before the animation starts in seconds.
      name: delay
      optional: true
      type: number
    - desc: "function to call when the\n     animation has completed"
      name: complete_function
      optional: true
      type: function(self, node)
    - desc: 'playback mode


        - `gui.PLAYBACK_ONCE_FORWARD`

        - `gui.PLAYBACK_ONCE_BACKWARD`

        - `gui.PLAYBACK_ONCE_PINGPONG`

        - `gui.PLAYBACK_LOOP_FORWARD`

        - `gui.PLAYBACK_LOOP_BACKWARD`

        - `gui.PLAYBACK_LOOP_PINGPONG`'
      name: playback
      optional: true
      type: constant
    type: function
  - desc: If an animation of the specified node is currently running (started by <code>gui.animate</code>),
      it will immediately be canceled.
    name: cancel_animation
    parameters:
    - desc: node that should have its animation canceled
      name: node
      type: node
    - desc: 'property for which the animation should be canceled


        - `"position"`

        - `"rotation"`

        - `"scale"`

        - `"color"`

        - `"outline"`

        - `"shadow"`

        - `"size"`

        - `"fill_angle"` (pie)

        - `"inner_radius"` (pie)

        - `"slice9"` (slice9)'
      name: property
      type:
      - string
      - constant
    type: function
  - desc: Dynamically create a new box node.
    name: new_box_node
    parameters:
    - desc: node position
      name: pos
      type:
      - vector3
      - vector4
    - desc: node size
      name: size
      type: vector3
    returns:
    - desc: new box node
      type: node
    type: function
  - desc: Dynamically create a new text node.
    name: new_text_node
    parameters:
    - desc: node position
      name: pos
      type:
      - vector3
      - vector4
    - desc: node text
      name: text
      type: string
    returns:
    - desc: new text node
      type: node
    type: function
  - desc: Dynamically create a new pie node.
    name: new_pie_node
    parameters:
    - desc: node position
      name: pos
      type:
      - vector3
      - vector4
    - desc: node size
      name: size
      type: vector3
    returns:
    - desc: new pie node
      type: node
    type: function
  - desc: Returns the text value of a text node. This is only useful for text nodes.
    name: get_text
    parameters:
    - desc: node from which to get the text
      name: node
      type: node
    returns:
    - desc: text value
      type: string
    type: function
  - desc: Set the text value of a text node. This is only useful for text nodes.
    name: set_text
    parameters:
    - desc: node to set text for
      name: node
      type: node
    - desc: text to set
      name: text
      type: string
    type: function
  - desc: 'Returns whether a text node is in line-break mode or not.

      This is only useful for text nodes.'
    name: get_line_break
    parameters:
    - desc: node from which to get the line-break for
      name: node
      type: node
    returns:
    - desc: '`true` or `false`'
      type: boolean
    type: function
  - desc: 'Sets the line-break mode on a text node.

      This is only useful for text nodes.'
    name: set_line_break
    parameters:
    - desc: node to set line-break for
      name: node
      type: node
    - desc: true or false
      name: line_break
      type: boolean
    type: function
  - desc: 'Returns the blend mode of a node.

      Blend mode defines how the node will be blended with the background.'
    name: get_blend_mode
    parameters:
    - desc: node from which to get the blend mode
      name: node
      type: node
    returns:
    - desc: 'blend mode


        - `gui.BLEND_ALPHA`

        - `gui.BLEND_ADD`

        - `gui.BLEND_ADD_ALPHA`

        - `gui.BLEND_MULT`'
      type: constant
    type: function
  - desc: 'Set the blend mode of a node.

      Blend mode defines how the node will be blended with the background.'
    name: set_blend_mode
    parameters:
    - desc: node to set blend mode for
      name: node
      type: node
    - desc: 'blend mode to set


        - `gui.BLEND_ALPHA`

        - `gui.BLEND_ADD`

        - `gui.BLEND_ADD_ALPHA`

        - `gui.BLEND_MULT`'
      name: blend_mode
      type: constant
    type: function
  - desc: 'Returns the texture of a node.

      This is currently only useful for box or pie nodes.

      The texture must be mapped to the gui scene in the gui editor.'
    name: get_texture
    parameters:
    - desc: node to get texture from
      name: node
      type: node
    returns:
    - desc: texture id
      type: hash
    type: function
  - desc: 'Set the texture on a box or pie node. The texture must be mapped to

      the gui scene in the gui editor. The function points out which texture

      the node should render from. If the texture is an atlas, further

      information is needed to select which image/animation in the atlas

      to render. In such cases, use <code>gui.play_flipbook()</code> in

      addition to this function.'
    name: set_texture
    parameters:
    - desc: node to set texture for
      name: node
      type: node
    - desc: texture id
      name: texture
      type:
      - string
      - hash
    type: function
  - desc: Get node flipbook animation.
    name: get_flipbook
    parameters:
    - desc: node to get flipbook animation from
      name: node
      type: node
    returns:
    - desc: animation id
      type: hash
    type: function
  - desc: 'Play flipbook animation on a box or pie node.

      The current node texture must contain the animation.

      Use this function to set one-frame still images on the node.'
    name: play_flipbook
    parameters:
    - desc: node to set animation for
      name: node
      type: node
    - desc: animation id
      name: animation
      type:
      - string
      - hash
    - desc: 'optional function to call when the animation has completed


        `self`

        :        [type:object] The current object.


        `node`

        :        [type:node] The node that is animated.'
      name: complete_function
      optional: true
      type: function(self, node)
    - desc: 'optional table with properties


        `offset`

        : [type:number] The normalized initial value of the animation cursor when
        the animation starts playing


        `playback_rate`

        : [type:number] The rate with which the animation will be played. Must be
        positive'
      name: play_properties
      optional: true
      type: table
    type: function
  - desc: Cancels any running flipbook animation on the specified node.
    name: cancel_flipbook
    parameters:
    - desc: node cancel flipbook animation for
      name: node
      type: node
    type: function
  - desc: Dynamically create a new texture.
    name: new_texture
    parameters:
    - desc: texture id
      name: texture
      type:
      - string
      - hash
    - desc: texture width
      name: width
      type: number
    - desc: texture height
      name: height
      type: number
    - desc: 'texture type


        - `"rgb"` - RGB</li>

        - `"rgba"` - RGBA</li>

        - `"l"` - LUMINANCE</li>'
      name: type
      type:
      - string
      - constant
    - desc: texture data
      name: buffer
      type: string
    - desc: flip texture vertically
      name: flip
      type: boolean
    returns:
    - desc: texture creation was successful
      type: boolean
    - desc: one of the gui.RESULT_* codes if unsuccessful
      type: number
    type: function
  - desc: Delete a dynamically created texture.
    name: delete_texture
    parameters:
    - desc: texture id
      name: texture
      type:
      - string
      - hash
    type: function
  - desc: Set the texture buffer data for a dynamically created texture.
    name: set_texture_data
    parameters:
    - desc: texture id
      name: texture
      type:
      - string
      - hash
    - desc: texture width
      name: width
      type: number
    - desc: texture height
      name: height
      type: number
    - desc: "texture type\n<ul>\n  <li><code>\"rgb\"</code> - RGB</li>\n  <li><code>\"\
        rgba\"</code> - RGBA</li>\n  <li><code>\"l\"</code> - LUMINANCE</li>\n</ul>"
      name: type
      type:
      - string
      - constant
    - desc: texture data
      name: buffer
      type: string
    - desc: flip texture vertically
      name: flip
      type: boolean
    returns:
    - desc: setting the data was successful
      type: boolean
    type: function
  - desc: This is only useful for text nodes. The font must be mapped to the gui scene
      in the gui editor.
    name: get_font
    parameters:
    - desc: node from which to get the font
      name: node
      type: node
    returns:
    - desc: font id
      type: hash
    type: function
  - desc: This is only useful for text nodes. The font must be mapped to the gui scene
      in the gui editor.
    name: get_font_resource
    parameters:
    - desc: font of which to get the path hash
      name: font_name
      type:
      - hash
      - string
    returns:
    - desc: path hash to resource
      type: hash
    type: function
  - desc: 'This is only useful for text nodes.

      The font must be mapped to the gui scene in the gui editor.'
    name: set_font
    parameters:
    - desc: node for which to set the font
      name: node
      type: node
    - desc: font id
      name: font
      type:
      - string
      - hash
    type: function
  - desc: The layer must be mapped to the gui scene in the gui editor.
    name: get_layer
    parameters:
    - desc: node from which to get the layer
      name: node
      type: node
    returns:
    - desc: layer id
      type: hash
    type: function
  - desc: The layer must be mapped to the gui scene in the gui editor.
    name: set_layer
    parameters:
    - desc: node for which to set the layer
      name: node
      type: node
    - desc: layer id
      name: layer
      type:
      - string
      - hash
    type: function
  - desc: gets the scene current layout
    name: get_layout
    parameters: []
    returns:
    - desc: layout id
      type: hash
    type: function
  - desc: Clipping mode defines how the node will clip it's children nodes
    name: get_clipping_mode
    parameters:
    - desc: node from which to get the clipping mode
      name: node
      type: node
    returns:
    - desc: "clipping mode\n<ul>\n  <li><code>gui.CLIPPING_MODE_NONE</code></li>\n\
        \  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>\n</ul>"
      type: constant
    type: function
  - desc: Clipping mode defines how the node will clip it's children nodes
    name: set_clipping_mode
    parameters:
    - desc: node to set clipping mode for
      name: node
      type: node
    - desc: "clipping mode to set\n<ul>\n  <li><code>gui.CLIPPING_MODE_NONE</code></li>\n\
        \  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>\n</ul>"
      name: clipping_mode
      type: constant
    type: function
  - desc: If node is set as visible clipping node, it will be shown as well as clipping.
      Otherwise, it will only clip but not show visually.
    name: get_clipping_visible
    parameters:
    - desc: node from which to get the clipping visibility state
      name: node
      type: node
    returns:
    - desc: true or false
      type: boolean
    type: function
  - desc: If node is set as an visible clipping node, it will be shown as well as
      clipping. Otherwise, it will only clip but not show visually.
    name: set_clipping_visible
    parameters:
    - desc: node to set clipping visibility for
      name: node
      type: node
    - desc: true or false
      name: visible
      type: boolean
    type: function
  - desc: If node is set as an inverted clipping node, it will clip anything inside
      as opposed to outside.
    name: get_clipping_inverted
    parameters:
    - desc: node from which to get the clipping inverted state
      name: node
      type: node
    returns:
    - desc: true or false
      type: boolean
    type: function
  - desc: If node is set as an inverted clipping node, it will clip anything inside
      as opposed to outside.
    name: set_clipping_inverted
    parameters:
    - desc: node to set clipping inverted state for
      name: node
      type: node
    - desc: true or false
      name: inverted
      type: boolean
    type: function
  - desc: The x-anchor specifies how the node is moved when the game is run in a different
      resolution.
    name: get_xanchor
    parameters:
    - desc: node to get x-anchor from
      name: node
      type: node
    returns:
    - desc: 'anchor constant


        - `gui.ANCHOR_NONE`

        - `gui.ANCHOR_LEFT`

        - `gui.ANCHOR_RIGHT`'
      type: constant
    type: function
  - desc: The x-anchor specifies how the node is moved when the game is run in a different
      resolution.
    name: set_xanchor
    parameters:
    - desc: node to set x-anchor for
      name: node
      type: node
    - desc: 'anchor constant


        - `gui.ANCHOR_NONE`

        - `gui.ANCHOR_LEFT`

        - `gui.ANCHOR_RIGHT`'
      name: anchor
      type: constant
    type: function
  - desc: The y-anchor specifies how the node is moved when the game is run in a different
      resolution.
    name: get_yanchor
    parameters:
    - desc: node to get y-anchor from
      name: node
      type: node
    returns:
    - desc: 'anchor constant


        - `gui.ANCHOR_NONE`

        - `gui.ANCHOR_TOP`

        - `gui.ANCHOR_BOTTOM`'
      type: constant
    type: function
  - desc: The y-anchor specifies how the node is moved when the game is run in a different
      resolution.
    name: set_yanchor
    parameters:
    - desc: node to set y-anchor for
      name: node
      type: node
    - desc: 'anchor constant


        - `gui.ANCHOR_NONE`

        - `gui.ANCHOR_TOP`

        - `gui.ANCHOR_BOTTOM`'
      name: anchor
      type: constant
    type: function
  - desc: The pivot specifies how the node is drawn and rotated from its position.
    name: get_pivot
    parameters:
    - desc: node to get pivot from
      name: node
      type: node
    returns:
    - desc: "pivot constant\n<ul>\n  <li><code>gui.PIVOT_CENTER</code></li>\n  <li><code>gui.PIVOT_N</code></li>\n\
        \  <li><code>gui.PIVOT_NE</code></li>\n  <li><code>gui.PIVOT_E</code></li>\n\
        \  <li><code>gui.PIVOT_SE</code></li>\n  <li><code>gui.PIVOT_S</code></li>\n\
        \  <li><code>gui.PIVOT_SW</code></li>\n  <li><code>gui.PIVOT_W</code></li>\n\
        \  <li><code>gui.PIVOT_NW</code></li>\n</ul>"
      type: constant
    type: function
  - desc: The pivot specifies how the node is drawn and rotated from its position.
    name: set_pivot
    parameters:
    - desc: node to set pivot for
      name: node
      type: node
    - desc: "pivot constant\n<ul>\n  <li><code>gui.PIVOT_CENTER</code></li>\n  <li><code>gui.PIVOT_N</code></li>\n\
        \  <li><code>gui.PIVOT_NE</code></li>\n  <li><code>gui.PIVOT_E</code></li>\n\
        \  <li><code>gui.PIVOT_SE</code></li>\n  <li><code>gui.PIVOT_S</code></li>\n\
        \  <li><code>gui.PIVOT_SW</code></li>\n  <li><code>gui.PIVOT_W</code></li>\n\
        \  <li><code>gui.PIVOT_NW</code></li>\n</ul>"
      name: pivot
      type: constant
    type: function
  - desc: Returns the scene width.
    name: get_width
    parameters: []
    returns:
    - desc: scene width
      type: number
    type: function
  - desc: Returns the scene height.
    name: get_height
    parameters: []
    returns:
    - desc: scene height
      type: number
    type: function
  - desc: Set the slice9 configuration values for the node.
    name: set_slice9
    parameters:
    - desc: node to manipulate
      name: node
      type: node
    - desc: new values
      name: values
      type: vector4
    type: function
  - desc: Returns the slice9 configuration values for the node.
    name: get_slice9
    parameters:
    - desc: node to manipulate
      name: node
      type: node
    returns:
    - desc: configuration values
      type: vector4
    type: function
  - desc: Sets the number of generated vertices around the perimeter of a pie node.
    name: set_perimeter_vertices
    parameters:
    - desc: pie node
      name: node
      type: node
    - desc: vertex count
      name: vertices
      type: number
    type: function
  - desc: 'Returns the number of generated vertices around the perimeter

      of a pie node.'
    name: get_perimeter_vertices
    parameters:
    - desc: pie node
      name: node
      type: node
    returns:
    - desc: vertex count
      type: number
    type: function
  - desc: Set the sector angle of a pie node.
    name: set_fill_angle
    parameters:
    - desc: node to set the fill angle for
      name: node
      type: node
    - desc: sector angle
      name: angle
      type: number
    type: function
  - desc: Returns the sector angle of a pie node.
    name: get_fill_angle
    parameters:
    - desc: node from which to get the fill angle
      name: node
      type: node
    returns:
    - desc: sector angle
      type: number
    type: function
  - desc: 'Sets the inner radius of a pie node.

      The radius is defined along the x-axis.'
    name: set_inner_radius
    parameters:
    - desc: node to set the inner radius for
      name: node
      type: node
    - desc: inner radius
      name: radius
      type: number
    type: function
  - desc: 'Returns the inner radius of a pie node.

      The radius is defined along the x-axis.'
    name: get_inner_radius
    parameters:
    - desc: node from where to get the inner radius
      name: node
      type: node
    returns:
    - desc: inner radius
      type: number
    type: function
  - desc: Sets the outer bounds mode for a pie node.
    name: set_outer_bounds
    parameters:
    - desc: node for which to set the outer bounds mode
      name: node
      type: node
    - desc: 'the outer bounds mode of the pie node:


        - `gui.PIEBOUNDS_RECTANGLE`

        - `gui.PIEBOUNDS_ELLIPSE`'
      name: bounds_mode
      type: constant
    type: function
  - desc: Returns the outer bounds mode for a pie node.
    name: get_outer_bounds
    parameters:
    - desc: node from where to get the outer bounds mode
      name: node
      type: node
    returns:
    - desc: 'the outer bounds mode of the pie node:


        - `gui.PIEBOUNDS_RECTANGLE`

        - `gui.PIEBOUNDS_ELLIPSE`'
      type: constant
    type: function
  - desc: 'Sets the leading value for a text node. This value is used to

      scale the line spacing of text.'
    name: set_leading
    parameters:
    - desc: node for which to set the leading
      name: node
      type: node
    - desc: a scaling value for the line spacing (default=1)
      name: leading
      type: number
    type: function
  - desc: Returns the leading value for a text node.
    name: get_leading
    parameters:
    - desc: node from where to get the leading
      name: node
      type: node
    returns:
    - desc: leading scaling value (default=1)
      type: number
    type: function
  - desc: 'Sets the tracking value of a text node. This value is used to

      adjust the vertical spacing of characters in the text.'
    name: set_tracking
    parameters:
    - desc: node for which to set the tracking
      name: node
      type: node
    - desc: a scaling number for the letter spacing (default=0)
      name: tracking
      type: number
    type: function
  - desc: Returns the tracking value of a text node.
    name: get_tracking
    parameters:
    - desc: node from where to get the tracking
      name: node
      type: node
    returns:
    - desc: tracking scaling number (default=0)
      type: number
    type: function
  - desc: 'Tests whether a coordinate is within the bounding box of a

      node.'
    name: pick_node
    parameters:
    - desc: node to be tested for picking
      name: node
      type: node
    - desc: x-coordinate (see <a href="#on_input">on_input</a> )
      name: x
      type: number
    - desc: y-coordinate (see <a href="#on_input">on_input</a> )
      name: y
      type: number
    returns:
    - desc: pick result
      type: boolean
    type: function
  - desc: 'Returns `true` if a node is enabled and `false` if it''s not.

      Disabled nodes are not rendered and animations acting on them are not evaluated.'
    name: is_enabled
    parameters:
    - desc: node to query
      name: node
      type: node
    - desc: check hierarchy recursively
      name: recursive
      type: boolean
    returns:
    - desc: whether the node is enabled or not
      type: boolean
    type: function
  - desc: 'Sets a node to the disabled or enabled state.

      Disabled nodes are not rendered and animations acting on them are not evaluated.'
    name: set_enabled
    parameters:
    - desc: node to be enabled/disabled
      name: node
      type: node
    - desc: whether the node should be enabled or not
      name: enabled
      type: boolean
    type: function
  - desc: 'Returns `true` if a node is visible and `false` if it''s not.

      Invisible nodes are not rendered.'
    name: get_visible
    parameters:
    - desc: node to query
      name: node
      type: node
    returns:
    - desc: whether the node is visible or not
      type: boolean
    type: function
  - desc: Set if a node should be visible or not. Only visible nodes are rendered.
    name: set_visible
    parameters:
    - desc: node to be visible or not
      name: node
      type: node
    - desc: whether the node should be visible or not
      name: visible
      type: boolean
    type: function
  - desc: 'Returns the adjust mode of a node.

      The adjust mode defines how the node will adjust itself to screen

      resolutions that differs from the one in the project settings.'
    name: get_adjust_mode
    parameters:
    - desc: node from which to get the adjust mode (node)
      name: node
      type: node
    returns:
    - desc: 'the current adjust mode


        - `gui.ADJUST_FIT`

        - `gui.ADJUST_ZOOM`

        - `gui.ADJUST_STRETCH`'
      type: constant
    type: function
  - desc: 'Sets the adjust mode on a node.

      The adjust mode defines how the node will adjust itself to screen

      resolutions that differs from the one in the project settings.'
    name: set_adjust_mode
    parameters:
    - desc: node to set adjust mode for
      name: node
      type: node
    - desc: 'adjust mode to set


        - `gui.ADJUST_FIT`

        - `gui.ADJUST_ZOOM`

        - `gui.ADJUST_STRETCH`'
      name: adjust_mode
      type: constant
    type: function
  - desc: 'Returns the size of a node.

      The size mode defines how the node will adjust itself in size. Automatic

      size mode alters the node size based on the node''s content. Automatic size

      mode works for Box nodes and Pie nodes which will both adjust their size

      to match the assigned image. Particle fx and Text nodes will ignore

      any size mode setting.'
    name: get_size_mode
    parameters:
    - desc: node from which to get the size mode (node)
      name: node
      type: node
    returns:
    - desc: "the current size mode\n\n  - `gui.SIZE_MODE_MANUAL`\n  - `gui.SIZE_MODE_AUTO`"
      type: constant
    type: function
  - desc: 'Sets the size mode of a node.

      The size mode defines how the node will adjust itself in size. Automatic

      size mode alters the node size based on the node''s content. Automatic size

      mode works for Box nodes and Pie nodes which will both adjust their size

      to match the assigned image. Particle fx and Text nodes will ignore

      any size mode setting.'
    name: set_size_mode
    parameters:
    - desc: node to set size mode for
      name: node
      type: node
    - desc: "size mode to set\n\n  - `gui.SIZE_MODE_MANUAL`\n  - `gui.SIZE_MODE_AUTO`"
      name: size_mode
      type: constant
    type: function
  - desc: 'Alters the ordering of the two supplied nodes by moving the first node

      above the second.

      If the second argument is `nil` the first node is moved to the top.'
    name: move_above
    parameters:
    - desc: to move
      name: node
      type: node
    - desc: reference node above which the first node should be moved
      name: node
      type:
      - node
      - nil
    type: function
  - desc: 'Alters the ordering of the two supplied nodes by moving the first node

      below the second.

      If the second argument is `nil` the first node is moved to the bottom.'
    name: move_below
    parameters:
    - desc: to move
      name: node
      type: node
    - desc: reference node below which the first node should be moved
      name: node
      type:
      - node
      - nil
    type: function
  - desc: 'Returns the parent node of the specified node.

      If the supplied node does not have a parent, `nil` is returned.'
    name: get_parent
    parameters:
    - desc: the node from which to retrieve its parent
      name: node
      type: node
    returns:
    - desc: parent instance or nil
      type: node
    type: function
  - desc: Sets the parent node of the specified node.
    name: set_parent
    parameters:
    - desc: node for which to set its parent
      name: node
      type: node
    - desc: parent node to set
      name: parent
      type: node
    - desc: optional flag to make the scene position being perserved
      name: keep_scene_transform
      type: boolean
    type: function
  - desc: 'Make a clone instance of a node.

      This function does not clone the supplied node''s children nodes.

      Use gui.clone_tree for that purpose.'
    name: clone
    parameters:
    - desc: node to clone
      name: node
      type: node
    returns:
    - desc: the cloned node
      type: node
    type: function
  - desc: 'Make a clone instance of a node and all its children.

      Use gui.clone to clone a node excluding its children.'
    name: clone_tree
    parameters:
    - desc: root node to clone
      name: node
      type: node
    returns:
    - desc: a table mapping node ids to the corresponding cloned nodes
      type: table
    type: function
  - desc: 'Resets all nodes in the current GUI scene to their initial state.

      The reset only applies to static node loaded from the scene.

      Nodes that are created dynamically from script are not affected.'
    name: reset_nodes
    parameters: []
    type: function
  - desc: 'Set the order number for the current GUI scene.

      The number dictates the sorting of the "gui" render predicate,

      in other words in which order the scene will be rendered in relation

      to other currently rendered GUI scenes.


      The number must be in the range 0 to 15.'
    name: set_render_order
    parameters:
    - desc: rendering order (0-15)
      name: order
      type: number
    type: function
  - desc: default keyboard
    name: KEYBOARD_TYPE_DEFAULT
    type: number
  - desc: number input keyboard
    name: KEYBOARD_TYPE_NUMBER_PAD
    type: number
  - desc: email keyboard
    name: KEYBOARD_TYPE_EMAIL
    type: number
  - desc: password keyboard
    name: KEYBOARD_TYPE_PASSWORD
    type: number
  - desc: 'Shows the on-display touch keyboard.

      The specified type of keyboard is displayed if it is available on

      the device.


      This function is only available on iOS and Android. [icon:ios] [icon:android].'
    name: show_keyboard
    parameters:
    - desc: 'keyboard type


        - `gui.KEYBOARD_TYPE_DEFAULT`

        - `gui.KEYBOARD_TYPE_EMAIL`

        - `gui.KEYBOARD_TYPE_NUMBER_PAD`

        - `gui.KEYBOARD_TYPE_PASSWORD`'
      name: type
      type: constant
    - desc: if the keyboard should automatically close when clicking outside
      name: autoclose
      type: boolean
    type: function
  - desc: Hides the on-display touch keyboard on the device.
    name: hide_keyboard
    parameters: []
    type: function
  - desc: Resets the input context of keyboard. This will clear marked text.
    name: reset_keyboard
    parameters: []
    type: function
  - desc: Returns the position of the supplied node.
    name: get_position
    parameters:
    - desc: node to get the position from
      name: node
      type: node
    returns:
    - desc: node position
      type: vector3
    type: function
  - desc: Sets the position of the supplied node.
    name: set_position
    parameters:
    - desc: node to set the position for
      name: node
      type: node
    - desc: new position
      name: position
      type:
      - vector3
      - vector4
    type: function
  - desc: 'Returns the rotation of the supplied node.

      The rotation is expressed in degree Euler angles.'
    name: get_rotation
    parameters:
    - desc: node to get the rotation from
      name: node
      type: node
    returns:
    - desc: node rotation
      type: vector3
    type: function
  - desc: 'Sets the rotation of the supplied node.

      The rotation is expressed in degree Euler angles.'
    name: set_rotation
    parameters:
    - desc: node to set the rotation for
      name: node
      type: node
    - desc: new rotation
      name: rotation
      type:
      - vector3
      - vector4
    type: function
  - desc: Returns the scale of the supplied node.
    name: get_scale
    parameters:
    - desc: node to get the scale from
      name: node
      type: node
    returns:
    - desc: node scale
      type: vector3
    type: function
  - desc: Sets the scaling of the supplied node.
    name: set_scale
    parameters:
    - desc: node to set the scale for
      name: node
      type: node
    - desc: new scale
      name: scale
      type:
      - vector3
      - vector4
    type: function
  - desc: 'Returns the color of the supplied node. The components

      of the returned vector4 contains the color channel values:


      Component | Color value

      --------- | -------------

      x         | Red value

      y         | Green value

      z         | Blue value

      w         | Alpha value'
    name: get_color
    parameters:
    - desc: node to get the color from
      name: node
      type: node
    returns:
    - desc: node color
      type: vector4
    type: function
  - desc: 'Sets the color of the supplied node. The components

      of the supplied vector3 or vector4 should contain the color channel values:


      Component        | Color value

      ---------------- | -------------

      x                | Red value

      y                | Green value

      z                | Blue value

      w [type:vector4] | Alpha value'
    name: set_color
    parameters:
    - desc: node to set the color for
      name: node
      type: node
    - desc: new color
      name: color
      type:
      - vector3
      - vector4
    type: function
  - desc: 'Returns the outline color of the supplied node.

      See [ref:gui.get_color] for info how vectors encode color values.'
    name: get_outline
    parameters:
    - desc: node to get the outline color from
      name: node
      type: node
    returns:
    - desc: outline color
      type: vector4
    type: function
  - desc: 'Sets the outline color of the supplied node.

      See [ref:gui.set_color] for info how vectors encode color values.'
    name: set_outline
    parameters:
    - desc: node to set the outline color for
      name: node
      type: node
    - desc: new outline color
      name: color
      type:
      - vector3
      - vector4
    type: function
  - desc: 'Returns the shadow color of the supplied node.

      See [ref:gui.get_color] for info how vectors encode color values.'
    name: get_shadow
    parameters:
    - desc: node to get the shadow color from
      name: node
      type: node
    returns:
    - desc: node shadow color
      type: vector4
    type: function
  - desc: 'Sets the shadow color of the supplied node.

      See [ref:gui.set_color] for info how vectors encode color values.'
    name: set_shadow
    parameters:
    - desc: node to set the shadow color for
      name: node
      type: node
    - desc: new shadow color
      name: color
      type:
      - vector3
      - vector4
    type: function
  - desc: 'Sets the size of the supplied node.


      [icon:attention] You can only set size on nodes with size mode set to SIZE_MODE_MANUAL'
    name: set_size
    parameters:
    - desc: node to set the size for
      name: node
      type: node
    - desc: new size
      name: size
      type:
      - vector3
      - vector4
    type: function
  - desc: Returns the size of the supplied node.
    name: get_size
    parameters:
    - desc: node to get the size from
      name: node
      type: node
    returns:
    - desc: node size
      type: vector3
    type: function
  - desc: 'Returns the screen position of the supplied node. This function returns
      the

      calculated transformed position of the node, taking into account any parent
      node

      transforms.'
    name: get_screen_position
    parameters:
    - desc: node to get the screen position from
      name: node
      type: node
    returns:
    - desc: node screen position
      type: vector3
    type: function
  - desc: Set the screen position to the supplied node
    name: set_screen_position
    parameters:
    - desc: node to set the screen position to
      name: node
      type: node
    - desc: screen position
      name: screen_position
      type: vector3
    type: function
  - desc: Convert the screen position to the local position of supplied node
    name: screen_to_local
    parameters:
    - desc: node used for getting local transformation matrix
      name: node
      type: node
    - desc: screen position
      name: screen_position
      type: vector3
    returns:
    - desc: local position
      type: vector3
    type: function
  - desc: This is only useful nodes with flipbook animations. Gets the normalized
      cursor of the flipbook animation on a node.
    name: get_flipbook_cursor
    parameters:
    - desc: node to get the cursor for (node)
      name: node
      type: node
    returns:
    - desc: value [type:number] cursor value
      type: ''
    type: function
  - desc: This is only useful nodes with flipbook animations. The cursor is normalized.
    name: set_flipbook_cursor
    parameters:
    - desc: node to set the cursor for
      name: node
      type: node
    - desc: cursor value
      name: cursor
      type: number
    type: function
  - desc: This is only useful nodes with flipbook animations. Gets the playback rate
      of the flipbook animation on a node.
    name: get_flipbook_playback_rate
    parameters:
    - desc: node to set the cursor for
      name: node
      type: node
    returns:
    - desc: playback rate
      type: number
    type: function
  - desc: This is only useful nodes with flipbook animations. Sets the playback rate
      of the flipbook animation on a node. Must be positive.
    name: set_flipbook_playback_rate
    parameters:
    - desc: node to set the cursor for
      name: node
      type: node
    - desc: playback rate
      name: playback_rate
      type: number
    type: function
  - desc: Dynamically create a particle fx node.
    name: new_particlefx_node
    parameters:
    - desc: node position
      name: pos
      type:
      - vector3
      - vector4
    - desc: particle fx resource name
      name: particlefx
      type:
      - hash
      - string
    returns:
    - desc: new particle fx node
      type: node
    type: function
  - desc: Plays the paricle fx for a gui node
    name: play_particlefx
    parameters:
    - desc: node to play particle fx for
      name: node
      type: node
    - desc: 'optional callback function that will be called when an emitter attached
        to this particlefx changes state.


        `self`

        : [type:object] The current object


        `node`

        : [type:hash] The particle fx node, or `nil` if the node was deleted


        `emitter`

        : [type:hash] The id of the emitter


        `state`

        : [type:constant] the new state of the emitter:


        - `particlefx.EMITTER_STATE_SLEEPING`

        - `particlefx.EMITTER_STATE_PRESPAWN`

        - `particlefx.EMITTER_STATE_SPAWNING`

        - `particlefx.EMITTER_STATE_POSTSPAWN`'
      name: emitter_state_function
      optional: true
      type: function(self, node, emitter, state)
    type: function
  - desc: Stops the particle fx for a gui node
    name: stop_particlefx
    parameters:
    - desc: node to stop particle fx for
      name: node
      type: node
    - desc: 'options when stopping the particle fx. Supported options:


        - [type:boolean] `clear`: instantly clear spawned particles'
      name: options
      type: table
    type: function
  - desc: Set the paricle fx for a gui node
    name: set_particlefx
    parameters:
    - desc: node to set particle fx for
      name: node
      type: node
    - desc: particle fx id
      name: particlefx
      type:
      - hash
      - string
    type: function
  - desc: Get the paricle fx for a gui node
    name: get_particlefx
    parameters:
    - desc: node to get particle fx for
      name: node
      type: node
    returns:
    - desc: particle fx id
      type: ''
    type: function
  - desc: gets the node inherit alpha state
    name: get_inherit_alpha
    parameters:
    - desc: node from which to get the inherit alpha state
      name: node
      type: node
    type: function
  - desc: sets the node inherit alpha state
    name: set_inherit_alpha
    parameters:
    - desc: node from which to set the inherit alpha state
      name: node
      type: node
    - desc: true or false
      name: inherit_alpha
      type: boolean
    type: function
  - desc: gets the node alpha
    name: get_alpha
    parameters:
    - desc: node from which to get alpha
      name: node
      type: node
    type: function
  - desc: sets the node alpha
    name: set_alpha
    parameters:
    - desc: node for which to set alpha
      name: node
      type: node
    - desc: 0..1 alpha color
      name: alpha
      type: number
    type: function
  - desc: position property
    name: PROP_POSITION
    type: number
  - desc: rotation property
    name: PROP_ROTATION
    type: number
  - desc: scale property
    name: PROP_SCALE
    type: number
  - desc: color property
    name: PROP_COLOR
    type: number
  - desc: outline color property
    name: PROP_OUTLINE
    type: number
  - desc: shadow color property
    name: PROP_SHADOW
    type: number
  - desc: size property
    name: PROP_SIZE
    type: number
  - desc: fill_angle property
    name: PROP_FILL_ANGLE
    type: number
  - desc: inner_radius property
    name: PROP_INNER_RADIUS
    type: number
  - desc: slice9 property
    name: PROP_SLICE9
    type: number
  - desc: alpha blending
    name: BLEND_ALPHA
    type: number
  - desc: additive blending
    name: BLEND_ADD
    type: number
  - desc: additive alpha blending
    name: BLEND_ADD_ALPHA
    type: number
  - desc: multiply blending
    name: BLEND_MULT
    type: number
  - desc: clipping mode none
    name: CLIPPING_MODE_NONE
    type: number
  - desc: clipping mode stencil
    name: CLIPPING_MODE_STENCIL
    type: number
  - desc: left x-anchor
    name: ANCHOR_LEFT
    type: number
  - desc: right x-anchor
    name: ANCHOR_RIGHT
    type: number
  - desc: top y-anchor
    name: ANCHOR_TOP
    type: number
  - desc: bottom y-anchor
    name: ANCHOR_BOTTOM
    type: number
  - desc: no anchor
    name: ANCHOR_NONE
    type: number
  - desc: center pivot
    name: PIVOT_CENTER
    type: number
  - desc: north pivot
    name: PIVOT_N
    type: number
  - desc: north-east pivot
    name: PIVOT_NE
    type: number
  - desc: east pivot
    name: PIVOT_E
    type: number
  - desc: south-east pivot
    name: PIVOT_SE
    type: number
  - desc: south pivot
    name: PIVOT_S
    type: number
  - desc: south-west pivot
    name: PIVOT_SW
    type: number
  - desc: west pivot
    name: PIVOT_W
    type: number
  - desc: north-west pivot
    name: PIVOT_NW
    type: number
  - desc: 'Adjust mode is used when the screen resolution differs from the project
      settings.

      The fit mode ensures that the entire node is visible in the adjusted gui scene.'
    name: ADJUST_FIT
    type: number
  - desc: 'Adjust mode is used when the screen resolution differs from the project
      settings.

      The zoom mode ensures that the node fills its entire area and might make the
      node exceed it.'
    name: ADJUST_ZOOM
    type: number
  - desc: 'Adjust mode is used when the screen resolution differs from the project
      settings.

      The stretch mode ensures that the node is displayed as is in the adjusted gui
      scene, which might scale it non-uniformally.'
    name: ADJUST_STRETCH
    type: number
  - desc: elliptical pie node bounds
    name: PIEBOUNDS_ELLIPSE
    type: number
  - desc: rectangular pie node bounds
    name: PIEBOUNDS_RECTANGLE
    type: number
  - desc: The size of the node is determined by the size set in the editor, the constructor
      or by gui.set_size()
    name: SIZE_MODE_MANUAL
    type: number
  - desc: The size of the node is determined by the currently assigned texture.
    name: SIZE_MODE_AUTO
    type: number
  - desc: The texture id already exists when trying to use gui.new_texture().
    name: RESULT_TEXTURE_ALREADY_EXISTS
    type: number
  - desc: 'The system is out of resources, for instance when trying to create a new

      texture using gui.new_texture().'
    name: RESULT_OUT_OF_RESOURCES
    type: number
  - desc: 'The provided data is not in the expected format or is in some other way

      incorrect, for instance the image data provided to gui.new_texture().'
    name: RESULT_DATA_ERROR
    type: number
  name: gui
  type: table
