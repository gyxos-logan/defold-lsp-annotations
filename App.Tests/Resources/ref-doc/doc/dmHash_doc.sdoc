elements {
  type: TYPEDEF
  name: "dmhash_t"
  brief: "dmhash_t type definition"
  description: "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"kt\">uint64_t</span><span class=\"w\"> </span><span class=\"n\">dmhash_t</span><span class=\"w\"></span>\n</code></pre></div>"
}
elements {
  type: FUNCTION
  name: "dmHashBuffer32"
  brief: "Calculate 32-bit hash value from buffer"
  description: "Calculate 32-bit hash value from buffer"
  returnvalues {
    name: "hash"
    doc: "hash value"
    types: "uint32_t"
  }
  parameters {
    name: "buffer"
    doc: "Buffer"
    types: "const void*"
  }
  parameters {
    name: "buffer_len"
    doc: "Length of buffer"
    types: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "dmHashBuffer64"
  brief: "calculate 64-bit hash value from buffer"
  description: "calculate 64-bit hash value from buffer"
  returnvalues {
    name: "hash"
    doc: "hash value"
    types: "uint64_t"
  }
  parameters {
    name: "buffer"
    doc: "Buffer"
    types: "const void*"
  }
  parameters {
    name: "buffer_len"
    doc: "Length of buffer"
    types: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "dmHashString32"
  brief: "Calculate 32-bit hash value from string"
  description: "Calculate 32-bit hash value from string"
  returnvalues {
    name: "hash"
    doc: "hash value"
    types: "uint32_t"
  }
  parameters {
    name: "string"
    doc: "Null terminated string"
    types: "const char*"
  }
}
elements {
  type: FUNCTION
  name: "dmHashString64"
  brief: "calculate 64-bit hash value from string"
  description: "calculate 64-bit hash value from string"
  returnvalues {
    name: "hash"
    doc: "hash value"
    types: "uint64_t"
  }
  parameters {
    name: "string"
    doc: "Null terminated string"
    types: "const char*"
  }
}
elements {
  type: FUNCTION
  name: "dmHashReverseSafe64"
  brief: "get string value from hash"
  description: "Returns the original string used to produce a hash.\nAlways returns a null terminated string. Returns \"<unknown>\" if the original string wasn\'t found."
  returnvalues {
    name: ""
    doc: "Original string value or \"<unknown>\" if it wasn\'t found."
    types: "const char*"
  }
  parameters {
    name: "hash"
    doc: "hash value"
    types: "uint64_t"
  }
}
elements {
  type: FUNCTION
  name: "dmHashReverseSafe64"
  brief: "get string value from hash"
  description: "Reverse hash lookup. Maps hash to original data. It is guaranteed that the returned\nbuffer is null-terminated. If the buffer contains a valid c-string\nit can safely be used in printf and friends."
  returnvalues {
    name: ""
    doc: "pointer to buffer. 0 if no reverse exists or if reverse lookup is disabled"
    types: "const char*"
  }
  parameters {
    name: "hash"
    doc: "hash to lookup"
    types: "uint64_t"
  }
  parameters {
    name: "length"
    doc: "original data length. Optional argument and NULL-pointer is accepted."
    types: "uint32_t*"
  }
}
elements {
  type: FUNCTION
  name: "dmHashReverseSafe32"
  brief: "get string value from hash"
  description: "Returns the original string used to produce a hash.\nAlways returns a null terminated string. Returns \"<unknown>\" if the original string wasn\'t found."
  returnvalues {
    name: ""
    doc: "Original string value or \"<unknown>\" if it wasn\'t found."
    types: "const char*"
  }
  parameters {
    name: "hash"
    doc: "hash value"
    types: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "dmHashReverseSafe32"
  brief: "get string value from hash"
  description: "Reverse hash lookup. Maps hash to original data. It is guaranteed that the returned\nbuffer is null-terminated. If the buffer contains a valid c-string\nit can safely be used in printf and friends."
  returnvalues {
    name: ""
    doc: "pointer to buffer. 0 if no reverse exists or if reverse lookup is disabled"
    types: "const char*"
  }
  parameters {
    name: "hash"
    doc: "hash to lookup"
    types: "uint32_t"
  }
  parameters {
    name: "length"
    doc: "original data length. Optional argument and NULL-pointer is accepted."
    types: "uint32_t*"
  }
}
elements {
  type: STRUCT
  name: "HashState32"
  brief: "Hash state used for 32-bit incremental hashing"
  description: "Hash state used for 32-bit incremental hashing"
}
elements {
  type: STRUCT
  name: "HashState64"
  brief: "Hash state used for 64-bit incremental hashing"
  description: "Hash state used for 64-bit incremental hashing"
}
elements {
  type: FUNCTION
  name: "dmHashInit32"
  brief: "Initialize hash-state for 32-bit incremental hashi..."
  description: "Initialize hash-state for 32-bit incremental hashing"
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState32*"
  }
  parameters {
    name: "reverse_hash"
    doc: "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "dmHashClone32"
  brief: "Clone 32-bit incremental hash state"
  description: "Clone 32-bit incremental hash state"
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState32*"
  }
  parameters {
    name: "source_hash_state"
    doc: "Source hash state"
    types: "HashState32*"
  }
  parameters {
    name: "reverse_hash"
    doc: "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH. Ignored if source state reverse hashing is disabled."
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "dmHashUpdateBuffer32"
  brief: "Incremental hashing"
  description: "Incremental hashing"
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState32*"
  }
  parameters {
    name: "buffer"
    doc: "Buffer"
    types: "const void*"
  }
  parameters {
    name: "buffer_len"
    doc: "Length of buffer"
    types: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "dmHashFinal32"
  brief: "Finalize incremental hashing and release associate..."
  description: "Finalize incremental hashing and release associated resources"
  returnvalues {
    name: "hash"
    doc: "the hash value"
    types: "uint32_t"
  }
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState32*"
  }
}
elements {
  type: FUNCTION
  name: "dmHashRelease32"
  brief: "Release incremental hashing resources\nUsed to rele..."
  description: "Release incremental hashing resources\nUsed to release assocciated resources for intermediate incremental hash states."
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState32*"
  }
}
elements {
  type: FUNCTION
  name: "dmHashInit64"
  brief: "Initialize hash-state for 64-bit incremental hashi..."
  description: "Initialize hash-state for 64-bit incremental hashing"
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState64*"
  }
  parameters {
    name: "reverse_hash"
    doc: "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH"
    types: ""
  }
}
elements {
  type: FUNCTION
  name: "dmHashClone64"
  brief: "Clone 64-bit incremental hash state"
  description: "Clone 64-bit incremental hash state"
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState64*"
  }
  parameters {
    name: "source_hash_state"
    doc: "Source hash state"
    types: "HashState64*"
  }
  parameters {
    name: "reverse_hash"
    doc: "true <span class=\"type\"> bool</span> to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH. Ignored if source state reverse hashing is disabled."
    types: ""
  }
}
elements {
  type: FUNCTION
  name: "dmHashUpdateBuffer64"
  brief: "Incremental hashing"
  description: "Incremental hashing"
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState64*"
  }
  parameters {
    name: "buffer"
    doc: "Buffer"
    types: "const void*"
  }
  parameters {
    name: "buffer_len"
    doc: "Length of buffer"
    types: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "dmHashFinal64"
  brief: "Finalize incremental hashing and release associate..."
  description: "Finalize incremental hashing and release associated resources"
  returnvalues {
    name: "hash"
    doc: "The hash value"
    types: "uint64_t"
  }
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState64*"
  }
}
elements {
  type: FUNCTION
  name: "dmHashRelease64"
  brief: "Release incremental hashing resources\nUsed to rele..."
  description: "Release incremental hashing resources\nUsed to release assocciated resources for intermediate incremental hash states."
  parameters {
    name: "hash_state"
    doc: "Hash state"
    types: "HashState64*"
  }
}
info {
  namespace: "dmHash"
  name: "Hash"
  brief: "SDK Hash API documentation"
  description: "Hash functions."
  path: "engine/dlib/src/dmsdk/dlib/hash.h"
  file: "dmsdk/dlib/hash.h"
}
