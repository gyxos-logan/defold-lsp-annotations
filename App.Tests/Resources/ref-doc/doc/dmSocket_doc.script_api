- desc: Socket default timeout value
  name: SOCKET_TIMEOUT
  type: number
- desc: Socket type definition
  name: Socket
  type: typedef
- desc: Invalid socket handle
  name: INVALID_SOCKET_HANDLE
  type: number
- desc: Domain type
  name: Domain
  type: enum
- desc: Socket type
  name: Type
  type: enum
- desc: Network protocol
  name: Protocol
  type: enum
- desc: Socket shutdown type
  name: ShutdownType
  type: enum
- desc: Socket result
  name: Result
  type: enum
- desc: 'Network addresses were previously represented as an uint32_t, but in

    order to support IPv6 the internal representation was changed to a struct.'
  name: Address
  type: struct
- desc: Create a new socket. Corresponds to BSD socket function socket().
  name: New
  parameters:
  - desc: Socket type
    name: type
    type: Type
  - desc: Protocol
    name: protocol
    type: Protocol
  - desc: Pointer to socket
    name: socket
    type: Socket*
  returns:
  - desc: RESULT_OK on succcess
    type: ''
  type: function
- desc: Delete a socket. Corresponds to BSD socket function close()
  name: Delete
  parameters:
  - desc: Socket to close
    name: socket
    type: Socket
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Initiate a connection on a socket
  name: Connect
  parameters:
  - desc: Socket to initiate connection on
    name: socket
    type: Socket
  - desc: Address to connect to
    name: address
    type: Address
  - desc: Port to connect to
    name: port
    type: int
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Shutdown part of a socket connection
  name: Shutdown
  parameters:
  - desc: Socket to shutdown connection ow
    name: socket
    type: Socket
  - desc: Shutdown type
    name: how
    type: ShutdownType
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Get underlying file descriptor
  name: GetFD
  parameters:
  - desc: socket to get fd for
    name: socket
    type: Socket
  returns:
  - desc: file-descriptor
    type: ''
  type: function
- desc: Set reuse socket address option on socket. Socket option SO_REUSEADDR on most
    platforms
  name: SetReuseAddress
  parameters:
  - desc: Socket to set reuse address to
    name: socket
    type: Socket
  - desc: True if reuse
    name: reuse
    type: bool
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Set broadcast address option on socket. Socket option SO_BROADCAST on most
    platforms.
  name: SetBroadcast
  parameters:
  - desc: Socket to set reuse address to
    name: socket
    type: Socket
  - desc: True if broadcast
    name: broadcast
    type: bool
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Set blocking option on a socket
  name: SetBlocking
  parameters:
  - desc: Socket to set blocking on
    name: socket
    type: Socket
  - desc: True to block
    name: blocking
    type: bool
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Set TCP_NODELAY on socket
  name: SetNoDelay
  parameters:
  - desc: Socket to set TCP_NODELAY on
    name: socket
    type: Socket
  - desc: True for no delay
    name: no_delay
    type: bool
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Set TCP_QUICKACK on socket
  name: SetQuickAck
  parameters:
  - desc: Socket to set TCP_QUICKACK on
    name: socket
    type: Socket
  - desc: False to disable quick ack
    name: use_quick_ack
    type: bool
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Set socket send timeout
  name: SetSendTimeout
  parameters:
  - desc: socket
    name: socket
    type: Socket
  - desc: timeout in microseconds
    name: timeout
    type: uint64_t
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Set socket receive timeout
  name: SetReceiveTimeout
  parameters:
  - desc: socket
    name: socket
    type: Socket
  - desc: timeout in microseconds
    name: timeout
    type: uint64_t
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Send a message on a socket
  name: Send
  parameters:
  - desc: Socket to send a message on
    name: socket
    type: Socket
  - desc: Buffer to send
    name: buffer
    type: void*
  - desc: Length of buffer to send
    name: length
    type: int
  - desc: Number of bytes sent (result)
    name: sent_bytes[out]
    type: int*
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Receive data on a socket
  name: Receive
  parameters:
  - desc: Socket to receive data on
    name: socket
    type: Socket
  - desc: Buffer to receive to
    name: buffer[out]
    type: void*
  - desc: Receive buffer length
    name: length
    type: int
  - desc: Number of received bytes (result)
    name: received_bytes[out]
    type: int*
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Get host by name
  name: GetHostByName
  parameters:
  - desc: Hostname to resolve
    name: name
    type: const char*
  - desc: Host address result
    name: address
    type: Address*
  - desc: Whether or not to search for IPv4 addresses
    name: ipv4
    type: bool
  - desc: Whether or not to search for IPv6 addresses
    name: ipv6
    type: bool
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Get host by name with timeout and cancelability
  name: GetHostByName
  parameters:
  - desc: Hostname to resolve
    name: name
    type: const char*
  - desc: Host address result
    name: address
    type: Address*
  - desc: Timeout in microseconds
    name: timeout
    type: uint64_t
  - desc: if non null and set, will abort the call
    name: cancelflag
    type: int*
  - desc: Whether or not to search for IPv4 addresses
    name: ipv4
    type: bool
  - desc: Whether or not to search for IPv6 addresses
    name: ipv6
    type: bool
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Convert result value to string
  name: ResultToString
  parameters:
  - desc: Result to convert
    name: result
    type: Result
  returns:
  - desc: char*] Result as string
    type: ''
  type: function
- desc: Selector kind
  name: SelectorKind
  type: enum
- desc: Selector
  name: Selector
  type: struct
- desc: Clear selector for socket. Similar to FD_CLR
  name: SelectorClear
  parameters:
  - desc: Selector
    name: selector
    type: Selector*
  - desc: Kind to clear
    name: selector_kind
    type: SelectorKind
  - desc: Socket to clear
    name: socket
    type: Socket
  returns:
  - desc: ''
    type: ''
  type: function
- desc: Set selector for socket. Similar to FD_SET
  name: SelectorSet
  parameters:
  - desc: Selector
    name: selector
    type: Selector*
  - desc: Kind to clear
    name: selector_kind
    type: SelectorKind
  - desc: Socket to set
    name: socket
    type: Socket
  returns:
  - desc: ''
    type: ''
  type: function
- desc: Check if selector is set. Similar to FD_ISSET
  name: SelectorIsSet
  parameters:
  - desc: Selector
    name: selector
    type: Selector*
  - desc: Selector kind
    name: selector_kind
    type: SelectorKind
  - desc: Socket to check for
    name: socket
    type: Socket
  returns:
  - desc: True if set.
    type: ''
  type: function
- desc: Clear selector (all kinds). Similar to FD_ZERO
  name: SelectorZero
  parameters:
  - desc: Selector
    name: selector
    type: Selector*
  returns:
  - desc: ''
    type: ''
  type: function
- desc: Select for pending data
  name: Select
  parameters:
  - desc: Selector
    name: selector
    type: Selector*
  - desc: Timeout. For blocking pass -1. (microseconds)
    name: timeout
    type: int
  returns:
  - desc: RESULT_OK on success
    type: ''
  type: function
- desc: Socket functions.
  members: []
  name: dmSocket
  type: table
