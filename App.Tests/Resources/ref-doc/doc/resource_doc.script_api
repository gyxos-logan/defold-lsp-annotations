- desc: Functions and constants to access resources.
  members:
  - desc: 'Constructor-like function with two purposes:


      - Load the specified resource as part of loading the script

      - Return a hash to the run-time version of the resource


      [icon:attention] This function can only be called within [ref:go.property] function
      calls.'
    name: material
    parameters:
    - desc: optional resource path string to the resource
      name: path
      optional: true
      type: string
    returns:
    - desc: a path hash to the binary version of the resource
      type: hash
    type: function
  - desc: 'Constructor-like function with two purposes:


      - Load the specified resource as part of loading the script

      - Return a hash to the run-time version of the resource


      [icon:attention] This function can only be called within [ref:go.property] function
      calls.'
    name: font
    parameters:
    - desc: optional resource path string to the resource
      name: path
      optional: true
      type: string
    returns:
    - desc: a path hash to the binary version of the resource
      type: hash
    type: function
  - desc: 'Constructor-like function with two purposes:


      - Load the specified resource as part of loading the script

      - Return a hash to the run-time version of the resource


      [icon:attention] This function can only be called within [ref:go.property] function
      calls.'
    name: texture
    parameters:
    - desc: optional resource path string to the resource
      name: path
      optional: true
      type: string
    returns:
    - desc: a path hash to the binary version of the resource
      type: hash
    type: function
  - desc: 'Constructor-like function with two purposes:


      - Load the specified resource as part of loading the script

      - Return a hash to the run-time version of the resource


      [icon:attention] This function can only be called within [ref:go.property] function
      calls.'
    name: atlas
    parameters:
    - desc: optional resource path string to the resource
      name: path
      optional: true
      type: string
    returns:
    - desc: a path hash to the binary version of the resource
      type: hash
    type: function
  - desc: 'Constructor-like function with two purposes:


      - Load the specified resource as part of loading the script

      - Return a hash to the run-time version of the resource


      [icon:attention] This function can only be called within [ref:go.property] function
      calls.'
    name: buffer
    parameters:
    - desc: optional resource path string to the resource
      name: path
      optional: true
      type: string
    returns:
    - desc: a path hash to the binary version of the resource
      type: hash
    type: function
  - desc: 'Constructor-like function with two purposes:


      - Load the specified resource as part of loading the script

      - Return a hash to the run-time version of the resource


      [icon:attention] This function can only be called within [ref:go.property] function
      calls.'
    name: tile_source
    parameters:
    - desc: optional resource path string to the resource
      name: path
      optional: true
      type: string
    returns:
    - desc: a path hash to the binary version of the resource
      type: hash
    type: function
  - desc: Sets the resource data for a specific resource
    name: set
    parameters:
    - desc: The path to the resource
      name: path
      type:
      - string
      - hash
    - desc: The buffer of precreated data, suitable for the intended resource type
      name: buffer
      type: buffer
    type: function
  - desc: Loads the resource data for a specific resource.
    name: load
    parameters:
    - desc: The path to the resource
      name: path
      type: string
    returns:
    - desc: Returns the buffer stored on disc
      type: buffer
    type: function
  - desc: Creates a new texture resource.
    name: create_texture
    parameters:
    - desc: The path to the resource.
      name: path
      type: string
    - desc: 'A table containing info about how to create the texture. Supported entries:


        `type`

        : [type:number] The texture type. Supported values:


        - `resource.TEXTURE_TYPE_2D`

        - `resource.TEXTURE_TYPE_CUBE_MAP`


        `width`

        : [type:number] The width of the texture (in pixels)


        `height`

        : [type:number] The width of the texture (in pixels)


        `format`

        : [type:number] The texture format. Supported values:


        - `resource.TEXTURE_FORMAT_LUMINANCE`

        - `resource.TEXTURE_FORMAT_RGB`

        - `resource.TEXTURE_FORMAT_RGBA`


        `max_mipmaps`

        : [type:number] optional max number of mipmaps. Defaults to zero, i.e no mipmap
        support'
      name: table
      type: table
    returns:
    - desc: The path to the resource.
      type: hash
    type: function
  - desc: Release a resource.
    name: release
    parameters:
    - desc: The path to the resource.
      name: path
      type:
      - hash
      - string
    type: function
  - desc: Sets the pixel data for a specific texture.
    name: set_texture
    parameters:
    - desc: The path to the resource
      name: path
      type:
      - hash
      - string
    - desc: 'A table containing info about the texture. Supported entries:


        `type`

        : [type:number] The texture type. Supported values:


        - `resource.TEXTURE_TYPE_2D`

        - `resource.TEXTURE_TYPE_CUBE_MAP`


        `width`

        : [type:number] The width of the texture (in pixels)


        `height`

        : [type:number] The width of the texture (in pixels)


        `format`

        : [type:number] The texture format. Supported values:


        - `resource.TEXTURE_FORMAT_LUMINANCE`

        - `resource.TEXTURE_FORMAT_RGB`

        - `resource.TEXTURE_FORMAT_RGBA`


        `x`

        : [type:number] optional x offset of the texture (in pixels)


        `y`

        : [type:number] optional y offset of the texture (in pixels)


        `mipmap`

        : [type:number] optional mipmap to upload the data to'
      name: table
      type: table
    - desc: 'The buffer of precreated pixel data


        [icon:attention] To update a cube map texture you need to pass in six times
        the amount of data via the buffer, since a cube map has six sides!'
      name: buffer
      type: buffer
    type: function
  - desc: Update internal sound resource (wavc/oggc) with new data
    name: set_sound
    parameters:
    - desc: The path to the resource
      name: path
      type:
      - hash
      - string
    - desc: A lua string containing the binary sound data
      name: buffer
      type: string
    type: function
  - desc: gets the buffer from a resource
    name: get_buffer
    parameters:
    - desc: The path to the resource
      name: path
      type:
      - hash
      - string
    returns:
    - desc: The resource buffer
      type: buffer
    type: function
  - desc: sets the buffer of a resource
    name: set_buffer
    parameters:
    - desc: The path to the resource
      name: path
      type:
      - hash
      - string
    - desc: The resource buffer
      name: buffer
      type: buffer
    type: function
  - desc: Gets the text metrics from a font
    name: get_text_metrics
    parameters:
    - desc: the font to get the (unscaled) metrics from
      name: url
      type: hash
    - desc: text to measure
      name: text
      type: string
    - desc: 'A table containing parameters for the text. Supported entries:


        `width`

        : [type:integer] The width of the text field. Not used if `line_break` is
        false.


        `leading`

        : [type:number] The leading (default 1.0)


        `tracking`

        : [type:number] The leading (default 0.0)


        `line_break`

        : [type:boolean] If the calculation should consider line breaks (default false)'
      name: options
      optional: true
      type: table
    returns:
    - desc: 'a table with the following fields:


        - width

        - height

        - max_ascent

        - max_descent'
      type: table
    type: function
  - desc: 2D texture type
    name: TEXTURE_TYPE_2D
    type: number
  - desc: Cube map texture type
    name: TEXTURE_TYPE_CUBE_MAP
    type: number
  - desc: luminance type texture format
    name: TEXTURE_FORMAT_LUMINANCE
    type: number
  - desc: RGB type texture format
    name: TEXTURE_FORMAT_RGB
    type: number
  - desc: RGBA type texture format
    name: TEXTURE_FORMAT_RGBA
    type: number
  - desc: LIVEUPDATE_OK
    name: LIVEUPDATE_OK
    type: number
  - desc: The handled resource is invalid.
    name: LIVEUPDATE_INVALID_RESOURCE
    type: number
  - desc: Mismatch between manifest expected version and actual version.
    name: LIVEUPDATE_VERSION_MISMATCH
    type: number
  - desc: Mismatch between running engine version and engine versions supported by
      manifest.
    name: LIVEUPDATE_ENGINE_VERSION_MISMATCH
    type: number
  - desc: Mismatch between manifest expected signature and actual signature.
    name: LIVEUPDATE_SIGNATURE_MISMATCH
    type: number
  - desc: Mismatch between scheme used to load resources. Resources are loaded with
      a different scheme than from manifest, for example over HTTP or directly from
      file. This is typically the case when running the game directly from the editor
      instead of from a bundle.
    name: LIVEUPDATE_SCHEME_MISMATCH
    type: number
  - desc: Mismatch between between expected bundled resources and actual bundled resources.
      The manifest expects a resource to be in the bundle, but it was not found in
      the bundle. This is typically the case when a non-excluded resource was modified
      between publishing the bundle and publishing the manifest.
    name: LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH
    type: number
  - desc: Failed to parse manifest data buffer. The manifest was probably produced
      by a different engine version.
    name: LIVEUPDATE_FORMAT_ERROR
    type: number
  - desc: Return a reference to the Manifest that is currently loaded.
    name: get_current_manifest
    parameters: []
    returns:
    - desc: reference to the Manifest that is currently loaded
      type: number
    type: function
  - desc: 'add a resource to the data archive and runtime index. The resource will
      be verified

      internally before being added to the data archive.'
    name: store_resource
    parameters:
    - desc: The manifest to check against.
      name: manifest_reference
      type: number
    - desc: The resource data that should be stored.
      name: data
      type: string
    - desc: 'The expected hash for the resource,

        retrieved through collectionproxy.missing_resources.'
      name: hexdigest
      type: string
    - desc: 'The callback

        function that is executed once the engine has been attempted to store

        the resource.


        `self`

        : [type:object] The current object.


        `hexdigest`

        : [type:string] The hexdigest of the resource.


        `status`

        : [type:boolean] Whether or not the resource was successfully stored.'
      name: callback
      type: function(self, hexdigest, status)
    type: function
  - desc: 'Create a new manifest from a buffer. The created manifest is verified

      by ensuring that the manifest was signed using the bundled public/private

      key-pair during the bundle process and that the manifest supports the current

      running engine version. Once the manifest is verified it is stored on device.

      The next time the engine starts (or is rebooted) it will look for the stored

      manifest before loading resources. Storing a new manifest allows the

      developer to update the game, modify existing resources, or add new

      resources to the game through LiveUpdate.'
    name: store_manifest
    parameters:
    - desc: the binary data that represents the manifest
      name: manifest_buffer
      type: string
    - desc: 'the callback function

        executed once the engine has attempted to store the manifest.


        `self`

        : [type:object] The current object.


        `status`

        : [type:constant] the status of the store operation:


        - `resource.LIVEUPATE_OK`

        - `resource.LIVEUPATE_INVALID_RESOURCE`

        - `resource.LIVEUPATE_VERSION_MISMATCH`

        - `resource.LIVEUPATE_ENGINE_VERSION_MISMATCH`

        - `resource.LIVEUPATE_SIGNATURE_MISMATCH`

        - `resource.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH`

        - `resource.LIVEUPDATE_FORMAT_ERROR`'
      name: callback
      type: function(self, status)
    type: function
  - desc: 'Stores a zip file and uses it for live update content. The contents of
      the

      zip file will be verified against the manifest to ensure file integrity.

      It is possible to opt out of the resource verification using an option passed

      to this function.

      The path is stored in the (internal) live update location.'
    name: store_archive
    parameters:
    - desc: the path to the original file on disc
      name: path
      type: string
    - desc: 'the callback function

        executed after the storage has completed


        `self`

        : [type:object] The current object.


        `status`

        : [type:constant] the status of the store operation (See resource.store_manifest)'
      name: callback
      type: function(self, status)
    - desc: 'optional table with extra parameters. Supported entries:


        - [type:boolean] `verify`: if archive should be verified as well as stored
        (defaults to true)'
      name: options
      optional: true
      type: table
    type: function
  - desc: 'Is any liveupdate data mounted and currently in use?

      This can be used to determine if a new manifest or zip file should be downloaded.'
    name: is_using_liveupdate_data
    parameters: []
    returns:
    - desc: true if a liveupdate archive (any format) has been loaded
      type: bool
    type: function
  name: resource
  type: table
