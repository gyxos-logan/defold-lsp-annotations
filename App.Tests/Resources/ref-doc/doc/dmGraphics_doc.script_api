- desc: Context handle
  name: HContext
  type: typedef
- desc: Texture handle
  name: HTexture
  type: typedef
- desc: Vertex program handle
  name: HVertexProgram
  type: typedef
- desc: Fragment program handle
  name: HFragmentProgram
  type: typedef
- desc: Program handle
  name: HProgram
  type: typedef
- desc: Vertex buffer handle
  name: HVertexBuffer
  type: typedef
- desc: Index buffer handle
  name: HIndexBuffer
  type: typedef
- desc: Vertex declaration handle
  name: HVertexDeclaration
  type: typedef
- desc: ''
  name: HandleResult
  type: enum
- desc: ''
  name: RenderTargetAttachment
  type: enum
- desc: ''
  name: TextureFormat
  type: enum
- desc: ''
  name: CompareFunc
  type: enum
- desc: ''
  name: FaceWinding
  type: enum
- desc: ''
  name: StencilOp
  type: enum
- desc: ''
  name: BufferUsage
  type: enum
- desc: ''
  name: BufferAccess
  type: enum
- desc: ''
  name: IndexBufferFormat
  type: enum
- desc: Primitive type
  name: PrimitiveType
  type: enum
- desc: Data type
  name: Type
  type: enum
- desc: Blend factor
  name: BlendFactor
  type: enum
- desc: ''
  name: VertexElement
  type: struct
- desc: Create new vertex declaration
  name: NewVertexDeclaration
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  - desc: the array of vertex elements
    name: element
    type: dmGraphics::VertexElement*
  - desc: the number of items in the element array
    name: count
    type: uint32_t
  returns:
  - desc: the vertex declaration
    type: dmGraphics::HVertexDeclaration
  type: function
- desc: Create new vertex declaration
  name: NewVertexDeclaration
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  - desc: the array of vertex elements
    name: element
    type: dmGraphics::VertexElement*
  - desc: the number of items in the element array
    name: count
    type: uint32_t
  - desc: the stride between the start of each vertex (in bytes)
    name: stride
    type: uint32_t
  returns:
  - desc: the vertex declaration
    type: dmGraphics::HVertexDeclaration
  type: function
- desc: Delete vertex declaration
  name: DeleteVertexDeclaration
  parameters:
  - desc: the vertex declaration
    name: vertex_declaration
    type: dmGraphics::HVertexDeclaration
  type: function
- desc: Create new vertex buffer with initial data
  name: NewVertexBuffer
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  - desc: the size of the buffer (in bytes). May be 0
    name: size
    type: uint32_t
  - desc: the data
    name: data
    type: void*
  - desc: the usage
    name: buffer_usage
    type: dmGraphics::BufferUsage
  returns:
  - desc: the vertex buffer
    type: dmGraphics::HVertexBuffer
  type: function
- desc: Delete vertex buffer
  name: DeleteVertexBuffer
  parameters:
  - desc: the buffer
    name: buffer
    type: dmGraphics::HVertexBuffer
  type: function
- desc: Set vertex buffer data
  name: SetVertexBufferData
  parameters:
  - desc: the buffer
    name: buffer
    type: dmGraphics::HVertexBuffer
  - desc: the size of the buffer (in bytes). May be 0
    name: size
    type: uint32_t
  - desc: the data
    name: data
    type: void*
  - desc: the usage
    name: buffer_usage
    type: dmGraphics::BufferUsage
  type: function
- desc: Set subset of vertex buffer data
  name: SetVertexBufferSubData
  parameters:
  - desc: the buffer
    name: buffer
    type: dmGraphics::HVertexBuffer
  - desc: the offset into the desination buffer (in bytes)
    name: offset
    type: uint32_t
  - desc: the size of the buffer (in bytes). May be 0
    name: size
    type: uint32_t
  - desc: the data
    name: data
    type: void*
  type: function
- desc: Get the max number of vertices allowed by the system in a vertex buffer
  name: GetMaxElementsVertices
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  returns:
  - desc: the count
    type: uint32_t
  type: function
- desc: Create new index buffer with initial data
  name: NewIndexBuffer
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  - desc: the size of the buffer (in bytes). May be 0
    name: size
    type: uint32_t
  - desc: the data
    name: data
    type: void*
  - desc: the usage
    name: buffer_usage
    type: dmGraphics::BufferUsage
  returns:
  - desc: the index buffer
    type: dmGraphics::HIndexBuffer
  type: function
- desc: Delete the index buffer
  name: DeleteIndexBuffer
  parameters:
  - desc: the index buffer
    name: buffer
    type: dmGraphics::HIndexBuffer
  type: function
- desc: Set index buffer data
  name: SetIndexBufferData
  parameters:
  - desc: the buffer
    name: buffer
    type: dmGraphics::HIndexBuffer
  - desc: the size of the buffer (in bytes). May be 0
    name: size
    type: uint32_t
  - desc: the data
    name: data
    type: void*
  - desc: the usage
    name: buffer_usage
    type: dmGraphics::BufferUsage
  type: function
- desc: Set subset of index buffer data
  name: SetIndexBufferSubData
  parameters:
  - desc: the buffer
    name: buffer
    type: dmGraphics::HVertexBuffer
  - desc: the offset into the desination buffer (in bytes)
    name: offset
    type: uint32_t
  - desc: the size of the buffer (in bytes). May be 0
    name: size
    type: uint32_t
  - desc: the data
    name: data
    type: void*
  type: function
- desc: Check if the index format is supported
  name: IsIndexBufferFormatSupported
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  - desc: the format
    name: format
    type: dmGraphics::IndexBufferFormat
  - desc: true if the format is supoprted
    name: result
    type: bool
  type: function
- desc: Get the max number of indices allowed by the system in an index buffer
  name: GetMaxElementsIndices
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  returns:
  - desc: the count
    type: uint32_t
  type: function
- desc: check if an extension is supported
  name: IsExtensionSupported
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  - desc: the extension.
    name: extension
    type: const char*
  returns:
  - desc: true if the extension was supported
    type: bool
  type: function
- desc: check if a specific texture format is supported
  name: IsTextureFormatSupported
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  - desc: the texture format.
    name: format
    type: TextureFormat
  returns:
  - desc: true if the texture format was supported
    type: bool
  type: function
- desc: ''
  name: GetNumSupportedExtensions
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  returns:
  - desc: the number of supported extensions
    type: uint32_t
  type: function
- desc: get the supported extension
  name: GetSupportedExtension
  parameters:
  - desc: the context
    name: context
    type: dmGraphics::HContext
  - desc: the index of the extension
    name: index
    type: uint32_t
  returns:
  - desc: the extension. 0 if index was out of bounds
    type: const char*
  type: function
- desc: Platform specific native graphics functions.
  members:
  - desc: Get iOS UIWindow native handle (id). Any other platform return zero.
    name: :GetNativeiOSUIWindow
    parameters: []
    returns:
    - desc: native handle
      type: id
    type: function
  - desc: Get iOS UIView native handle (id). Any other platform return zero.
    name: :GetNativeiOSUIView
    parameters: []
    returns:
    - desc: native handle
      type: id
    type: function
  - desc: Get iOS EAGLContext native handle (id). Any other platform return zero.
    name: :GetNativeiOSEAGLContext
    parameters: []
    returns:
    - desc: native handle
      type: id
    type: function
  - desc: Get OSX NSWindow native handle (id). Any other platform return zero.
    name: :GetNativeOSXNSWindow
    parameters: []
    returns:
    - desc: native handle
      type: id
    type: function
  - desc: Get OSX NSView native handle (id). Any other platform return zero.
    name: :GetNativeOSXNSView
    parameters: []
    returns:
    - desc: native handle
      type: id
    type: function
  - desc: Get OSX NSOpenGLContext native handle (id). Any other platform return zero.
    name: :GetNativeOSXNSOpenGLContext
    parameters: []
    returns:
    - desc: native handle
      type: id
    type: function
  - desc: Get Win32 windows native handle (HWND). Any other platform return zero.
    name: :GetNativeWindowsHWND
    parameters: []
    returns:
    - desc: native handle
      type: HWND
    type: function
  - desc: Get Win32 gl rendercontext native handle (HGLRC). Any other platform return
      zero.
    name: :GetNativeWindowsHGLRC
    parameters: []
    returns:
    - desc: native handle
      type: HGLRC
    type: function
  - desc: Get Android EGLContext native handle (EGLContext). Any other platform return
      zero.
    name: :GetNativeAndroidEGLContext
    parameters: []
    returns:
    - desc: native handle
      type: EGLContext
    type: function
  - desc: Get Android EGLSurface native handle (EGLSurface). Any other platform return
      zero.
    name: :GetNativeAndroidEGLSurface
    parameters: []
    returns:
    - desc: native handle
      type: EGLSurface
    type: function
  - desc: Get Android JavaVM ptr. Any other platform return zero.
    name: :GetNativeAndroidJavaVM
    parameters: []
    returns:
    - desc: native handle
      type: JavaVM*
    type: function
  - desc: Get Android native jobject. Any other platform return zero.
    name: :GetNativeAndroidActivity
    parameters: []
    returns:
    - desc: native handle
      type: jobject
    type: function
  - desc: Get Android app object. Any other platform return zero.
    name: :GetNativeAndroidApp
    parameters: []
    returns:
    - desc: native handle
      type: struct android_app*
    type: function
  - desc: Get Linux X11Window windows native handle (Window). Any other platform return
      zero.
    name: :GetNativeX11Window
    parameters: []
    returns:
    - desc: native handle
      type: Window
    type: function
  - desc: Get Linux X11GLXContext native handle (GLXContext). Any other platform return
      zero.
    name: :GetNativeX11GLXContext
    parameters: []
    returns:
    - desc: native handle
      type: GLXContext
    type: function
  name: dmGraphics
  type: table
