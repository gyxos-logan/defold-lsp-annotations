- desc: "Documentation for the Lua string standard library.\n\nFrom [Lua 5.1 Reference\
    \ Manual](https://www.lua.org/manual/5.1/)\nby Roberto Ierusalimschy, Luiz Henrique\
    \ de Figueiredo, Waldemar Celes.\n\nCopyright &copy; 2006-2012 Lua.org, PUC-Rio.\n\
    \nFreely available under the terms of the [Lua license](https://www.lua.org/license.html).\n\
    \n\n### Patterns\n\n_Character Class:_\n\nA character class is used to represent\
    \ a set of characters.\nThe following combinations are allowed in describing a\
    \ character class:\n\nx\n: (where x is not one of the <em>magic characters</em>\
    \ `^$()%.[]*+-?`)\n  represents the character <em>x</em> itself.\n\n`.`\n: (a\
    \ dot) represents all characters.\n\n`%a`\n: represents all letters.\n\n`%c`\n\
    : represents all control characters.\n\n`%d`\n: represents all digits.\n\n`%l`\n\
    : represents all lowercase letters.\n\n`%p`\n: represents all punctuation characters.\n\
    \n`%s`\n: represents all space characters.\n\n`%u`\n: represents all uppercase\
    \ letters.\n\n`%w`\n: represents all alphanumeric characters.\n\n`%x`\n: represents\
    \ all hexadecimal digits.\n\n`%z`\n: represents the character with representation\
    \ 0.\n\n`%x`\n: (where x is any non-alphanumeric character) represents the character\
    \ x.\n  This is the standard way to escape the magic characters.\n  Any punctuation\
    \ character (even the non magic) can be preceded by a '%'\n  when used to represent\
    \ itself in a pattern.\n\n`[set]`\n: represents the class which is the union of\
    \ all characters in set.\n  A range of characters can be specified by separating\
    \ the end characters\n  of the range with a '-'.\n  All classes `%`<em>x</em>\
    \ described above can also be used as components in set.\n  All other characters\
    \ in set represent themselves.\n  For example, `[%w_]` (or `[_%w]`) represents\
    \ all alphanumeric characters\n  plus the underscore, `[0-7]` represents the octal\
    \ digits,\n  and `[0-7%l%-]` represents the octal digits plus the lowercase letters\n\
    \  plus the '-' character.\n\n  The interaction between ranges and classes is\
    \ not defined.\n  Therefore, patterns like `[%a-z]` or `[a-%%]` have no meaning.\n\
    \n`[^set]`\n: represents the complement of set,\n  where set is interpreted as\
    \ above.\n\nFor all classes represented by single letters (`%a`, `%c`, etc.),\n\
    the corresponding uppercase letter represents the complement of the class.\nFor\
    \ instance, `%S` represents all non-space characters.\n\nThe definitions of letter,\
    \ space, and other character groups\ndepend on the current locale. In particular,\
    \ the class `[a-z]` may not be\nequivalent to `%l`.\n\n_Pattern Item:_\n\nA pattern\
    \ item can be\n\n- a single character class, which matches any single character\
    \ in the class;\n\n- a single character class followed by '*',\n  which matches\
    \ 0 or more repetitions of characters in the class.\n  These repetition items\
    \ will always match the longest possible sequence;\n\n- a single character class\
    \ followed by '+',\n  which matches 1 or more repetitions of characters in the\
    \ class.\n  These repetition items will always match the longest possible sequence;\n\
    \n- a single character class followed by '-',\n  which also matches 0 or more\
    \ repetitions of characters in the class.\n  Unlike '*', these repetition items\
    \ will always match the <em>shortest</em>\n  possible sequence;\n\n- a single\
    \ character class followed by '?',\n  which matches 0 or 1 occurrence of a character\
    \ in the class;\n\n- `%n`, for n between 1 and 9; such item matches a substring\
    \ equal to the\n  n-th captured string (see below);\n\n- `%bxy`, where x and y\
    \ are two distinct characters;\n  such item matches strings that start with x,\
    \ end with y,\n  and where the x and y are <em>balanced</em>.\n  This means that,\
    \ if one reads the string from left to right,\n  counting +1 for an x and -1 for\
    \ a y,\n  the ending y is the first y where the count reaches 0.\n  For instance,\
    \ the item `%b()` matches expressions with balanced parentheses.\n\n_Pattern:_\n\
    \nA pattern is a sequence of pattern items.\nA '^' at the beginning of a pattern\
    \ anchors the match at the\nbeginning of the subject string.\nA '$' at the end\
    \ of a pattern anchors the match at the\nend of the subject string.\nAt other\
    \ positions, '^' and '$' have no special meaning and represent themselves.\n\n\
    _Captures:_\n\nA pattern can contain sub-patterns enclosed in parentheses;\nthey\
    \ describe captures.\nWhen a match succeeds, the substrings of the subject string\n\
    that match captures are stored (<em>captured</em>) for future use.\nCaptures are\
    \ numbered according to their left parentheses.\nFor instance, in the pattern\
    \ `\"(a*(.)%w(%s*))\"`,\nthe part of the string matching `\"a*(.)%w(%s*)\"` is\n\
    stored as the first capture (and therefore has number 1);\nthe character matching\
    \ \".\" is captured with number 2,\nand the part matching \"%s*\" has number 3.\n\
    \nAs a special case, the empty capture `()` captures\nthe current string position\
    \ (a number).\nFor instance, if we apply the pattern `\"()aa()\"` on the\nstring\
    \ `\"flaaap\"`, there will be two captures: 3 and 5.\n\nA pattern cannot contain\
    \ embedded zeros.  Use `%z` instead."
  members:
  - desc: 'Returns the internal numerical codes of the characters `s[i]`,

      `s[i+1]`, ..., `s[j]`.

      The default value for i is 1;

      the default value for j is i.


      Note that numerical codes are not necessarily portable across platforms.'
    name: byte
    parameters:
    - desc: ''
      name: s
      type: ''
    - desc: ''
      name: i
      optional: true
      type: ''
    - desc: ''
      name: j
      optional: true
      type: ''
    type: function
  - desc: 'Receives zero or more integers.

      Returns a string with length equal to the number of arguments,

      in which each character has the internal numerical code equal

      to its corresponding argument.


      Note that numerical codes are not necessarily portable across platforms.'
    name: char
    parameters:
    - desc: ''
      name: '...'
      type: ''
    type: function
  - desc: 'Returns a string containing a binary representation of the given function,

      so that a later loadstring on this string returns

      a copy of the function.

      function must be a Lua function without upvalues.'
    name: dump
    parameters:
    - desc: ''
      name: function
      type: ''
    type: function
  - desc: 'Looks for the first match of

      pattern in the string s.

      If it finds a match, then find returns the indices of `s`

      where this occurrence starts and ends;

      otherwise, it returns [type: nil].

      A third, optional numerical argument init specifies

      where to start the search;

      its default value is 1 and can be negative.

      A value of [type: true] as a fourth, optional argument plain

      turns off the pattern matching facilities,

      so the function does a plain "find substring" operation,

      with no characters in pattern being considered "magic".

      Note that if plain is given, then init must be given as well.


      If the pattern has captures,

      then in a successful match

      the captured values are also returned,

      after the two indices.'
    name: find
    parameters:
    - desc: ''
      name: s
      type: ''
    - desc: ''
      name: pattern
      type: ''
    - desc: ''
      name: init
      optional: true
      type: ''
    - desc: ''
      name: plain
      optional: true
      type: ''
    type: function
  - desc: "Returns a formatted version of its variable number of arguments\nfollowing\
      \ the description given in its first argument (which must be a string).\nThe\
      \ format string follows the same rules as the printf family of\nstandard C functions.\n\
      The only differences are that the options/modifiers\n`*`, l, L, n, p,\nand h\
      \ are not supported\nand that there is an extra option, q.\nThe q option formats\
      \ a string in a form suitable to be safely read\nback by the Lua interpreter:\n\
      the string is written between double quotes,\nand all double quotes, newlines,\
      \ embedded zeros,\nand backslashes in the string\nare correctly escaped when\
      \ written.\nFor instance, the call\n\n\n```lua\nstring.format('%q', 'a string\
      \ with \"quotes\" and \\n new line')\n```\n\nwill produce the string:\n\n\n\
      ```lua\n\"a string with \\\"quotes\\\" and \\\n new line\"\n```\n\n\nThe options\
      \ c, d, E, e, f,\ng, G, i, o, u, X, and x all\nexpect a number as argument,\n\
      whereas q and s expect a string.\n\nThis function does not accept string values\n\
      containing embedded zeros,\nexcept as arguments to the q option."
    name: format
    parameters:
    - desc: ''
      name: formatstring
      type: ''
    - desc: ''
      name: '...'
      type: ''
    type: function
  - desc: "Returns an iterator function that,\neach time it is called,\nreturns the\
      \ next captures from pattern over string s.\nIf pattern specifies no captures,\n\
      then the whole match is produced in each call.\n\nAs an example, the following\
      \ loop\n\n\n```lua\ns = \"hello world from Lua\"\nfor w in string.gmatch(s,\
      \ \"%a+\") do\n  print(w)\nend\n```\n\nwill iterate over all the words from\
      \ string s,\nprinting one per line.\nThe next example collects all pairs `key=value`\
      \ from the\ngiven string into a table:\n\n\n```lua\nt = {}\ns = \"from=world,\
      \ to=Lua\"\nfor k, v in string.gmatch(s, \"(%w+)=(%w+)\") do\n  t[k] = v\nend\n\
      ```\n\n\nFor this function, a '^' at the start of a pattern does not\nwork as\
      \ an anchor, as this would prevent the iteration."
    name: gmatch
    parameters:
    - desc: ''
      name: s
      type: ''
    - desc: ''
      name: pattern
      type: ''
    type: function
  - desc: "Returns a copy of s\nin which all (or the first n, if given)\noccurrences\
      \ of the pattern have been\nreplaced by a replacement string specified by repl,\n\
      which can be a string, a table, or a function.\ngsub also returns, as its second\
      \ value,\nthe total number of matches that occurred.\n\nIf repl is a string,\
      \ then its value is used for replacement.\nThe character `%` works as an escape\
      \ character:\nany sequence in repl of the form `%n`,\nwith n between 1 and 9,\n\
      stands for the value of the n-th captured substring (see below).\nThe sequence\
      \ `%0` stands for the whole match.\nThe sequence `%%` stands for a single `%`.\n\
      \nIf repl is a table, then the table is queried for every match,\nusing the\
      \ first capture as the key;\nif the pattern specifies no captures,\nthen the\
      \ whole match is used as the key.\n\nIf repl is a function, then this function\
      \ is called every time a\nmatch occurs, with all captured substrings passed\
      \ as arguments,\nin order;\nif the pattern specifies no captures,\nthen the\
      \ whole match is passed as a sole argument.\n\nIf the value returned by the\
      \ table query or by the function call\nis a string or a number,\nthen it is\
      \ used as the replacement string;\notherwise, if it is false or [type: nil],\n\
      then there is no replacement\n(that is, the original match is kept in the string).\n\
      \nHere are some examples:\n\n\n```lua\nx = string.gsub(\"hello world\", \"(%w+)\"\
      , \"%1 %1\")\n--> x=\"hello hello world world\"\n\nx = string.gsub(\"hello world\"\
      , \"%w+\", \"%0 %0\", 1)\n--> x=\"hello hello world\"\n\nx = string.gsub(\"\
      hello world from Lua\", \"(%w+)%s*(%w+)\", \"%2 %1\")\n--> x=\"world hello Lua\
      \ from\"\n\nx = string.gsub(\"home = $HOME, user = $USER\", \"%$(%w+)\", os.getenv)\n\
      --> x=\"home = /home/roberto, user = roberto\"\n\nx = string.gsub(\"4+5 = $return\
      \ 4+5$\", \"%$(.-)%$\", function (s)\n      return loadstring(s)()\n    end)\n\
      --> x=\"4+5 = 9\"\n\nlocal t = {name=\"lua\", version=\"5.1\"}\nx = string.gsub(\"\
      $name-$version.tar.gz\", \"%$(%w+)\", t)\n--> x=\"lua-5.1.tar.gz\"\n```"
    name: gsub
    parameters:
    - desc: ''
      name: s
      type: ''
    - desc: ''
      name: pattern
      type: ''
    - desc: ''
      name: repl
      type: ''
    - desc: ''
      name: n
      optional: true
      type: ''
    type: function
  - desc: 'Receives a string and returns its length.

      The empty string `""` has length 0.

      Embedded zeros are counted,

      so `"a\000bc\000"` has length 5.'
    name: len
    parameters:
    - desc: ''
      name: s
      type: ''
    type: function
  - desc: 'Receives a string and returns a copy of this string with all

      uppercase letters changed to lowercase.

      All other characters are left unchanged.

      The definition of what an uppercase letter is depends on the current locale.'
    name: lower
    parameters:
    - desc: ''
      name: s
      type: ''
    type: function
  - desc: 'Looks for the first <em>match</em> of

      pattern in the string s.

      If it finds one, then match returns

      the captures from the pattern;

      otherwise it returns [type: nil].

      If pattern specifies no captures,

      then the whole match is returned.

      A third, optional numerical argument init specifies

      where to start the search;

      its default value is 1 and can be negative.'
    name: match
    parameters:
    - desc: ''
      name: s
      type: ''
    - desc: ''
      name: pattern
      type: ''
    - desc: ''
      name: init
      optional: true
      type: ''
    type: function
  - desc: 'Returns a string that is the concatenation of n copies of

      the string s.'
    name: rep
    parameters:
    - desc: ''
      name: s
      type: ''
    - desc: ''
      name: n
      type: ''
    type: function
  - desc: Returns a string that is the string s reversed.
    name: reverse
    parameters:
    - desc: ''
      name: s
      type: ''
    type: function
  - desc: 'Returns the substring of s that

      starts at i  and continues until j;

      i and j can be negative.

      If j is absent, then it is assumed to be equal to -1

      (which is the same as the string length).

      In particular,

      the call `string.sub(s,1,j)` returns a prefix of s

      with length j,

      and `string.sub(s, -i)` returns a suffix of s

      with length i.'
    name: sub
    parameters:
    - desc: ''
      name: s
      type: ''
    - desc: ''
      name: i
      type: ''
    - desc: ''
      name: j
      optional: true
      type: ''
    type: function
  - desc: 'Receives a string and returns a copy of this string with all

      lowercase letters changed to uppercase.

      All other characters are left unchanged.

      The definition of what a lowercase letter is depends on the current locale.'
    name: upper
    parameters:
    - desc: ''
      name: s
      type: ''
    type: function
  name: string
  type: table
