elements {
  type: CLASS
  name: "ThreadAttacher"
  brief: "Struct attaching the JNI environment. Detaches the"
  description: "Struct attaching the JNI environment. Detaches the"
}
elements {
  type: FUNCTION
  name: "ThreadAttacher"
  brief: "constructor"
  description: "constructor"
  examples: "<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ThreadAttacher</span><span class=\"w\"> </span><span class=\"kr\">thread</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">SomeFunction</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"kr\">thread</span><span class=\"p\">.</span><span class=\"n\">GetEnv</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// Automatically detaches</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ThreadAttacher</span><span class=\"w\"> </span><span class=\"kr\">thread</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">JNIEnv</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">thread</span><span class=\"p\">.</span><span class=\"n\">GetEnv</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">env</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>"
}
elements {
  type: FUNCTION
  name: "Detach"
  brief: "Detaches the jni environment"
  description: "Detaches the jni environment"
  returnvalues {
    name: "ok"
    doc: "true if there was no java exceptions. False if there was an exception."
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "IsAttached"
  brief: "Is the environment attached and valid?"
  description: "Is the environment attached and valid?"
  returnvalues {
    name: "isattached"
    doc: "true if the environment is valid"
    types: "bool"
  }
  examples: "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Result</span><span class=\"w\"> </span><span class=\"nf\">SomeFunc</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ThreadAttacher</span><span class=\"w\"> </span><span class=\"kr\">thread</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">JNIEnv</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">thread</span><span class=\"p\">.</span><span class=\"n\">GetEnv</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">env</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">RESULT_ATTACH_FAILED</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">jni</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kr\">thread</span><span class=\"p\">.</span><span class=\"n\">Detach</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">RESULT_OK</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RESULT_JNI_CALLS_FAILED</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>"
}
elements {
  type: FUNCTION
  name: "GetEnv"
  brief: "Gets the JNI environment"
  description: "Gets the JNI environment"
  returnvalues {
    name: "env"
    doc: "the attached environment"
    types: "JNIENV*"
  }
}
elements {
  type: FUNCTION
  name: "GetActivity"
  brief: "Gets the app native activity"
  description: "Gets the app native activity"
  returnvalues {
    name: "activity"
    doc: "the app native activity"
    types: "ANativeActivity*"
  }
}
elements {
  type: FUNCTION
  name: "LoadClass"
  brief: "Load a class"
  description: "Load a class"
  returnvalues {
    name: "class"
    doc: "the activity class loader"
    types: "jclass"
  }
  parameters {
    name: "env"
    doc: ""
    types: "JNIEnv*"
  }
  parameters {
    name: "class_name"
    doc: ""
    types: "const char*"
  }
}
elements {
  type: FUNCTION
  name: "LoadClass"
  brief: "Load a class"
  description: "Load a class"
  returnvalues {
    name: "class"
    doc: "the activity class loader"
    types: "jclass"
  }
  parameters {
    name: "env"
    doc: ""
    types: "JNIEnv*"
  }
  parameters {
    name: "activity"
    doc: ""
    types: "jobject"
  }
  parameters {
    name: "class_name"
    doc: ""
    types: "const char*"
  }
}
elements {
  type: TYPEDEF
  name: "OnActivityResult"
  brief: "OnActivityResult callback typedef"
  description: "Activity result callback function type. Monitors events from the main activity.\nUsed with RegisterOnActivityResultListener() and UnregisterOnActivityResultListener()"
  parameters {
    name: "env"
    doc: ""
    types: "JNIEnv*"
  }
  parameters {
    name: "activity"
    doc: ""
    types: "jobject"
  }
  parameters {
    name: "request_code"
    doc: ""
    types: "int32_t"
  }
  parameters {
    name: "result_code"
    doc: ""
    types: "int32_t"
  }
  parameters {
    name: "result"
    doc: ""
    types: "void*"
  }
}
elements {
  type: FUNCTION
  name: "RegisterOnActivityResultListener"
  brief: "register Android activity result callback"
  description: "Registers an activity result callback. Multiple listeners are allowed."
  parameters {
    name: "[type:dmAndroid::OnActivityResult]"
    doc: "listener"
    types: ""
  }
}
elements {
  type: FUNCTION
  name: "UnregisterOnActivityResultListener"
  brief: "unregister Android activity result callback"
  description: "Unregisters an activity result callback"
  parameters {
    name: "[type:dmAndroid::OnActivityResult]"
    doc: "listener"
    types: ""
  }
}
elements {
  type: TYPEDEF
  name: "OnActivityCreate"
  brief: "OnActivityCreate callback typedef"
  description: "onCreate callback function type.\nUsed with RegisterOnActivityCreateListener() and UnregisterOnActivityCreateListener()"
  parameters {
    name: "env"
    doc: ""
    types: "JNIEnv*"
  }
  parameters {
    name: "activity"
    doc: ""
    types: "jobject"
  }
}
elements {
  type: FUNCTION
  name: "RegisterOnActivityCreateListener"
  brief: "register Android onCreate callback"
  description: "Registers an onCreate callback. Multiple listeners are allowed."
  parameters {
    name: "[type:dmAndroid::OnActivityCreate]"
    doc: "listener"
    types: ""
  }
}
elements {
  type: FUNCTION
  name: "UnregisterOnActivityCreateListener"
  brief: "unregister Android onCreate callback"
  description: "Unregisters an onCreate callback"
  parameters {
    name: "[type:dmAndroid::OnActivityCreate]"
    doc: "listener"
    types: ""
  }
}
info {
  namespace: "dmAndroid"
  name: "Android"
  brief: "SDK Android API documentation"
  description: "Android utility functions"
  path: "engine/dlib/src/dmsdk/dlib/android.h"
  file: "dmsdk/dlib/android.h"
}
