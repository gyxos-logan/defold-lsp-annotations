- desc: Draw a text on the screen. This should be used for debugging purposes only.
  name: draw_debug_text
  type: message
- desc: Draw a line on the screen. This should mostly be used for debugging purposes.
  name: draw_line
  type: message
- desc: 'Reports a change in window size. This is initiated on window resize on desktop
    or by orientation changes

    on mobile devices.'
  name: window_resized
  type: message
- desc: Set the size of the game window. Only works on desktop platforms.
  name: resize
  type: message
- desc: Set render clear color. This is the color that appears on the screen where
    nothing is rendered, i.e. background.
  name: clear_color
  type: message
- desc: 'Rendering functions, messages and constants. The "render" namespace is

    accessible only from render scripts.


    The rendering API was originally built on top of OpenGL ES 2.0, and it uses a
    subset of the

    OpenGL computer graphics rendering API for rendering 2D and 3D computer

    graphics. Our current target is OpenGLES 3.0 with fallbacks to 2.0 on some platforms.


    [icon:attention] It is possible to create materials and write shaders that

    require features not in OpenGL ES 2.0, but those will not work cross platform.'
  members:
  - desc: 'Constant buffers are used to set shader program variables and are optionally
      passed to the `render.draw()` function.

      The buffer''s constant elements can be indexed like an ordinary Lua table, but
      you can''t iterate over them with pairs() or ipairs().'
    name: constant_buffer
    parameters: []
    returns:
    - desc: new constant buffer
      type: constant_buffer
    type: function
  - desc: ''
    name: STATE_DEPTH_TEST
    type: number
  - desc: ''
    name: STATE_STENCIL_TEST
    type: number
  - desc: ''
    name: STATE_BLEND
    type: number
  - desc: ''
    name: STATE_CULL_FACE
    type: number
  - desc: ''
    name: STATE_POLYGON_OFFSET_FILL
    type: number
  - desc: Enables a particular render state. The state will be enabled until disabled.
    name: enable_state
    parameters:
    - desc: 'state to enable


        - `render.STATE_DEPTH_TEST`

        - `render.STATE_STENCIL_TEST`

        - `render.STATE_BLEND`

        - `render.STATE_ALPHA_TEST` ([icon:iOS][icon:android] not available on iOS
        and Android)

        - `render.STATE_CULL_FACE`

        - `render.STATE_POLYGON_OFFSET_FILL`'
      name: state
      type: constant
    type: function
  - desc: Disables a render state.
    name: disable_state
    parameters:
    - desc: 'state to disable


        - `render.STATE_DEPTH_TEST`

        - `render.STATE_STENCIL_TEST`

        - `render.STATE_BLEND`

        - `render.STATE_ALPHA_TEST` ([icon:iOS][icon:android] not available on iOS
        and Android)

        - `render.STATE_CULL_FACE`

        - `render.STATE_POLYGON_OFFSET_FILL`'
      name: state
      type: constant
    type: function
  - desc: Set the render viewport to the specified rectangle.
    name: set_viewport
    parameters:
    - desc: left corner
      name: x
      type: number
    - desc: bottom corner
      name: y
      type: number
    - desc: viewport width
      name: width
      type: number
    - desc: viewport height
      name: height
      type: number
    type: function
  - desc: ''
    name: FORMAT_LUMINANCE
    type: number
  - desc: ''
    name: FORMAT_RGB
    type: number
  - desc: ''
    name: FORMAT_RGBA
    type: number
  - desc: May be nil if the format isn't supported
    name: FORMAT_RGB16F
    type: number
  - desc: May be nil if the format isn't supported
    name: FORMAT_RGB32F
    type: number
  - desc: May be nil if the format isn't supported
    name: FORMAT_RGBA16F
    type: number
  - desc: May be nil if the format isn't supported
    name: FORMAT_RGBA32F
    type: number
  - desc: May be nil if the format isn't supported
    name: FORMAT_R16F
    type: number
  - desc: May be nil if the format isn't supported
    name: FORMAT_RG16F
    type: number
  - desc: May be nil if the format isn't supported
    name: FORMAT_R32F
    type: number
  - desc: May be nil if the format isn't supported
    name: FORMAT_RG32F
    type: number
  - desc: ''
    name: FORMAT_DEPTH
    type: number
  - desc: ''
    name: FORMAT_STENCIL
    type: number
  - desc: ''
    name: FILTER_LINEAR
    type: number
  - desc: ''
    name: FILTER_NEAREST
    type: number
  - desc: ''
    name: WRAP_CLAMP_TO_BORDER
    type: number
  - desc: ''
    name: WRAP_CLAMP_TO_EDGE
    type: number
  - desc: ''
    name: WRAP_MIRRORED_REPEAT
    type: number
  - desc: ''
    name: WRAP_REPEAT
    type: number
  - desc: 'Creates a new render target according to the supplied

      specification table.


      The table should contain keys specifying which buffers should be created

      with what parameters. Each buffer key should have a table value consisting

      of parameters. The following parameter keys are available:


      Key          | Values

      ------------ | ----------------------------

      `format`     |  `render.FORMAT_LUMINANCE`<br/>`render.FORMAT_RGB`<br/>`render.FORMAT_RGBA`<br/>`render.FORMAT_DEPTH`<br/>`render.FORMAT_STENCIL`<br/>`render.FORMAT_RGBA32F`<br/>`render.FORMAT_RGBA16F`<br/>

      `width`      | number

      `height`     | number

      `min_filter` | `render.FILTER_LINEAR`<br/>`render.FILTER_NEAREST`

      `mag_filter` | `render.FILTER_LINEAR`<br/>`render.FILTER_NEAREST`

      `u_wrap`     | `render.WRAP_CLAMP_TO_BORDER`<br/>`render.WRAP_CLAMP_TO_EDGE`<br/>`render.WRAP_MIRRORED_REPEAT`<br/>`render.WRAP_REPEAT`<br/>

      `v_wrap`     | `render.WRAP_CLAMP_TO_BORDER`<br/>`render.WRAP_CLAMP_TO_EDGE`<br/>`render.WRAP_MIRRORED_REPEAT`<br/>`render.WRAP_REPEAT`


      The render target can be created to support multiple color attachments. Each
      attachment can have different format settings and texture filters,

      but attachments must be added in sequence, meaning you cannot create a render
      target at slot 0 and 3.

      Instead it has to be created with all four buffer types ranging from [0..3]
      (as denoted by render.BUFFER_COLORX_BIT where ''X'' is the attachment you want
      to create).'
    name: render_target
    parameters:
    - desc: render target name
      name: name
      type: string
    - desc: table of buffer parameters, see the description for available keys and
        values
      name: parameters
      type: table
    returns:
    - desc: new render target
      type: render_target
    type: function
  - desc: Deletes a previously created render target.
    name: delete_render_target
    parameters:
    - desc: render target to delete
      name: render_target
      type: render_target
    type: function
  - desc: ''
    name: RENDER_TARGET_DEFAULT
    type: number
  - desc: 'Sets a render target. Subsequent draw operations will be to the

      render target until it is replaced by a subsequent call to set_render_target.'
    name: set_render_target
    parameters:
    - desc: render target to set. render.RENDER_TARGET_DEFAULT to set the default
        render target
      name: render_target
      type: render_target
    - desc: "optional table with behaviour parameters\n\n`transient`\n: [type:table]\
        \ Transient frame buffer types are only valid while the render target is active,\
        \ i.e becomes undefined when a new target is set by a subsequent call to set_render_target.\n\
        \ Default is all non-transient. Be aware that some hardware uses a combined\
        \ depth stencil buffer and when this is the case both are considered non-transient\
        \ if exclusively selected!\n A buffer type defined that doesn't exist in the\
        \ render target is silently ignored.\n\n- `render.BUFFER_COLOR_BIT`\n- `render.BUFFER_DEPTH_BIT`\n\
        - `render.BUFFER_STENCIL_BIT`"
      name: options
      optional: true
      type: table
    type: function
  - desc: sets the render target size
    name: set_render_target_size
    parameters:
    - desc: render target to set size for
      name: render_target
      type: render_target
    - desc: new render target width
      name: width
      type: number
    - desc: new render target height
      name: height
      type: number
    type: function
  - desc: 'Sets the specified render target''s specified buffer to be

      used as texture with the specified unit.

      A material shader can then use the texture to sample from.'
    name: enable_texture
    parameters:
    - desc: texture unit to enable texture for
      name: unit
      type: number
    - desc: render target from which to enable the specified texture unit
      name: render_target
      type: render_target
    - desc: 'buffer type from which to enable the texture


        - `render.BUFFER_COLOR_BIT`

        - `render.BUFFER_DEPTH_BIT`

        - `render.BUFFER_STENCIL_BIT`


        If the render target has been created with multiple color attachments, these
        buffer types can be used

        to enable those textures as well. Currently only 4 color attachments are supported.


        - `render.BUFFER_COLOR0_BIT`

        - `render.BUFFER_COLOR1_BIT`

        - `render.BUFFER_COLOR2_BIT`

        - `render.BUFFER_COLOR3_BIT`'
      name: buffer_type
      type: constant
    type: function
  - desc: Disables a texture unit for a render target that has previourly been enabled.
    name: disable_texture
    parameters:
    - desc: texture unit to disable
      name: unit
      type: number
    type: function
  - desc: Returns the specified buffer width from a render target.
    name: get_render_target_width
    parameters:
    - desc: render target from which to retrieve the buffer width
      name: render_target
      type: render_target
    - desc: 'which type of buffer to retrieve the width from


        - `render.BUFFER_COLOR_BIT`

        - `render.BUFFER_DEPTH_BIT`

        - `render.BUFFER_STENCIL_BIT`'
      name: buffer_type
      type: constant
    returns:
    - desc: the width of the render target buffer texture
      type: number
    type: function
  - desc: Returns the specified buffer height from a render target.
    name: get_render_target_height
    parameters:
    - desc: render target from which to retrieve the buffer height
      name: render_target
      type: render_target
    - desc: 'which type of buffer to retrieve the height from


        - `render.BUFFER_COLOR_BIT`

        - `render.BUFFER_DEPTH_BIT`

        - `render.BUFFER_STENCIL_BIT`'
      name: buffer_type
      type: constant
    returns:
    - desc: the height of the render target buffer texture
      type: number
    type: function
  - desc: ''
    name: BUFFER_COLOR_BIT
    type: number
  - desc: ''
    name: BUFFER_COLOR0_BIT
    type: number
  - desc: ''
    name: BUFFER_COLOR1_BIT
    type: number
  - desc: ''
    name: BUFFER_COLOR2_BIT
    type: number
  - desc: ''
    name: BUFFER_COLOR3_BIT
    type: number
  - desc: ''
    name: BUFFER_DEPTH_BIT
    type: number
  - desc: ''
    name: BUFFER_STENCIL_BIT
    type: number
  - desc: 'Clear buffers in the currently enabled render target with specified value.
      If the render target has been created with multiple

      color attachments, all buffers will be cleared with the same value.'
    name: clear
    parameters:
    - desc: 'table with keys specifying which buffers to clear and values set to clear
        values. Available keys are:


        - `render.BUFFER_COLOR_BIT`

        - `render.BUFFER_DEPTH_BIT`

        - `render.BUFFER_STENCIL_BIT`'
      name: buffers
      type: table
    type: function
  - desc: 'Draws all objects that match a specified predicate. An optional constant
      buffer can be

      provided to override the default constants. If no constants buffer is provided,
      a default

      system constants buffer is used containing constants as defined in materials
      and set through

      [ref:go.set] (or [ref:particlefx.set_constant]) on visual components.'
    name: draw
    parameters:
    - desc: predicate to draw for
      name: predicate
      type: predicate
    - desc: 'optional table with properties:


        `frustum`

        : [type:vmath.matrix4] A frustum matrix used to cull renderable items. (E.g.
        `local frustum = proj * view`). May be nil.


        `constants`

        : [type:constant_buffer] optional constants to use while rendering'
      name: options
      optional: true
      type: table
    type: function
  - desc: Draws all 3d debug graphics such as lines drawn with "draw_line" messages
      and physics visualization.
    name: draw_debug3d
    parameters:
    - desc: 'optional table with properties:


        `frustum`

        : [type:vmath.matrix4] A frustum matrix used to cull renderable items. (E.g.
        `local frustum = proj * view`). May be nil.'
      name: options
      optional: true
      type: table
    type: function
  - desc: Sets the view matrix to use when rendering.
    name: set_view
    parameters:
    - desc: view matrix to set
      name: matrix
      type: matrix4
    type: function
  - desc: Sets the projection matrix to use when rendering.
    name: set_projection
    parameters:
    - desc: projection matrix
      name: matrix
      type: matrix4
    type: function
  - desc: ''
    name: BLEND_ZERO
    type: number
  - desc: ''
    name: BLEND_ONE
    type: number
  - desc: ''
    name: BLEND_SRC_COLOR
    type: number
  - desc: ''
    name: BLEND_ONE_MINUS_SRC_COLOR
    type: number
  - desc: ''
    name: BLEND_DST_COLOR
    type: number
  - desc: ''
    name: BLEND_ONE_MINUS_DST_COLOR
    type: number
  - desc: ''
    name: BLEND_SRC_ALPHA
    type: number
  - desc: ''
    name: BLEND_ONE_MINUS_SRC_ALPHA
    type: number
  - desc: ''
    name: BLEND_DST_ALPHA
    type: number
  - desc: ''
    name: BLEND_ONE_MINUS_DST_ALPHA
    type: number
  - desc: ''
    name: BLEND_SRC_ALPHA_SATURATE
    type: number
  - desc: ''
    name: BLEND_CONSTANT_COLOR
    type: number
  - desc: ''
    name: BLEND_ONE_MINUS_CONSTANT_COLOR
    type: number
  - desc: ''
    name: BLEND_CONSTANT_ALPHA
    type: number
  - desc: ''
    name: BLEND_ONE_MINUS_CONSTANT_ALPHA
    type: number
  - desc: 'Specifies the arithmetic used when computing pixel values that are written
      to the frame

      buffer. In RGBA mode, pixels can be drawn using a function that blends the source
      RGBA

      pixel values with the destination pixel values already in the frame buffer.

      Blending is initially disabled.


      `source_factor` specifies which method is used to scale the source color components.

      `destination_factor` specifies which method is used to scale the destination
      color

      components.


      Source color components are referred to as (R<sub>s</sub>,G<sub>s</sub>,B<sub>s</sub>,A<sub>s</sub>).

      Destination color components are referred to as (R<sub>d</sub>,G<sub>d</sub>,B<sub>d</sub>,A<sub>d</sub>).

      The color specified by setting the blendcolor is referred to as (R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub>,A<sub>c</sub>).


      The source scale factor is referred to as (s<sub>R</sub>,s<sub>G</sub>,s<sub>B</sub>,s<sub>A</sub>).

      The destination scale factor is referred to as (d<sub>R</sub>,d<sub>G</sub>,d<sub>B</sub>,d<sub>A</sub>).


      The color values have integer values between 0 and (k<sub>R</sub>,k<sub>G</sub>,k<sub>B</sub>,k<sub>A</sub>),
      where k<sub>c</sub> = 2<sup>m<sub>c</sub></sup> - 1 and m<sub>c</sub> is the
      number of bitplanes for that color. I.e for 8 bit color depth, color values
      are between `0` and `255`.


      Available factor constants and corresponding scale factors:


      Factor constant                         | Scale factor (f<sub>R</sub>,f<sub>G</sub>,f<sub>B</sub>,f<sub>A</sub>)

      --------------------------------------- | -----------------------

      `render.BLEND_ZERO`                     | (0,0,0,0)

      `render.BLEND_ONE`                      | (1,1,1,1)

      `render.BLEND_SRC_COLOR`                | (R<sub>s</sub>/k<sub>R</sub>,G<sub>s</sub>/k<sub>G</sub>,B<sub>s</sub>/k<sub>B</sub>,A<sub>s</sub>/k<sub>A</sub>)

      `render.BLEND_ONE_MINUS_SRC_COLOR`      | (1,1,1,1) - (R<sub>s</sub>/k<sub>R</sub>,G<sub>s</sub>/k<sub>G</sub>,B<sub>s</sub>/k<sub>B</sub>,A<sub>s</sub>/k<sub>A</sub>)

      `render.BLEND_DST_COLOR`                | (R<sub>d</sub>/k<sub>R</sub>,G<sub>d</sub>/k<sub>G</sub>,B<sub>d</sub>/k<sub>B</sub>,A<sub>d</sub>/k<sub>A</sub>)

      `render.BLEND_ONE_MINUS_DST_COLOR`      | (1,1,1,1) - (R<sub>d</sub>/k<sub>R</sub>,G<sub>d</sub>/k<sub>G</sub>,B<sub>d</sub>/k<sub>B</sub>,A<sub>d</sub>/k<sub>A</sub>)

      `render.BLEND_SRC_ALPHA`                | (A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>)

      `render.BLEND_ONE_MINUS_SRC_ALPHA`      | (1,1,1,1) - (A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>,A<sub>s</sub>/k<sub>A</sub>)

      `render.BLEND_DST_ALPHA`                | (A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>)

      `render.BLEND_ONE_MINUS_DST_ALPHA`      | (1,1,1,1) - (A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>,A<sub>d</sub>/k<sub>A</sub>)

      `render.BLEND_CONSTANT_COLOR`           | (R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub>,A<sub>c</sub>)

      `render.BLEND_ONE_MINUS_CONSTANT_COLOR` | (1,1,1,1) - (R<sub>c</sub>,G<sub>c</sub>,B<sub>c</sub>,A<sub>c</sub>)

      `render.BLEND_CONSTANT_ALPHA`           | (A<sub>c</sub>,A<sub>c</sub>,A<sub>c</sub>,A<sub>c</sub>)

      `render.BLEND_ONE_MINUS_CONSTANT_ALPHA` | (1,1,1,1) - (A<sub>c</sub>,A<sub>c</sub>,A<sub>c</sub>,A<sub>c</sub>)

      `render.BLEND_SRC_ALPHA_SATURATE`       | (i,i,i,1) where i = min(A<sub>s</sub>,
      k<sub>A</sub> - A<sub>d</sub>) /k<sub>A</sub>


      The blended RGBA values of a pixel comes from the following equations:


      - R<sub>d</sub> = min(k<sub>R</sub>, R<sub>s</sub> * s<sub>R</sub> + R<sub>d</sub>
      * d<sub>R</sub>)

      - G<sub>d</sub> = min(k<sub>G</sub>, G<sub>s</sub> * s<sub>G</sub> + G<sub>d</sub>
      * d<sub>G</sub>)

      - B<sub>d</sub> = min(k<sub>B</sub>, B<sub>s</sub> * s<sub>B</sub> + B<sub>d</sub>
      * d<sub>B</sub>)

      - A<sub>d</sub> = min(k<sub>A</sub>, A<sub>s</sub> * s<sub>A</sub> + A<sub>d</sub>
      * d<sub>A</sub>)


      Blend function `(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)`
      is useful for

      drawing with transparency when the drawn objects are sorted from farthest to
      nearest.

      It is also useful for drawing antialiased points and lines in arbitrary order.'
    name: set_blend_func
    parameters:
    - desc: source factor
      name: source_factor
      type: constant
    - desc: destination factor
      name: destination_factor
      type: constant
    type: function
  - desc: 'Specifies whether the individual color components in the frame buffer is
      enabled for writing (`true`) or disabled (`false`). For example, if `blue` is
      `false`, nothing is written to the blue component of any pixel in any of the
      color buffers, regardless of the drawing operation attempted. Note that writing
      are either enabled or disabled for entire color components, not the individual
      bits of a component.


      The component masks are all initially `true`.'
    name: set_color_mask
    parameters:
    - desc: red mask
      name: red
      type: boolean
    - desc: green mask
      name: green
      type: boolean
    - desc: blue mask
      name: blue
      type: boolean
    - desc: alpha mask
      name: alpha
      type: boolean
    type: function
  - desc: 'Specifies whether the depth buffer is enabled for writing. The supplied
      mask governs

      if depth buffer writing is enabled (`true`) or disabled (`false`).


      The mask is initially `true`.'
    name: set_depth_mask
    parameters:
    - desc: depth mask
      name: depth
      type: boolean
    type: function
  - desc: 'The stencil mask controls the writing of individual bits in the stencil
      buffer.

      The least significant `n` bits of the parameter `mask`, where `n` is the number
      of

      bits in the stencil buffer, specify the mask.


      Where a `1` bit appears in the mask, the corresponding

      bit in the stencil buffer can be written. Where a `0` bit appears in the mask,

      the corresponding bit in the stencil buffer is never written.


      The mask is initially all `1`''s.'
    name: set_stencil_mask
    parameters:
    - desc: stencil mask
      name: mask
      type: number
    type: function
  - desc: ''
    name: COMPARE_FUNC_NEVER
    type: number
  - desc: ''
    name: COMPARE_FUNC_LESS
    type: number
  - desc: ''
    name: COMPARE_FUNC_LEQUAL
    type: number
  - desc: ''
    name: COMPARE_FUNC_GREATER
    type: number
  - desc: ''
    name: COMPARE_FUNC_GEQUAL
    type: number
  - desc: ''
    name: COMPARE_FUNC_EQUAL
    type: number
  - desc: ''
    name: COMPARE_FUNC_NOTEQUAL
    type: number
  - desc: ''
    name: COMPARE_FUNC_ALWAYS
    type: number
  - desc: 'Specifies the function that should be used to compare each incoming pixel

      depth value with the value present in the depth buffer.

      The comparison is performed only if depth testing is enabled and specifies

      the conditions under which a pixel will be drawn.


      Function constants:


      - `render.COMPARE_FUNC_NEVER` (never passes)

      - `render.COMPARE_FUNC_LESS` (passes if the incoming depth value is less than
      the stored value)

      - `render.COMPARE_FUNC_LEQUAL` (passes if the incoming depth value is less than
      or equal to the stored value)

      - `render.COMPARE_FUNC_GREATER` (passes if the incoming depth value is greater
      than the stored value)

      - `render.COMPARE_FUNC_GEQUAL` (passes if the incoming depth value is greater
      than or equal to the stored value)

      - `render.COMPARE_FUNC_EQUAL` (passes if the incoming depth value is equal to
      the stored value)

      - `render.COMPARE_FUNC_NOTEQUAL` (passes if the incoming depth value is not
      equal to the stored value)

      - `render.COMPARE_FUNC_ALWAYS` (always passes)


      The depth function is initially set to `render.COMPARE_FUNC_LESS`.'
    name: set_depth_func
    parameters:
    - desc: depth test function, see the description for available values
      name: func
      type: constant
    type: function
  - desc: 'Stenciling is similar to depth-buffering as it enables and disables drawing
      on a

      per-pixel basis. First, GL drawing primitives are drawn into the stencil planes.

      Second, geometry and images are rendered but using the stencil planes to mask
      out

      where to draw.


      The stencil test discards a pixel based on the outcome of a comparison between
      the

      reference value `ref` and the corresponding value in the stencil buffer.


      `func` specifies the comparison function. See the table below for values.

      The initial value is `render.COMPARE_FUNC_ALWAYS`.


      `ref` specifies the reference value for the stencil test. The value is clamped
      to

      the range [0, 2<sup>n</sup>-1], where n is the number of bitplanes in the stencil
      buffer.

      The initial value is `0`.


      `mask` is ANDed with both the reference value and the stored stencil value when
      the test

      is done. The initial value is all `1`''s.


      Function constant:


      - `render.COMPARE_FUNC_NEVER` (never passes)

      - `render.COMPARE_FUNC_LESS` (passes if (ref & mask) < (stencil & mask))

      - `render.COMPARE_FUNC_LEQUAL` (passes if (ref & mask) <= (stencil & mask))

      - `render.COMPARE_FUNC_GREATER` (passes if (ref & mask) > (stencil & mask))

      - `render.COMPARE_FUNC_GEQUAL` (passes if (ref & mask) >= (stencil & mask))

      - `render.COMPARE_FUNC_EQUAL` (passes if (ref & mask) = (stencil & mask))

      - `render.COMPARE_FUNC_NOTEQUAL` (passes if (ref & mask) != (stencil & mask))

      - `render.COMPARE_FUNC_ALWAYS` (always passes)'
    name: set_stencil_func
    parameters:
    - desc: stencil test function, see the description for available values
      name: func
      type: constant
    - desc: reference value for the stencil test
      name: ref
      type: number
    - desc: mask that is ANDed with both the reference value and the stored stencil
        value when the test is done
      name: mask
      type: number
    type: function
  - desc: ''
    name: STENCIL_OP_KEEP
    type: number
  - desc: ''
    name: STENCIL_OP_ZERO
    type: number
  - desc: ''
    name: STENCIL_OP_REPLACE
    type: number
  - desc: ''
    name: STENCIL_OP_INCR
    type: number
  - desc: ''
    name: STENCIL_OP_INCR_WRAP
    type: number
  - desc: ''
    name: STENCIL_OP_DECR
    type: number
  - desc: ''
    name: STENCIL_OP_DECR_WRAP
    type: number
  - desc: ''
    name: STENCIL_OP_INVERT
    type: number
  - desc: 'The stencil test discards a pixel based on the outcome of a comparison
      between the

      reference value `ref` and the corresponding value in the stencil buffer.

      To control the test, call [ref:render.set_stencil_func].


      This function takes three arguments that control what happens to the stored
      stencil

      value while stenciling is enabled. If the stencil test fails, no change is made
      to the

      pixel''s color or depth buffers, and `sfail` specifies what happens to the stencil
      buffer

      contents.


      Operator constants:


      - `render.STENCIL_OP_KEEP` (keeps the current value)

      - `render.STENCIL_OP_ZERO` (sets the stencil buffer value to 0)

      - `render.STENCIL_OP_REPLACE` (sets the stencil buffer value to `ref`, as specified
      by [ref:render.set_stencil_func])

      - `render.STENCIL_OP_INCR` (increments the stencil buffer value and clamp to
      the maximum representable unsigned value)

      - `render.STENCIL_OP_INCR_WRAP` (increments the stencil buffer value and wrap
      to zero when incrementing the maximum representable unsigned value)

      - `render.STENCIL_OP_DECR` (decrements the current stencil buffer value and
      clamp to 0)

      - `render.STENCIL_OP_DECR_WRAP` (decrements the current stencil buffer value
      and wrap to the maximum representable unsigned value when decrementing zero)

      - `render.STENCIL_OP_INVERT` (bitwise inverts the current stencil buffer value)


      `dppass` and `dpfail` specify the stencil buffer actions depending on whether
      subsequent

      depth buffer tests succeed (dppass) or fail (dpfail).


      The initial value for all operators is `render.STENCIL_OP_KEEP`.'
    name: set_stencil_op
    parameters:
    - desc: action to take when the stencil test fails
      name: sfail
      type: constant
    - desc: the stencil action when the stencil test passes
      name: dpfail
      type: constant
    - desc: the stencil action when both the stencil test and the depth test pass,
        or when the stencil test passes and either there is no depth buffer or depth
        testing is not enabled
      name: dppass
      type: constant
    type: function
  - desc: ''
    name: FACE_FRONT
    type: number
  - desc: ''
    name: FACE_BACK
    type: number
  - desc: ''
    name: FACE_FRONT_AND_BACK
    type: number
  - desc: 'Specifies whether front- or back-facing polygons can be culled

      when polygon culling is enabled. Polygon culling is initially disabled.


      If mode is `render.FACE_FRONT_AND_BACK`, no polygons are drawn, but other

      primitives such as points and lines are drawn. The initial value for

      `face_type` is `render.FACE_BACK`.'
    name: set_cull_face
    parameters:
    - desc: 'face type


        - `render.FACE_FRONT`

        - `render.FACE_BACK`

        - `render.FACE_FRONT_AND_BACK`'
      name: face_type
      type: constant
    type: function
  - desc: 'Sets the scale and units used to calculate depth values.

      If `render.STATE_POLYGON_OFFSET_FILL` is enabled, each fragment''s depth value

      is offset from its interpolated value (depending on the depth value of the

      appropriate vertices). Polygon offset can be used when drawing decals, rendering

      hidden-line images etc.


      `factor` specifies a scale factor that is used to create a variable depth

      offset for each polygon. The initial value is `0`.


      `units` is multiplied by an implementation-specific value to create a

      constant depth offset. The initial value is `0`.


      The value of the offset is computed as `factor` &times; `DZ` + `r` &times; `units`


      `DZ` is a measurement of the depth slope of the polygon which is the change
      in z (depth)

      values divided by the change in either x or y coordinates, as you traverse a
      polygon.

      The depth values are in window coordinates, clamped to the range [0, 1].


      `r` is the smallest value that is guaranteed to produce a resolvable difference.

      It''s value is an implementation-specific constant.


      The offset is added before the depth test is performed and before the

      value is written into the depth buffer.'
    name: set_polygon_offset
    parameters:
    - desc: polygon offset factor
      name: factor
      type: number
    - desc: polygon offset units
      name: units
      type: number
    type: function
  - desc: 'Returns the logical window width that is set in the "game.project" settings.

      Note that the actual window pixel size can change, either by device constraints

      or user input.'
    name: get_width
    parameters: []
    returns:
    - desc: specified window width (number)
      type: number
    type: function
  - desc: 'Returns the logical window height that is set in the "game.project" settings.

      Note that the actual window pixel size can change, either by device constraints

      or user input.'
    name: get_height
    parameters: []
    returns:
    - desc: specified window height
      type: number
    type: function
  - desc: 'Returns the actual physical window width.

      Note that this value might differ from the logical width that is set in the

      "game.project" settings.'
    name: get_window_width
    parameters: []
    returns:
    - desc: actual window width
      type: number
    type: function
  - desc: 'Returns the actual physical window height.

      Note that this value might differ from the logical height that is set in the

      "game.project" settings.'
    name: get_window_height
    parameters: []
    returns:
    - desc: actual window height
      type: number
    type: function
  - desc: 'This function returns a new render predicate for objects with materials
      matching

      the provided material tags. The provided tags are combined into a bit mask

      for the predicate. If multiple tags are provided, the predicate matches materials

      with all tags ANDed together.


      The current limit to the number of tags that can be defined is `64`.'
    name: predicate
    parameters:
    - desc: table of tags that the predicate should match. The tags can be of either
        hash or string type
      name: tags
      type: table
    returns:
    - desc: new predicate
      type: predicate
    type: function
  - desc: 'If another material was already enabled, it will be automatically disabled

      and the specified material is used instead.


      The name of the material must be specified in the ".render" resource set

      in the "game.project" setting.'
    name: enable_material
    parameters:
    - desc: material id to enable
      name: material_id
      type:
      - string
      - hash
    type: function
  - desc: 'If a material is currently enabled, disable it.


      The name of the material must be specified in the ".render" resource set

      in the "game.project" setting.'
    name: disable_material
    parameters: []
    type: function
  name: render
  type: table
