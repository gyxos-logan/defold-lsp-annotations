- desc: "Functions for mathematical operations on vectors, matrices and quaternions.\n\
    \n- The vector types (`vmath.vector3` and `vmath.vector4`) supports addition and\
    \ subtraction\n  with vectors of the same type. Vectors can be negated and multiplied\
    \ (scaled) or divided by numbers.\n- The quaternion type (`vmath.quat`) supports\
    \ multiplication with other quaternions.\n- The matrix type (`vmath.matrix4`)\
    \ can be multiplied with numbers, other matrices\n  and `vmath.vector4` values.\n\
    - All types performs equality comparison by each component value.\n\nThe following\
    \ components are available for the various types:\n\nvector3\n: `x`, `y` and `z`.\
    \ Example: `v.y`\n\nvector4\n: `x`, `y`, `z`, and `w`. Example: `v.w`\n\nquaternion\n\
    : `x`, `y`, `z`, and `w`. Example: `q.w`\n\nmatrix4\n: `m00` to `m33` where the\
    \ first number is the row (starting from 0) and the second\nnumber is the column.\
    \ Columns can be accessed with `c0` to `c3`, returning a `vector4`.\nExample:\
    \ `m.m21` which is equal to `m.c1.z`\n\nvector\n: indexed by number 1 to the vector\
    \ length. Example: `v[3]`"
  members:
  - desc: 'Creates a vector of arbitrary size. The vector is initialized

      with numeric values from a table.


      [icon:attention] The table values are converted to floating point

      values. If a value cannot be converted, a 0 is stored in that

      value position in the vector.'
    name: vector
    parameters:
    - desc: table of numbers
      name: t
      type: table
    returns:
    - desc: new vector
      type: vector
    type: function
  - desc: Creates a new zero vector with all components set to 0.
    name: vector3
    parameters: []
    returns:
    - desc: new zero vector
      type: vector3
    type: function
  - desc: 'Creates a new vector with all components set to the

      supplied scalar value.'
    name: vector3
    parameters:
    - desc: scalar value to splat
      name: n
      type: number
    returns:
    - desc: new vector
      type: vector3
    type: function
  - desc: 'Creates a new vector with all components set to the

      corresponding values from the supplied vector. I.e.

      This function creates a copy of the given vector.'
    name: vector3
    parameters:
    - desc: existing vector
      name: v1
      type: vector3
    returns:
    - desc: new vector
      type: vector3
    type: function
  - desc: 'Creates a new vector with the components set to the

      supplied values.'
    name: vector3
    parameters:
    - desc: x coordinate
      name: x
      type: number
    - desc: y coordinate
      name: y
      type: number
    - desc: z coordinate
      name: z
      type: number
    returns:
    - desc: new vector
      type: vector3
    type: function
  - desc: Creates a new zero vector with all components set to 0.
    name: vector4
    parameters: []
    returns:
    - desc: new zero vector
      type: vector4
    type: function
  - desc: 'Creates a new vector with all components set to the

      supplied scalar value.'
    name: vector4
    parameters:
    - desc: scalar value to splat
      name: n
      type: number
    returns:
    - desc: new vector
      type: vector4
    type: function
  - desc: 'Creates a new vector with all components set to the

      corresponding values from the supplied vector. I.e.

      This function creates a copy of the given vector.'
    name: vector4
    parameters:
    - desc: existing vector
      name: v1
      type: vector4
    returns:
    - desc: new vector
      type: vector4
    type: function
  - desc: 'Creates a new vector with the components set to the

      supplied values.'
    name: vector4
    parameters:
    - desc: x coordinate
      name: x
      type: number
    - desc: y coordinate
      name: y
      type: number
    - desc: z coordinate
      name: z
      type: number
    - desc: w coordinate
      name: w
      type: number
    returns:
    - desc: new vector
      type: vector4
    type: function
  - desc: 'Creates a new identity quaternion. The identity

      quaternion is equal to:


      `vmath.quat(0, 0, 0, 1)`'
    name: quat
    parameters: []
    returns:
    - desc: new identity quaternion
      type: quaternion
    type: function
  - desc: 'Creates a new quaternion with all components set to the

      corresponding values from the supplied quaternion. I.e.

      This function creates a copy of the given quaternion.'
    name: quat
    parameters:
    - desc: existing quaternion
      name: q1
      type: quaternion
    returns:
    - desc: new quaternion
      type: quaternion
    type: function
  - desc: 'Creates a new quaternion with the components set

      according to the supplied parameter values.'
    name: quat
    parameters:
    - desc: x coordinate
      name: x
      type: number
    - desc: y coordinate
      name: y
      type: number
    - desc: z coordinate
      name: z
      type: number
    - desc: w coordinate
      name: w
      type: number
    returns:
    - desc: new quaternion
      type: quaternion
    type: function
  - desc: 'The resulting quaternion describes the rotation that,

      if applied to the first vector, would rotate the first

      vector to the second. The two vectors must be unit

      vectors (of length 1).


      [icon:attention] The result is undefined if the two vectors point in opposite
      directions'
    name: quat_from_to
    parameters:
    - desc: first unit vector, before rotation
      name: v1
      type: vector3
    - desc: second unit vector, after rotation
      name: v2
      type: vector3
    returns:
    - desc: quaternion representing the rotation from first to second vector
      type: quaternion
    type: function
  - desc: 'The resulting quaternion describes a rotation of `angle`

      radians around the axis described by the unit vector `v`.'
    name: quat_axis_angle
    parameters:
    - desc: axis
      name: v
      type: vector3
    - desc: angle
      name: angle
      type: number
    returns:
    - desc: quaternion representing the axis-angle rotation
      type: quaternion
    type: function
  - desc: 'The resulting quaternion describes the rotation from the

      identity quaternion (no rotation) to the coordinate system

      as described by the given x, y and z base unit vectors.'
    name: quat_basis
    parameters:
    - desc: x base vector
      name: x
      type: vector3
    - desc: y base vector
      name: y
      type: vector3
    - desc: z base vector
      name: z
      type: vector3
    returns:
    - desc: quaternion representing the rotation of the specified base vectors
      type: quaternion
    type: function
  - desc: 'The resulting quaternion describes a rotation of `angle`

      radians around the x-axis.'
    name: quat_rotation_x
    parameters:
    - desc: angle in radians around x-axis
      name: angle
      type: number
    returns:
    - desc: quaternion representing the rotation around the x-axis
      type: quaternion
    type: function
  - desc: 'The resulting quaternion describes a rotation of `angle`

      radians around the y-axis.'
    name: quat_rotation_y
    parameters:
    - desc: angle in radians around y-axis
      name: angle
      type: number
    returns:
    - desc: quaternion representing the rotation around the y-axis
      type: quaternion
    type: function
  - desc: 'The resulting quaternion describes a rotation of `angle`

      radians around the z-axis.'
    name: quat_rotation_z
    parameters:
    - desc: angle in radians around z-axis
      name: angle
      type: number
    returns:
    - desc: quaternion representing the rotation around the z-axis
      type: quaternion
    type: function
  - desc: 'The resulting identity matrix describes a transform with

      no translation or rotation.'
    name: matrix4
    parameters: []
    returns:
    - desc: identity matrix
      type: matrix4
    type: function
  - desc: 'Creates a new matrix with all components set to the

      corresponding values from the supplied matrix. I.e.

      the function creates a copy of the given matrix.'
    name: matrix4
    parameters:
    - desc: existing matrix
      name: m1
      type: matrix4
    returns:
    - desc: matrix which is a copy of the specified matrix
      type: matrix4
    type: function
  - desc: 'Constructs a frustum matrix from the given values. The left, right,

      top and bottom coordinates of the view cone are expressed as distances

      from the center of the near clipping plane. The near and far coordinates

      are expressed as distances from the tip of the view frustum cone.'
    name: matrix4_frustum
    parameters:
    - desc: coordinate for left clipping plane
      name: left
      type: number
    - desc: coordinate for right clipping plane
      name: right
      type: number
    - desc: coordinate for bottom clipping plane
      name: bottom
      type: number
    - desc: coordinate for top clipping plane
      name: top
      type: number
    - desc: coordinate for near clipping plane
      name: near
      type: number
    - desc: coordinate for far clipping plane
      name: far
      type: number
    returns:
    - desc: matrix representing the frustum
      type: matrix4
    type: function
  - desc: 'The resulting matrix is created from the supplied look-at parameters.

      This is useful for constructing a view matrix for a camera or

      rendering in general.'
    name: matrix4_look_at
    parameters:
    - desc: eye position
      name: eye
      type: vector3
    - desc: look-at position
      name: look_at
      type: vector3
    - desc: up vector
      name: up
      type: vector3
    returns:
    - desc: look-at matrix
      type: matrix4
    type: function
  - desc: 'Creates an orthographic projection matrix.

      This is useful to construct a projection matrix for a camera or rendering in
      general.'
    name: matrix4_orthographic
    parameters:
    - desc: coordinate for left clipping plane
      name: left
      type: number
    - desc: coordinate for right clipping plane
      name: right
      type: number
    - desc: coordinate for bottom clipping plane
      name: bottom
      type: number
    - desc: coordinate for top clipping plane
      name: top
      type: number
    - desc: coordinate for near clipping plane
      name: near
      type: number
    - desc: coordinate for far clipping plane
      name: far
      type: number
    returns:
    - desc: orthographic projection matrix
      type: matrix4
    type: function
  - desc: 'Creates a perspective projection matrix.

      This is useful to construct a projection matrix for a camera or rendering in
      general.'
    name: matrix4_perspective
    parameters:
    - desc: angle of the full vertical field of view in radians
      name: fov
      type: number
    - desc: aspect ratio
      name: aspect
      type: number
    - desc: coordinate for near clipping plane
      name: near
      type: number
    - desc: coordinate for far clipping plane
      name: far
      type: number
    returns:
    - desc: perspective projection matrix
      type: matrix4
    type: function
  - desc: The resulting matrix describes the same rotation as the quaternion, but
      does not have any translation (also like the quaternion).
    name: matrix4_from_quat
    parameters:
    - desc: quaternion to create matrix from
      name: q
      type: quaternion
    returns:
    - desc: matrix represented by quaternion
      type: matrix4
    type: function
  - desc: The resulting matrix describes a rotation around the axis by the specified
      angle.
    name: matrix4_axis_angle
    parameters:
    - desc: axis
      name: v
      type: vector3
    - desc: angle in radians
      name: angle
      type: number
    returns:
    - desc: matrix represented by axis and angle
      type: matrix4
    type: function
  - desc: 'The resulting matrix describes a rotation around the x-axis

      by the specified angle.'
    name: matrix4_rotation_x
    parameters:
    - desc: angle in radians around x-axis
      name: angle
      type: number
    returns:
    - desc: matrix from rotation around x-axis
      type: matrix4
    type: function
  - desc: 'The resulting matrix describes a rotation around the y-axis

      by the specified angle.'
    name: matrix4_rotation_y
    parameters:
    - desc: angle in radians around y-axis
      name: angle
      type: number
    returns:
    - desc: matrix from rotation around y-axis
      type: matrix4
    type: function
  - desc: 'The resulting matrix describes a rotation around the z-axis

      by the specified angle.'
    name: matrix4_rotation_z
    parameters:
    - desc: angle in radians around z-axis
      name: angle
      type: number
    returns:
    - desc: matrix from rotation around z-axis
      type: matrix4
    type: function
  - desc: 'The resulting matrix describes a translation of a point

      in euclidean space.'
    name: matrix4_translation
    parameters:
    - desc: position vector to create matrix from
      name: position
      type:
      - vector3
      - vector4
    returns:
    - desc: matrix from the supplied position vector
      type: matrix4
    type: function
  - desc: 'The resulting matrix is the inverse of the supplied matrix.


      [icon:attention] For ortho-normal matrices, e.g. regular object transformation,

      use `vmath.ortho_inv()` instead.

      The specialized inverse for ortho-normalized matrices is much faster

      than the general inverse.'
    name: inv
    parameters:
    - desc: matrix to invert
      name: m1
      type: matrix4
    returns:
    - desc: inverse of the supplied matrix
      type: matrix4
    type: function
  - desc: 'The resulting matrix is the inverse of the supplied matrix.

      The supplied matrix has to be an ortho-normal matrix, e.g.

      describe a regular object transformation.


      [icon:attention] For matrices that are not ortho-normal

      use the general inverse `vmath.inv()` instead.'
    name: ortho_inv
    parameters:
    - desc: ortho-normalized matrix to invert
      name: m1
      type: matrix4
    returns:
    - desc: inverse of the supplied matrix
      type: matrix4
    type: function
  - desc: 'The returned value is a scalar defined as:


      <code>P &#x22C5; Q = |P| |Q| cos &#x03B8;</code>


      where &#x03B8; is the angle between the vectors P and Q.


      - If the dot product is positive then the angle between the vectors is below
      90 degrees.

      - If the dot product is zero the vectors are perpendicular (at right-angles
      to each other).

      - If the dot product is negative then the angle between the vectors is more
      than 90 degrees.'
    name: dot
    parameters:
    - desc: first vector
      name: v1
      type:
      - vector3
      - vector4
    - desc: second vector
      name: v2
      type:
      - vector3
      - vector4
    returns:
    - desc: dot product
      type: number
    type: function
  - desc: Returns the squared length of the supplied vector or quaternion.
    name: length_sqr
    parameters:
    - desc: value of which to calculate the squared length
      name: v
      type:
      - vector3
      - vector4
      - quat
    returns:
    - desc: squared length
      type: number
    type: function
  - desc: 'Returns the length of the supplied vector or quaternion.


      If you are comparing the lengths of vectors or quaternions, you should compare

      the length squared instead as it is slightly more efficient to calculate

      (it eliminates a square root calculation).'
    name: length
    parameters:
    - desc: value of which to calculate the length
      name: v
      type:
      - vector3
      - vector4
      - quat
    returns:
    - desc: length
      type: number
    type: function
  - desc: 'Normalizes a vector, i.e. returns a new vector with the same

      direction as the input vector, but with length 1.


      [icon:attention] The length of the vector must be above 0, otherwise a

      division-by-zero will occur.'
    name: normalize
    parameters:
    - desc: vector to normalize
      name: v1
      type:
      - vector3
      - vector4
      - quat
    returns:
    - desc: new normalized vector
      type:
      - vector3
      - vector4
      - quat
    type: function
  - desc: 'Given two linearly independent vectors P and Q, the cross product,

      P &#x00D7; Q, is a vector that is perpendicular to both P and Q and

      therefore normal to the plane containing them.


      If the two vectors have the same direction (or have the exact

      opposite direction from one another, i.e. are not linearly independent)

      or if either one has zero length, then their cross product is zero.'
    name: cross
    parameters:
    - desc: first vector
      name: v1
      type: vector3
    - desc: second vector
      name: v2
      type: vector3
    returns:
    - desc: a new vector representing the cross product
      type: vector3
    type: function
  - desc: 'Linearly interpolate between two vectors. The function

      treats the vectors as positions and interpolates between

      the positions in a straight line. Lerp is useful to describe

      transitions from one place to another over time.


      [icon:attention] The function does not clamp t between 0 and 1.'
    name: lerp
    parameters:
    - desc: interpolation parameter, 0-1
      name: t
      type: number
    - desc: vector to lerp from
      name: v1
      type:
      - vector3
      - vector4
    - desc: vector to lerp to
      name: v2
      type:
      - vector3
      - vector4
    returns:
    - desc: the lerped vector
      type:
      - vector3
      - vector4
    type: function
  - desc: 'Linearly interpolate between two quaternions. Linear

      interpolation of rotations are only useful for small

      rotations. For interpolations of arbitrary rotations,

      [ref:vmath.slerp] yields much better results.


      [icon:attention] The function does not clamp t between 0 and 1.'
    name: lerp
    parameters:
    - desc: interpolation parameter, 0-1
      name: t
      type: number
    - desc: quaternion to lerp from
      name: q1
      type: quaternion
    - desc: quaternion to lerp to
      name: q2
      type: quaternion
    returns:
    - desc: the lerped quaternion
      type: quaternion
    type: function
  - desc: 'Linearly interpolate between two values. Lerp is useful

      to describe transitions from one value to another over time.


      [icon:attention] The function does not clamp t between 0 and 1.'
    name: lerp
    parameters:
    - desc: interpolation parameter, 0-1
      name: t
      type: number
    - desc: number to lerp from
      name: n1
      type: number
    - desc: number to lerp to
      name: n2
      type: number
    returns:
    - desc: the lerped number
      type: number
    type: function
  - desc: 'Spherically interpolates between two vectors. The difference to

      lerp is that slerp treats the vectors as directions instead of

      positions in space.


      The direction of the returned vector is interpolated by the angle

      and the magnitude is interpolated between the magnitudes of the

      from and to vectors.


      [icon:attention] Slerp is computationally more expensive than lerp.

      The function does not clamp t between 0 and 1.'
    name: slerp
    parameters:
    - desc: interpolation parameter, 0-1
      name: t
      type: number
    - desc: vector to slerp from
      name: v1
      type:
      - vector3
      - vector4
    - desc: vector to slerp to
      name: v2
      type:
      - vector3
      - vector4
    returns:
    - desc: the slerped vector
      type:
      - vector3
      - vector4
    type: function
  - desc: 'Slerp travels the torque-minimal path maintaining constant

      velocity, which means it travels along the straightest path along

      the rounded surface of a sphere. Slerp is useful for interpolation

      of rotations.


      Slerp travels the torque-minimal path, which means it travels

      along the straightest path the rounded surface of a sphere.


      [icon:attention] The function does not clamp t between 0 and 1.'
    name: slerp
    parameters:
    - desc: interpolation parameter, 0-1
      name: t
      type: number
    - desc: quaternion to slerp from
      name: q1
      type: quaternion
    - desc: quaternion to slerp to
      name: q2
      type: quaternion
    returns:
    - desc: the slerped quaternion
      type: quaternion
    type: function
  - desc: 'Calculates the conjugate of a quaternion. The result is a

      quaternion with the same magnitudes but with the sign of

      the imaginary (vector) parts changed:


      <code>q<super>*</super> = [w, -v]</code>'
    name: conj
    parameters:
    - desc: quaternion of which to calculate the conjugate
      name: q1
      type: quaternion
    returns:
    - desc: the conjugate
      type: quaternion
    type: function
  - desc: 'Returns a new vector from the supplied vector that is

      rotated by the rotation described by the supplied

      quaternion.'
    name: rotate
    parameters:
    - desc: quaternion
      name: q
      type: quaternion
    - desc: vector to rotate
      name: v1
      type: vector3
    returns:
    - desc: the rotated vector
      type: vector3
    type: function
  - desc: 'Calculates the extent the projection of the first vector onto the second.

      The returned value is a scalar p defined as:


      <code>p = |P| cos &#x03B8; / |Q|</code>


      where &#x03B8; is the angle between the vectors P and Q.'
    name: project
    parameters:
    - desc: vector to be projected on the second
      name: v1
      type: vector3
    - desc: vector onto which the first will be projected, must not have zero length
      name: v2
      type: vector3
    returns:
    - desc: the projected extent of the first vector onto the second
      type: number
    type: function
  - desc: 'Performs an element wise multiplication between two vectors of the same
      type

      The returned value is a vector defined as (e.g. for a vector3):


      <code>v = vmath.mul_per_elem(a, b) = vmath.vector3(a.x * b.x, a.y * b.y, a.z
      * b.z)</code>'
    name: mul_per_elem
    parameters:
    - desc: first vector
      name: v1
      type:
      - vector3
      - vector4
    - desc: second vector
      name: v2
      type:
      - vector3
      - vector4
    returns:
    - desc: multiplied vector
      type:
      - vector3
      - vector4
    type: function
  name: vmath
  type: table
