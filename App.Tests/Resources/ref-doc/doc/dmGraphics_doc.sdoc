elements {
  type: TYPEDEF
  name: "HContext"
  brief: "Context handle"
  description: "Context handle"
}
elements {
  type: TYPEDEF
  name: "HTexture"
  brief: "Texture handle"
  description: "Texture handle"
}
elements {
  type: TYPEDEF
  name: "HVertexProgram"
  brief: "Vertex program handle"
  description: "Vertex program handle"
}
elements {
  type: TYPEDEF
  name: "HFragmentProgram"
  brief: "Fragment program handle"
  description: "Fragment program handle"
}
elements {
  type: TYPEDEF
  name: "HProgram"
  brief: "Program handle"
  description: "Program handle"
}
elements {
  type: TYPEDEF
  name: "HVertexBuffer"
  brief: "Vertex buffer handle"
  description: "Vertex buffer handle"
}
elements {
  type: TYPEDEF
  name: "HIndexBuffer"
  brief: "Index buffer handle"
  description: "Index buffer handle"
}
elements {
  type: TYPEDEF
  name: "HVertexDeclaration"
  brief: "Vertex declaration handle"
  description: "Vertex declaration handle"
}
elements {
  type: ENUM
  name: "HandleResult"
  brief: ""
  description: ""
  members {
    name: "HANDLE_RESULT_OK"
    doc: ""
    type: ""
  }
  members {
    name: "HANDLE_RESULT_NOT_AVAILABLE"
    doc: ""
    type: ""
  }
  members {
    name: "HANDLE_RESULT_ERROR"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "RenderTargetAttachment"
  brief: ""
  description: ""
  members {
    name: "ATTACHMENT_COLOR"
    doc: ""
    type: ""
  }
  members {
    name: "ATTACHMENT_DEPTH"
    doc: ""
    type: ""
  }
  members {
    name: "ATTACHMENT_STENCIL"
    doc: ""
    type: ""
  }
  members {
    name: "MAX_ATTACHMENT_COUNT"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "TextureFormat"
  brief: ""
  description: ""
  members {
    name: "TEXTURE_FORMAT_LUMINANCE"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_LUMINANCE_ALPHA"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGB"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGB_16BPP"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA_16BPP"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_DEPTH"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_STENCIL"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGB_PVRTC_2BPPV1"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGB_PVRTC_4BPPV1"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGB_ETC1"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_R_ETC2"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RG_ETC2"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA_ETC2"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA_ASTC_4x4"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGB_BC1"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA_BC3"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_R_BC4"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RG_BC5"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA_BC7"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGB16F"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGB32F"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA16F"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RGBA32F"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_R16F"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RG16F"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_R32F"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_RG32F"
    doc: ""
    type: ""
  }
  members {
    name: "TEXTURE_FORMAT_COUNT"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "CompareFunc"
  brief: ""
  description: ""
  members {
    name: "COMPARE_FUNC_NEVER"
    doc: ""
    type: ""
  }
  members {
    name: "COMPARE_FUNC_LESS"
    doc: ""
    type: ""
  }
  members {
    name: "COMPARE_FUNC_LEQUAL"
    doc: ""
    type: ""
  }
  members {
    name: "COMPARE_FUNC_GREATER"
    doc: ""
    type: ""
  }
  members {
    name: "COMPARE_FUNC_GEQUAL"
    doc: ""
    type: ""
  }
  members {
    name: "COMPARE_FUNC_EQUAL"
    doc: ""
    type: ""
  }
  members {
    name: "COMPARE_FUNC_NOTEQUAL"
    doc: ""
    type: ""
  }
  members {
    name: "COMPARE_FUNC_ALWAYS"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "FaceWinding"
  brief: ""
  description: ""
  members {
    name: "FACE_WINDING_CCW"
    doc: ""
    type: ""
  }
  members {
    name: "FACE_WINDING_CW"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "StencilOp"
  brief: ""
  description: ""
  members {
    name: "STENCIL_OP_KEEP"
    doc: ""
    type: ""
  }
  members {
    name: "STENCIL_OP_ZERO"
    doc: ""
    type: ""
  }
  members {
    name: "STENCIL_OP_REPLACE"
    doc: ""
    type: ""
  }
  members {
    name: "STENCIL_OP_INCR"
    doc: ""
    type: ""
  }
  members {
    name: "STENCIL_OP_INCR_WRAP"
    doc: ""
    type: ""
  }
  members {
    name: "STENCIL_OP_DECR"
    doc: ""
    type: ""
  }
  members {
    name: "STENCIL_OP_DECR_WRAP"
    doc: ""
    type: ""
  }
  members {
    name: "STENCIL_OP_INVERT"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "BufferUsage"
  brief: ""
  description: ""
  members {
    name: "BUFFER_USAGE_STREAM_DRAW"
    doc: ""
    type: ""
  }
  members {
    name: "BUFFER_USAGE_DYNAMIC_DRAW"
    doc: ""
    type: ""
  }
  members {
    name: "BUFFER_USAGE_STATIC_DRAW"
    doc: "<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">Preferred</span> <span class=\"k\">for</span> <span class=\"nv\">buffers</span> <span class=\"nv\">that</span> <span class=\"nv\">never</span> <span class=\"nv\">change</span>\n</code></pre></div>"
    type: ""
  }
}
elements {
  type: ENUM
  name: "BufferAccess"
  brief: ""
  description: ""
  members {
    name: "BUFFER_ACCESS_READ_ONLY"
    doc: ""
    type: ""
  }
  members {
    name: "BUFFER_ACCESS_WRITE_ONLY"
    doc: ""
    type: ""
  }
  members {
    name: "BUFFER_ACCESS_READ_WRITE"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "IndexBufferFormat"
  brief: ""
  description: ""
  members {
    name: "INDEXBUFFER_FORMAT_16"
    doc: ""
    type: ""
  }
  members {
    name: "INDEXBUFFER_FORMAT_32"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "PrimitiveType"
  brief: "Primitive type"
  description: "Primitive type"
  members {
    name: "PRIMITIVE_LINES"
    doc: ""
    type: ""
  }
  members {
    name: "PRIMITIVE_TRIANGLES"
    doc: ""
    type: ""
  }
  members {
    name: "PRIMITIVE_TRIANGLE_STRIP"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "Type"
  brief: "Data type"
  description: "Data type"
  members {
    name: "TYPE_BYTE"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_UNSIGNED_BYTE"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_SHORT"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_UNSIGNED_SHORT"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_INT"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_UNSIGNED_INT"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_FLOAT"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_FLOAT_VEC4"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_FLOAT_MAT4"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_SAMPLER_2D"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_SAMPLER_CUBE"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "BlendFactor"
  brief: "Blend factor"
  description: "Blend factor"
  members {
    name: "BLEND_FACTOR_ZERO"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_ONE"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_SRC_COLOR"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_ONE_MINUS_SRC_COLOR"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_DST_COLOR"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_ONE_MINUS_DST_COLOR"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_SRC_ALPHA"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_ONE_MINUS_SRC_ALPHA"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_DST_ALPHA"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_ONE_MINUS_DST_ALPHA"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_SRC_ALPHA_SATURATE"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_CONSTANT_COLOR"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_CONSTANT_ALPHA"
    doc: ""
    type: ""
  }
  members {
    name: "BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA"
    doc: ""
    type: ""
  }
}
elements {
  type: STRUCT
  name: "VertexElement"
  brief: ""
  description: ""
  members {
    name: "m_Name"
    doc: "name of the element (e.g. \"position\")"
    type: "const char*"
  }
  members {
    name: "m_Stream"
    doc: "stream index"
    type: "uint32_t"
  }
  members {
    name: "m_Size"
    doc: "number of elements (e.g. 3 for \"position\")"
    type: "uint32_t"
  }
  members {
    name: "m_Type"
    doc: "data type"
    type: "dmGraphics::Type"
  }
  members {
    name: "m_Normalize"
    doc: "if set, will normalize the output in the program"
    type: "bool"
  }
}
elements {
  type: FUNCTION
  name: "NewVertexDeclaration"
  brief: "Create new vertex declaration"
  description: "Create new vertex declaration"
  returnvalues {
    name: "declaration"
    doc: "the vertex declaration"
    types: "dmGraphics::HVertexDeclaration"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
  parameters {
    name: "element"
    doc: "the array of vertex elements"
    types: "dmGraphics::VertexElement*"
  }
  parameters {
    name: "count"
    doc: "the number of items in the element array"
    types: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "NewVertexDeclaration"
  brief: "Create new vertex declaration"
  description: "Create new vertex declaration"
  returnvalues {
    name: "declaration"
    doc: "the vertex declaration"
    types: "dmGraphics::HVertexDeclaration"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
  parameters {
    name: "element"
    doc: "the array of vertex elements"
    types: "dmGraphics::VertexElement*"
  }
  parameters {
    name: "count"
    doc: "the number of items in the element array"
    types: "uint32_t"
  }
  parameters {
    name: "stride"
    doc: "the stride between the start of each vertex (in bytes)"
    types: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "DeleteVertexDeclaration"
  brief: "Delete vertex declaration"
  description: "Delete vertex declaration"
  parameters {
    name: "vertex_declaration"
    doc: "the vertex declaration"
    types: "dmGraphics::HVertexDeclaration"
  }
}
elements {
  type: FUNCTION
  name: "NewVertexBuffer"
  brief: "Create new vertex buffer with initial data"
  description: "Create new vertex buffer with initial data"
  returnvalues {
    name: "buffer"
    doc: "the vertex buffer"
    types: "dmGraphics::HVertexBuffer"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
  parameters {
    name: "size"
    doc: "the size of the buffer (in bytes). May be 0"
    types: "uint32_t"
  }
  parameters {
    name: "data"
    doc: "the data"
    types: "void*"
  }
  parameters {
    name: "buffer_usage"
    doc: "the usage"
    types: "dmGraphics::BufferUsage"
  }
}
elements {
  type: FUNCTION
  name: "DeleteVertexBuffer"
  brief: "Delete vertex buffer"
  description: "Delete vertex buffer"
  parameters {
    name: "buffer"
    doc: "the buffer"
    types: "dmGraphics::HVertexBuffer"
  }
}
elements {
  type: FUNCTION
  name: "SetVertexBufferData"
  brief: "Set vertex buffer data"
  description: "Set vertex buffer data"
  parameters {
    name: "buffer"
    doc: "the buffer"
    types: "dmGraphics::HVertexBuffer"
  }
  parameters {
    name: "size"
    doc: "the size of the buffer (in bytes). May be 0"
    types: "uint32_t"
  }
  parameters {
    name: "data"
    doc: "the data"
    types: "void*"
  }
  parameters {
    name: "buffer_usage"
    doc: "the usage"
    types: "dmGraphics::BufferUsage"
  }
}
elements {
  type: FUNCTION
  name: "SetVertexBufferSubData"
  brief: "Set subset of vertex buffer data"
  description: "Set subset of vertex buffer data"
  parameters {
    name: "buffer"
    doc: "the buffer"
    types: "dmGraphics::HVertexBuffer"
  }
  parameters {
    name: "offset"
    doc: "the offset into the desination buffer (in bytes)"
    types: "uint32_t"
  }
  parameters {
    name: "size"
    doc: "the size of the buffer (in bytes). May be 0"
    types: "uint32_t"
  }
  parameters {
    name: "data"
    doc: "the data"
    types: "void*"
  }
}
elements {
  type: FUNCTION
  name: "GetMaxElementsVertices"
  brief: "Get the max number of vertices allowed by the syst..."
  description: "Get the max number of vertices allowed by the system in a vertex buffer"
  returnvalues {
    name: "count"
    doc: "the count"
    types: "uint32_t"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
}
elements {
  type: FUNCTION
  name: "NewIndexBuffer"
  brief: "Create new index buffer with initial data"
  description: "Create new index buffer with initial data"
  returnvalues {
    name: "buffer"
    doc: "the index buffer"
    types: "dmGraphics::HIndexBuffer"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
  parameters {
    name: "size"
    doc: "the size of the buffer (in bytes). May be 0"
    types: "uint32_t"
  }
  parameters {
    name: "data"
    doc: "the data"
    types: "void*"
  }
  parameters {
    name: "buffer_usage"
    doc: "the usage"
    types: "dmGraphics::BufferUsage"
  }
}
elements {
  type: FUNCTION
  name: "DeleteIndexBuffer"
  brief: "Delete the index buffer"
  description: "Delete the index buffer"
  parameters {
    name: "buffer"
    doc: "the index buffer"
    types: "dmGraphics::HIndexBuffer"
  }
}
elements {
  type: FUNCTION
  name: "SetIndexBufferData"
  brief: "Set index buffer data"
  description: "Set index buffer data"
  parameters {
    name: "buffer"
    doc: "the buffer"
    types: "dmGraphics::HIndexBuffer"
  }
  parameters {
    name: "size"
    doc: "the size of the buffer (in bytes). May be 0"
    types: "uint32_t"
  }
  parameters {
    name: "data"
    doc: "the data"
    types: "void*"
  }
  parameters {
    name: "buffer_usage"
    doc: "the usage"
    types: "dmGraphics::BufferUsage"
  }
}
elements {
  type: FUNCTION
  name: "SetIndexBufferSubData"
  brief: "Set subset of index buffer data"
  description: "Set subset of index buffer data"
  parameters {
    name: "buffer"
    doc: "the buffer"
    types: "dmGraphics::HVertexBuffer"
  }
  parameters {
    name: "offset"
    doc: "the offset into the desination buffer (in bytes)"
    types: "uint32_t"
  }
  parameters {
    name: "size"
    doc: "the size of the buffer (in bytes). May be 0"
    types: "uint32_t"
  }
  parameters {
    name: "data"
    doc: "the data"
    types: "void*"
  }
}
elements {
  type: FUNCTION
  name: "IsIndexBufferFormatSupported"
  brief: "Check if the index format is supported"
  description: "Check if the index format is supported"
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
  parameters {
    name: "format"
    doc: "the format"
    types: "dmGraphics::IndexBufferFormat"
  }
  parameters {
    name: "result"
    doc: "true if the format is supoprted"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "GetMaxElementsIndices"
  brief: "Get the max number of indices allowed by the syste..."
  description: "Get the max number of indices allowed by the system in an index buffer"
  returnvalues {
    name: "count"
    doc: "the count"
    types: "uint32_t"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
}
elements {
  type: FUNCTION
  name: "IsExtensionSupported"
  brief: "check if an extension is supported"
  description: "check if an extension is supported"
  returnvalues {
    name: "result"
    doc: "true if the extension was supported"
    types: "bool"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
  parameters {
    name: "extension"
    doc: "the extension."
    types: "const char*"
  }
}
elements {
  type: FUNCTION
  name: "IsTextureFormatSupported"
  brief: "check if a specific texture format is supported"
  description: "check if a specific texture format is supported"
  returnvalues {
    name: "result"
    doc: "true if the texture format was supported"
    types: "bool"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
  parameters {
    name: "format"
    doc: "the texture format."
    types: "TextureFormat"
  }
}
elements {
  type: FUNCTION
  name: "GetNumSupportedExtensions"
  brief: ""
  description: ""
  returnvalues {
    name: "count"
    doc: "the number of supported extensions"
    types: "uint32_t"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
}
elements {
  type: FUNCTION
  name: "GetSupportedExtension"
  brief: "get the supported extension"
  description: "get the supported extension"
  returnvalues {
    name: "extension"
    doc: "the extension. 0 if index was out of bounds"
    types: "const char*"
  }
  parameters {
    name: "context"
    doc: "the context"
    types: "dmGraphics::HContext"
  }
  parameters {
    name: "index"
    doc: "the index of the extension"
    types: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeiOSUIWindow"
  brief: "get iOS UIWindow"
  description: "Get iOS UIWindow native handle (id). Any other platform return zero."
  returnvalues {
    name: "id"
    doc: "native handle"
    types: "id"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeiOSUIView"
  brief: "get iOS UIView"
  description: "Get iOS UIView native handle (id). Any other platform return zero."
  returnvalues {
    name: "id"
    doc: "native handle"
    types: "id"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeiOSEAGLContext"
  brief: "get iOS EAGLContext"
  description: "Get iOS EAGLContext native handle (id). Any other platform return zero."
  returnvalues {
    name: "id"
    doc: "native handle"
    types: "id"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeOSXNSWindow"
  brief: "get OSX NSWindow"
  description: "Get OSX NSWindow native handle (id). Any other platform return zero."
  returnvalues {
    name: "id"
    doc: "native handle"
    types: "id"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeOSXNSView"
  brief: "get OSX NSView"
  description: "Get OSX NSView native handle (id). Any other platform return zero."
  returnvalues {
    name: "id"
    doc: "native handle"
    types: "id"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeOSXNSOpenGLContext"
  brief: "get OSX NSOpenGLContext"
  description: "Get OSX NSOpenGLContext native handle (id). Any other platform return zero."
  returnvalues {
    name: "id"
    doc: "native handle"
    types: "id"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeWindowsHWND"
  brief: "get Win32 HWND"
  description: "Get Win32 windows native handle (HWND). Any other platform return zero."
  returnvalues {
    name: "HWND"
    doc: "native handle"
    types: "HWND"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeWindowsHGLRC"
  brief: "get Win32 HGLRC"
  description: "Get Win32 gl rendercontext native handle (HGLRC). Any other platform return zero."
  returnvalues {
    name: "HGLRC"
    doc: "native handle"
    types: "HGLRC"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeAndroidEGLContext"
  brief: "get Android EGLContext"
  description: "Get Android EGLContext native handle (EGLContext). Any other platform return zero."
  returnvalues {
    name: "EGLContext"
    doc: "native handle"
    types: "EGLContext"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeAndroidEGLSurface"
  brief: "get Android EGLSurface"
  description: "Get Android EGLSurface native handle (EGLSurface). Any other platform return zero."
  returnvalues {
    name: "EGLSurface"
    doc: "native handle"
    types: "EGLSurface"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeAndroidJavaVM"
  brief: "get Android native JavaVM"
  description: "Get Android JavaVM ptr. Any other platform return zero."
  returnvalues {
    name: "JavaVM*"
    doc: "native handle"
    types: "JavaVM*"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeAndroidActivity"
  brief: "get Android native jobject"
  description: "Get Android native jobject. Any other platform return zero."
  returnvalues {
    name: "jobject"
    doc: "native handle"
    types: "jobject"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeAndroidApp"
  brief: "get Android app object"
  description: "Get Android app object. Any other platform return zero."
  returnvalues {
    name: "app"
    doc: "native handle"
    types: "struct android_app*"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeX11Window"
  brief: "get Linux X11Window"
  description: "Get Linux X11Window windows native handle (Window). Any other platform return zero."
  returnvalues {
    name: "Window"
    doc: "native handle"
    types: "Window"
  }
}
elements {
  type: FUNCTION
  name: "dmGraphics::GetNativeX11GLXContext"
  brief: "get Linux X11GLXContext"
  description: "Get Linux X11GLXContext native handle (GLXContext). Any other platform return zero."
  returnvalues {
    name: "GLXContext"
    doc: "native handle"
    types: "GLXContext"
  }
}
info {
  namespace: "dmGraphics"
  name: "Graphics"
  brief: "SDK Graphics API documentation"
  description: "Platform specific native graphics functions."
  path: "engine/dlib/src/dmsdk/graphics/graphics_native.h"
  file: "dmsdk/graphics/graphics_native.h"
}
