- desc: Socket handle
  name: HSocket
  type: typedef
- desc: Resets the given URL to default values.
  name: ResetUrl
  parameters:
  - desc: URL to reset
    name: url
    type: dmMessage::URL
  type: function
- desc: Get the message socket
  name: GetSocket
  parameters:
  - desc: url
    name: url
    type: dmMessage::URL
  returns:
  - desc: ''
    type: dmMessage::HSocket
  type: function
- desc: Set the socket
  name: SetSocket
  parameters:
  - desc: url
    name: url
    type: dmMessage::URL
  - desc: ''
    name: socket
    type: dmMessage::HSocket
  type: function
- desc: Tests if a socket is valid (not deleted).
  name: IsSocketValid
  parameters:
  - desc: Socket
    name: socket
    type: dmMessage::HSocket
  returns:
  - desc: if the socket is valid or not
    type: bool
  type: function
- desc: Get socket name
  name: GetSocketName
  parameters:
  - desc: Socket
    name: socket
    type: dmMessage::HSocket
  returns:
  - desc: socket name. 0 if it was not found
    type: const char*
  type: function
- desc: Get the message path
  name: GetPath
  parameters:
  - desc: url
    name: url
    type: dmMessage::URL
  returns:
  - desc: ''
    type: dmhash_t
  type: function
- desc: Set the message path
  name: SetPath
  parameters:
  - desc: url
    name: url
    type: dmMessage::URL
  - desc: ''
    name: path
    type: dmhash_t
  type: function
- desc: Get the message fragment
  name: GetFragment
  parameters:
  - desc: url
    name: url
    type: dmMessage::URL
  returns:
  - desc: ''
    type: dmhash_t
  type: function
- desc: Set the message fragment
  name: SetFragment
  parameters:
  - desc: url
    name: url
    type: dmMessage::URL
  - desc: ''
    name: fragment
    type: dmhash_t
  type: function
- desc: ''
  name: Message
  type: struct
- desc: A callback for messages that needs cleanup after being dispatched. E.g. for
    freeing resources/memory.
  name: dmMMessage::MessageDestroyCallback
  type: typedef
- desc: 'Message data desc used at dispatch callback. When a message is posted,

    the actual object is copied into the sockets internal buffer.'
  name: Message
  type: struct
- desc: Convert a string to a URL struct
  name: ParseUrl
  parameters:
  - desc: string of the format [socket:][path][#fragment]
    name: uri
    type: const char*
  - desc: url in string format, must not be 0x0
    name: out
    type: dmMessage::StringUrl
  returns:
  - desc: 'RESULT_OK on success

      - RESULT_MALFORMED_URL if the uri could not be parsed'
    type: ''
  type: function
- desc: '[file:<dmsdk/dlib/message.h>]


    Api for sending messages'
  members:
  - desc: Result enum
    name: :Result
    type: enum
  - desc: URL specifying a sender/receiver of messages
    name: :URL
    type: struct
  - desc: Helper struct for parsing a string of the form "socket:path#fragment"
    name: :StringURL
    type: typedef
  name: dmMessage
  type: table
