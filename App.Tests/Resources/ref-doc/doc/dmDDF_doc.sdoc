elements {
  type: TYPEDEF
  name: "Descriptor"
  brief: "descriptor handle"
  description: "Opaque pointer that holds info about a message type."
}
elements {
  type: FUNCTION
  name: "OPTION_OFFSET_POINTERS"
  brief: "Store pointers as offset from base address. Needed..."
  description: "Store pointers as offset from base address. Needed when serializing entire messages (copy). Value (1 &lt;&lt; 0)"
}
elements {
  type: ENUM
  name: "Result"
  brief: "result enumeration"
  description: "Result enumeration."
  members {
    name: "dmDDF::RESULT_OK"
    doc: "= 0,"
    type: ""
  }
  members {
    name: "dmDDF::RESULT_FIELDTYPE_MISMATCH"
    doc: "= 1,"
    type: ""
  }
  members {
    name: "dmDDF::RESULT_WIRE_FORMAT_ERROR"
    doc: "= 2,"
    type: ""
  }
  members {
    name: "dmDDF::RESULT_IO_ERROR"
    doc: "= 3,"
    type: ""
  }
  members {
    name: "dmDDF::RESULT_VERSION_MISMATCH"
    doc: "= 4,"
    type: ""
  }
  members {
    name: "dmDDF::RESULT_MISSING_REQUIRED"
    doc: "= 5,"
    type: ""
  }
  members {
    name: "dmDDF::RESULT_INTERNAL_ERROR"
    doc: "= 1000,"
    type: ""
  }
}
elements {
  type: FUNCTION
  name: "GetDescriptorFromHash"
  brief: "Get Descriptor from hash name"
  description: "Get Descriptor from hash name"
  returnvalues {
    name: "descriptor"
    doc: "0 if not found"
    types: "dmDDF::Descriptor*"
  }
  parameters {
    name: "hash"
    doc: "hash of type name"
    types: "dmhash_t"
  }
}
elements {
  type: FUNCTION
  name: "LoadMessage"
  brief: "Load/decode a DDF message from buffer"
  description: "Load/decode a DDF message from buffer"
  returnvalues {
    name: "RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "buffer"
    doc: "Input buffer"
    types: "const void*"
  }
  parameters {
    name: "buffer_size"
    doc: "Input buffer size in bytes"
    types: "uint32_t"
  }
  parameters {
    name: "desc"
    doc: "DDF descriptor"
    types: "dmDDF::Descriptor*"
  }
  parameters {
    name: "message"
    doc: "(out) Destination pointer to message"
    types: "void**"
  }
}
elements {
  type: FUNCTION
  name: "LoadMessage"
  brief: "Load/decode a DDF message from buffer"
  description: "Load/decode a DDF message from buffer"
  returnvalues {
    name: "RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "buffer"
    doc: "Input buffer"
    types: "const void*"
  }
  parameters {
    name: "buffer_size"
    doc: "Input buffer size in bytes"
    types: "uint32_t"
  }
  parameters {
    name: "desc"
    doc: "DDF descriptor"
    types: "dmDDF::Descriptor*"
  }
  parameters {
    name: "message"
    doc: "(out) Destination pointer to message"
    types: "void**"
  }
  parameters {
    name: "options"
    doc: "options, eg dmDDF::OPTION_OFFSET_POINTERS"
    types: "uint32_t"
  }
  parameters {
    name: "size"
    doc: "(out) loaded message size"
    types: "uint32_t*"
  }
}
elements {
  type: FUNCTION
  name: "SaveMessageToArray"
  brief: "Save message to array"
  description: "Save message to array"
  returnvalues {
    name: "RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "message"
    doc: "Message"
    types: "const void*"
  }
  parameters {
    name: "desc"
    doc: "DDF descriptor"
    types: "dmDDF::Descriptor*"
  }
  parameters {
    name: "buffer"
    doc: "Buffer to save to"
    types: "dmArray<uint8_t>&"
  }
}
elements {
  type: FUNCTION
  name: "LoadMessage<T>"
  brief: "Load/decode a DDF message from buffer. Template va..."
  description: "Load/decode a DDF message from buffer. Template variant"
  returnvalues {
    name: "RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "buffer"
    doc: "Input buffer"
    types: "const void*"
  }
  parameters {
    name: "buffer_size"
    doc: "Input buffer size in bytes"
    types: "uint32_t"
  }
  parameters {
    name: "message"
    doc: "(out) Destination pointer to message"
    types: "T**"
  }
}
elements {
  type: FUNCTION
  name: "LoadMessageFromFile"
  brief: "Load/decode a DDF message from file"
  description: "Load/decode a DDF message from file"
  returnvalues {
    name: "RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "file_name"
    doc: "File name"
    types: "const char*"
  }
  parameters {
    name: "desc"
    doc: "DDF descriptor"
    types: "dmDDF::Descriptor*"
  }
  parameters {
    name: "message"
    doc: "(out) Destination pointer to message"
    types: "void**"
  }
}
elements {
  type: FUNCTION
  name: "ResolvePointers"
  brief: "If the message was loaded with the flag dmDDF::OPT..."
  description: "If the message was loaded with the flag dmDDF::OPTION_OFFSET_POINTERS, all pointers have their offset stored.\nThis function resolves those offsets into actual pointers"
  returnvalues {
    name: "RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "desc"
    doc: "DDF descriptor"
    types: "dmDDF::Descriptor*"
  }
  parameters {
    name: "message"
    doc: "(int/out) The message to patch pointers in"
    types: "void*"
  }
}
elements {
  type: FUNCTION
  name: "FreeMessage"
  brief: "Free message"
  description: "Free message"
  parameters {
    name: "message"
    doc: "The message"
    types: "void*"
  }
}
info {
  namespace: "dmDDF"
  name: "Ddf"
  brief: "SDK DDF (Defold Data Format) API documentation"
  description: "<span class=\"file\"><dmsdk/ddf/ddf.h></span>"
  path: ""
  file: ""
}
