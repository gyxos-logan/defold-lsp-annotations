elements {
  type: FUNCTION
  name: "HScene"
  brief: "A handle to a gui scene"
  description: "A handle to a gui scene"
}
elements {
  type: FUNCTION
  name: "HNode"
  brief: "A handle to a gui node"
  description: "A handle to a gui node"
}
elements {
  type: FUNCTION
  name: "INVALID_HANDLE"
  brief: "Invalid node handle"
  description: "Invalid node handle"
}
elements {
  type: FUNCTION
  name: "Playback"
  brief: ""
  description: ""
  members {
    name: "PLAYBACK_ONCE_FORWARD"
    doc: ""
    type: ""
  }
  members {
    name: "PLAYBACK_ONCE_BACKWARD"
    doc: ""
    type: ""
  }
  members {
    name: "PLAYBACK_ONCE_PINGPONG"
    doc: ""
    type: ""
  }
  members {
    name: "PLAYBACK_LOOP_FORWARD"
    doc: ""
    type: ""
  }
  members {
    name: "PLAYBACK_LOOP_BACKWARD"
    doc: ""
    type: ""
  }
  members {
    name: "PLAYBACK_LOOP_PINGPONG"
    doc: ""
    type: ""
  }
  members {
    name: "PLAYBACK_NONE"
    doc: ""
    type: ""
  }
}
elements {
  type: FUNCTION
  name: "AdjustReference"
  brief: ""
  description: ""
  members {
    name: "ADJUST_REFERENCE_PARENT"
    doc: ""
    type: ""
  }
  members {
    name: "ADJUST_REFERENCE_DISABLED"
    doc: ""
    type: ""
  }
}
elements {
  type: FUNCTION
  name: "NodeTextureType"
  brief: "This enum denotes what kind of texture type the m_..."
  description: "This enum denotes what kind of texture type the m_Texture pointer is referencing."
  members {
    name: "NODE_TEXTURE_TYPE_NONE"
    doc: ""
    type: ""
  }
  members {
    name: "NODE_TEXTURE_TYPE_TEXTURE"
    doc: ""
    type: ""
  }
  members {
    name: "NODE_TEXTURE_TYPE_TEXTURE_SET"
    doc: ""
    type: ""
  }
  members {
    name: "NODE_TEXTURE_TYPE_DYNAMIC"
    doc: ""
    type: ""
  }
}
elements {
  type: FUNCTION
  name: "Result"
  brief: ""
  description: ""
  members {
    name: "NODE_TYPE_BOX"
    doc: "//!&lt; 0,"
    type: ""
  }
  members {
    name: "NODE_TYPE_TEXT"
    doc: "//!&lt; 1,"
    type: ""
  }
  members {
    name: "NODE_TYPE_PIE"
    doc: "//!&lt; 2,"
    type: ""
  }
  members {
    name: "NODE_TYPE_TEMPLATE"
    doc: "//!&lt; 3,"
    type: ""
  }
  members {
    name: "NODE_TYPE_PARTICLEFX"
    doc: "//!&lt; 5,"
    type: ""
  }
  members {
    name: "NODE_TYPE_CUSTOM"
    doc: "//!&lt; 6,"
    type: ""
  }
  members {
    name: "NODE_TYPE_COUNT"
    doc: "//!&lt; 7,"
    type: ""
  }
}
elements {
  type: FUNCTION
  name: "Result"
  brief: ""
  description: ""
  members {
    name: "RESULT_OK"
    doc: "//!&lt; 0"
    type: ""
  }
  members {
    name: "RESULT_SYNTAX_ERROR"
    doc: "//!&lt; -1"
    type: ""
  }
  members {
    name: "RESULT_SCRIPT_ERROR"
    doc: "//!&lt; -2"
    type: ""
  }
  members {
    name: "RESULT_OUT_OF_RESOURCES"
    doc: "//!&lt; -4"
    type: ""
  }
  members {
    name: "RESULT_RESOURCE_NOT_FOUND"
    doc: "//!&lt; -5"
    type: ""
  }
  members {
    name: "RESULT_TEXTURE_ALREADY_EXISTS"
    doc: "//!&lt; -6"
    type: ""
  }
  members {
    name: "RESULT_INVAL_ERROR"
    doc: "//!&lt; -7"
    type: ""
  }
  members {
    name: "RESULT_INF_RECURSION"
    doc: "//!&lt; -8"
    type: ""
  }
  members {
    name: "RESULT_DATA_ERROR"
    doc: "//!&lt; -9"
    type: ""
  }
  members {
    name: "RESULT_WRONG_TYPE"
    doc: "//!&lt; -10"
    type: ""
  }
}
elements {
  type: FUNCTION
  name: "NewNode"
  brief: ""
  description: ""
  returnvalues {
    name: "node"
    doc: "the created node"
    types: "dmGui::HNode"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "position"
    doc: "the position"
    types: "dmVMath::Point3"
  }
  parameters {
    name: "size"
    doc: "the size"
    types: "dmVMath::Vector3"
  }
  parameters {
    name: "node_type"
    doc: "the node type"
    types: "dmGui::NodeType"
  }
  parameters {
    name: "custom_type"
    doc: "If node_type == dmGui::NODE_TYPE_CUSTOM, then this is used to create a custom node data for the registered custom type"
    types: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "DeleteNode"
  brief: "Defer delete a node"
  description: "Defer delete a node"
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the node to delete"
    types: "dmGui::HNode"
  }
}
elements {
  type: FUNCTION
  name: "SetNodeId"
  brief: "Set the id of a node."
  description: "Set the id of a node."
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "dmGui::HNode"
  }
  parameters {
    name: "id"
    doc: "the id"
    types: "dmhash_t"
  }
}
elements {
  type: FUNCTION
  name: "GetNodeId"
  brief: "Get the id of a node."
  description: "Get the id of a node."
  returnvalues {
    name: "id"
    doc: "the id of the node"
    types: "dmhash_t"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "dmGui::HNode"
  }
}
elements {
  type: FUNCTION
  name: "SetNodeParent"
  brief: "Set the parent of a gui node"
  description: "Set the parent of a gui node"
  returnvalues {
    name: "result"
    doc: "dmGui::RESULT_OK is successful"
    types: "dmGui::Result"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "dmGui::HNode"
  }
  parameters {
    name: "parent"
    doc: "the new parent. May be null"
    types: "dmGui::HNode"
  }
  parameters {
    name: "keep_scene_transform"
    doc: "true to keep the world position"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "GetNodeParent"
  brief: "Get the parent of a gui node"
  description: "Get the parent of a gui node"
  returnvalues {
    name: "parent"
    doc: "the parent, or INVALID_HANDLE is unsuccessful"
    types: "dmGui::HNode"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "dmGui::HNode"
  }
}
elements {
  type: FUNCTION
  name: "GetFirstChildNode"
  brief: "Get first child node"
  description: "Get first child node"
  returnvalues {
    name: "child"
    doc: "The first child node"
    types: "dmGui::HNode"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "Gets the first child node. If 0, gets the first top level node."
    types: "dmGui::HNode"
  }
}
elements {
  type: FUNCTION
  name: "GetNextNode"
  brief: "Get next sibling"
  description: "Get next sibling"
  returnvalues {
    name: "sibling"
    doc: "the next sibling, or INVALID_HANDLE if no more siblings"
    types: "dmGui::HNode"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the current sibling"
    types: "dmGui::HNode"
  }
}
elements {
  type: FUNCTION
  name: "GetNodeIsBone"
  brief: "Query if the node is a bone"
  description: "Query if the node is a bone"
  returnvalues {
    name: "result"
    doc: "true if the node is a bone"
    types: "bool"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "dmGui::HNode"
  }
}
elements {
  type: FUNCTION
  name: "SetNodeIsBone"
  brief: "Set the bone state of the node"
  description: "Set the bone state of the node"
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "dmGui::HNode"
  }
  parameters {
    name: "is_bone"
    doc: "true if the node is ot be used as a bone"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "Property"
  brief: ""
  description: ""
  members {
    name: "PROPERTY_POSITION"
    doc: "//!&lt; 0"
    type: ""
  }
  members {
    name: "PROPERTY_ROTATION"
    doc: "//!&lt; 1"
    type: ""
  }
  members {
    name: "PROPERTY_SCALE"
    doc: "<div class=\"codehilite\"><pre><span></span><code>  //!&lt; 2\n</code></pre></div>"
    type: ""
  }
  members {
    name: "PROPERTY_COLOR"
    doc: "<div class=\"codehilite\"><pre><span></span><code>  //!&lt; 3\n</code></pre></div>"
    type: ""
  }
  members {
    name: "PROPERTY_SIZE"
    doc: "<div class=\"codehilite\"><pre><span></span><code>   //!&lt; 4\n</code></pre></div>"
    type: ""
  }
  members {
    name: "PROPERTY_OUTLINE"
    doc: "<div class=\"codehilite\"><pre><span></span><code>//!&lt; 5\n</code></pre></div>"
    type: ""
  }
  members {
    name: "PROPERTY_SHADOW"
    doc: "<div class=\"codehilite\"><pre><span></span><code> //!&lt; 6\n</code></pre></div>"
    type: ""
  }
  members {
    name: "PROPERTY_SLICE9"
    doc: "<div class=\"codehilite\"><pre><span></span><code> //!&lt; 7\n</code></pre></div>"
    type: ""
  }
  members {
    name: "PROPERTY_PIE_PARAMS"
    doc: "//!&lt; 8"
    type: ""
  }
  members {
    name: "PROPERTY_TEXT_PARAMS"
    doc: "//!&lt; 9"
    type: ""
  }
  members {
    name: "PROPERTY_COUNT"
    doc: "<div class=\"codehilite\"><pre><span></span><code>  //!&lt; 10\n</code></pre></div>"
    type: ""
  }
}
elements {
  type: FUNCTION
  name: "GetNodeProperty"
  brief: "Get property value"
  description: "Get property value"
  returnvalues {
    name: "value"
    doc: ""
    types: "dmVMath::Vector4"
  }
  parameters {
    name: "scene"
    doc: "type: dmGui::HScene] scene"
    types: ""
  }
  parameters {
    name: "node"
    doc: "type: dmGui::HNode] node"
    types: ""
  }
  parameters {
    name: "property"
    doc: "property enum"
    types: "dmGui::Property"
  }
}
elements {
  type: FUNCTION
  name: "SetNodeProperty"
  brief: "Set property value"
  description: "Set property value"
  parameters {
    name: "scene"
    doc: "type: dmGui::HScene] scene"
    types: ""
  }
  parameters {
    name: "node"
    doc: "type: dmGui::HNode] node"
    types: ""
  }
  parameters {
    name: "property"
    doc: "property enum"
    types: "dmGui::Property"
  }
  parameters {
    name: "value"
    doc: ""
    types: "dmVMath::Vector4"
  }
}
elements {
  type: FUNCTION
  name: "AdjustMode"
  brief: ""
  description: ""
  members {
    name: "ADJUST_MODE_FIT"
    doc: "<div class=\"codehilite\"><pre><span></span><code>//!&lt; 0\n</code></pre></div>"
    type: ""
  }
  members {
    name: "ADJUST_MODE_ZOOM"
    doc: "//!&lt; 1"
    type: ""
  }
  members {
    name: "ADJUST_MODE_STRETCH"
    doc: "//!&lt; 2"
    type: ""
  }
}
elements {
  type: FUNCTION
  name: "SetNodeAdjustMode"
  brief: "Set adjust mode"
  description: "Set adjust mode"
  parameters {
    name: "scene"
    doc: "type: dmGui::HScene] scene"
    types: ""
  }
  parameters {
    name: "node"
    doc: "type: dmGui::HNode] node"
    types: ""
  }
  parameters {
    name: "adjust_mode"
    doc: "the adjust mode"
    types: "AdjustMode"
  }
}
elements {
  type: FUNCTION
  name: "GetNodeCustomData"
  brief: "get node custom type"
  description: "get node custom type"
  returnvalues {
    name: "type"
    doc: "the custom type. Or 0 if it is no custom type"
    types: "uint32_t"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "HNode"
  }
}
elements {
  type: FUNCTION
  name: "GetNodeCustomData"
  brief: "get node custom data"
  description: "get node custom data"
  returnvalues {
    name: "data"
    doc: "the custom data created per node by the gui node type extension"
    types: "void*"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "HNode"
  }
}
elements {
  type: FUNCTION
  name: "GetNodeTextureId"
  brief: "get node texture"
  description: "get node texture"
  returnvalues {
    name: "texture"
    doc: "the currently assigned texture"
    types: "dmhash_t"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "HNode"
  }
}
elements {
  type: FUNCTION
  name: "SetNodeTexture"
  brief: "set node texture"
  description: "set node texture"
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "HNode"
  }
  parameters {
    name: "texture_id"
    doc: "the texture id"
    types: "dmhash_t"
  }
}
elements {
  type: FUNCTION
  name: "SetNodeTexture"
  brief: "set node texture"
  description: "set node texture"
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "HNode"
  }
  parameters {
    name: "type"
    doc: "the type of texture"
    types: "NodeTextureType"
  }
  parameters {
    name: "texture"
    doc: "A pointer to a e.g. dmGameSystem::TextureSetResource*"
    types: "void*"
  }
}
elements {
  type: FUNCTION
  name: "GetResource"
  brief: "Gets a resource by its resource alias."
  description: "Gets a resource by its resource alias."
  returnvalues {
    name: "resource"
    doc: "the resource if successful"
    types: "void*"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "resource_id"
    doc: "the resource alias"
    types: "dmhash_t"
  }
  parameters {
    name: "suffix_with_dot"
    doc: "the hash of the suffix: hash(\".spinescenec\")"
    types: "dmhash_t"
  }
}
elements {
  type: FUNCTION
  name: "LuaPushNode"
  brief: "Pushes a dmGui::HNode to the stack"
  description: "Pushes a dmGui::HNode to the stack"
  parameters {
    name: "L"
    doc: "the Lua scene"
    types: "lua_State*"
  }
  parameters {
    name: "scene"
    doc: "the gui scene"
    types: "dmGui::HScene"
  }
  parameters {
    name: "node"
    doc: "the gui node"
    types: "HNode"
  }
}
info {
  namespace: "dmGui"
  name: "Gui"
  brief: "Defold GUI system"
  description: "Defold GUI system"
  path: "engine/gui/src/dmsdk/gui/gui.h"
  file: "dmsdk/gui/gui.h"
}
