- desc: ValueType enumeration.
  name: ValueType
  type: enum
- desc: Result enumeration.
  name: Result
  type: enum
- desc: Buffer API for data buffers as the main way to communicate between systems.
  members:
  - desc: '```cpp

      typedef uint32_t HBuffer;

      ```'
    name: :HBuffer
    type: typedef
  - desc: Buffer stream declaration structure
    name: :StreamDeclaration
    type: struct
  - desc: Creates a new HBuffer with a number of different streams.
    name: :Create
    parameters:
    - desc: The number of "structs" the buffer should hold (e.g. vertex count)
      name: count
      type: uint32_t
    - desc: Array of stream declarations
      name: streams_decl
      type: const dmBuffer::StreamDeclaration*
    - desc: Number of stream declarations inside the decl array (max 256)
      name: streams_decl_count
      type: uint8_t
    - desc: Pointer to HBuffer where to store the newly allocated buffer
      name: out_buffer
      type: dmBuffer::HBuffer*
    returns:
    - desc: BUFFER_OK if buffer was allocated successfully
      type: dmBuffer::Result
    type: function
  - desc: Copies the data from one buffer to another buffer. The stream declaration
      needs to be the same in both buffers.
    name: :Copy
    parameters:
    - desc: Pointer to HBuffer from where to copy buffer data.
      name: dst_buffer_handle
      type: dmBuffer::HBuffer*
    - desc: Pointer to HBuffer where to copy the buffer data.
      name: src_buffer_handle
      type: dmBuffer::HBuffer*
    returns:
    - desc: BUFFER_OK if buffer was copied successfully
      type: dmBuffer::Result
    type: function
  - desc: Destroys a HBuffer and it's streams.
    name: :Destroy
    parameters:
    - desc: Buffer handle to the buffer to free
      name: buffer
      type: dmBuffer::HBuffer
    type: function
  - desc: Checks if a handle is still valid
    name: :IsBufferValid
    parameters:
    - desc: The buffer
      name: buffer
      type: dmBuffer::HBuffer
    returns:
    - desc: True if the handle is valid
      type: bool
    type: function
  - desc: Validate a buffer and it's streams.
    name: :ValidateBuffer
    parameters:
    - desc: Buffer handle to the buffer to validate
      name: buffer
      type: dmBuffer::HBuffer
    type: function
  - desc: Get a stream from a buffer. Output stream is 16 byte aligned.
    name: :GetStream
    parameters:
    - desc: buffer handle.
      name: buffer
      type: dmBuffer::HBuffer
    - desc: Hash of stream name to get
      name: stream_name
      type: dmhash_t
    - desc: Where to store the stream
      name: stream
      type: void**
    - desc: Where to store the count (e.g. vertex count). May be null.
      name: count
      type: uint32_t*
    - desc: Where to store the number of components (e.g. 3 for a Vector3). May be
        null.
      name: components
      type: uint32_t*
    - desc: 'Where to store the (struct) stride. The stride can be added to the value
        pointer. May be null.

        E.g. for a float array, the stride is (sizeof(Struct) / sizeof(float))'
      name: stride
      type: uint32_t*
    returns:
    - desc: BUFFER_OK if the stream was successfully accessed
      type: dmBuffer::Result
    type: function
  - desc: Gets the buffer as a byte array. If the buffer is interleaved (default),
      a pointer to the whole memory is returned.
    name: :GetBytes
    parameters:
    - desc: buffer handle.
      name: buffer
      type: dmBuffer::HBuffer
    - desc: Pointer to void* where to store the bytes
      name: out_bytes
      type: void**
    - desc: Pointer to uint32_t where to store the array size
      name: out_size
      type: uint32_t*
    returns:
    - desc: BUFFER_OK if the buffer was successfully accessed
      type: dmBuffer::Result
    type: function
  - desc: Get (struct) count for a buffer.
    name: :GetCount
    parameters:
    - desc: buffer handle.
      name: buffer
      type: dmBuffer::HBuffer
    - desc: Pointer to uint32_t where to store the element count
      name: count
      type: uint32_t*
    returns:
    - desc: BUFFER_OK if the element count was successfully accessed
      type: dmBuffer::Result
    type: function
  - desc: Gets the stream type
    name: :GetStreamType
    parameters:
    - desc: Pointer to a buffer.
      name: buffer
      type: dmBuffer::HBuffer
    - desc: Hash of stream name to get
      name: stream_name
      type: dmhash_t
    - desc: The value type
      name: type
      type: dmBuffer::ValueType*
    - desc: The number of values (E.g. 3 for a Vector3)
      name: components
      type: uint32_t*
    returns:
    - desc: Returns BUFFER_OK if all went ok
      type: dmBuffer::Result
    type: function
  - desc: Gets the size of a value type
    name: :GetSizeForValueType
    parameters:
    - desc: The value type
      name: type
      type: dmBuffer::ValueType
    returns:
    - desc: The size in bytes
      type: uint32_t
    type: function
  - desc: Converts result to string
    name: :GetResultString
    parameters:
    - desc: The result
      name: result
      type: dmBuffer::Result
    returns:
    - desc: The result as a string
      type: const char*
    type: function
  - desc: Converts a value type to string
    name: :GetValueTypeString
    parameters:
    - desc: The value type
      name: result
      type: dmBuffer::ValueType
    returns:
    - desc: The value type as a string
      type: const char*
    type: function
  - desc: Gets the current update number
    name: :GetContentVersion
    parameters:
    - desc: The value type
      name: type
      type: dmBuffer::HBuffer
    - desc: The current version number
      name: version
      type: uint32_t*
    returns:
    - desc: Returns BUFFER_OK if all went ok
      type: dmBuffer::Result
    type: function
  - desc: Used to know if a buffer has been updated.
    name: :UpdateContentVersion
    parameters:
    - desc: The value type
      name: type
      type: dmBuffer::HBuffer
    returns:
    - desc: Returns BUFFER_OK if all went ok
      type: dmBuffer::Result
    type: function
  - desc: 'Create or update a new metadata entry with a number of values of a specific
      type.

      It will allocate space to store these values.'
    name: :SetMetaData
    parameters:
    - desc: A buffer handle
      name: hbuffer
      type: dmBuffer::HBuffer
    - desc: The entry name as a hash
      name: name_hash
      type: dmhash_t
    - desc: A pointer to an array of the values
      name: data
      type: void*
    - desc: Number of values in the array
      name: count
      type: uint32_t
    - desc: The type of the values
      name: type
      type: dmBuffer::ValueType
    returns:
    - desc: RESULT_OK if the metadata entry was successfully stored
      type: dmBuffer::Result
    type: function
  - desc: Retrieve metadata entry information
    name: :GetMetaData
    parameters:
    - desc: A buffer handle
      name: hbuffer
      type: dmBuffer::HBuffer
    - desc: The entry name as a hash
      name: name_hash
      type: dmhash_t
    - desc: Gets the internal address of metadata values
      name: data
      type: void**
    - desc: Gets the number of metadata values stored
      name: count
      type: uint32_t
    - desc: Gets the type of values of the metadata
      name: type
      type: dmBuffer::ValueType
    type: function
  name: dmBuffer
  type: table
