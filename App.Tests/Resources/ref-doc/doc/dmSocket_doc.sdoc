elements {
  type: VARIABLE
  name: "SOCKET_TIMEOUT"
  brief: "Socket default timeout value"
  description: "Socket default timeout value"
}
elements {
  type: TYPEDEF
  name: "Socket"
  brief: "Socket type definition"
  description: "Socket type definition"
}
elements {
  type: VARIABLE
  name: "INVALID_SOCKET_HANDLE"
  brief: "Invalid socket handle"
  description: "Invalid socket handle"
}
elements {
  type: ENUM
  name: "Domain"
  brief: "domain type"
  description: "Domain type"
  members {
    name: "DOMAIN_MISSING"
    doc: ""
    type: ""
  }
  members {
    name: "DOMAIN_IPV4"
    doc: ""
    type: ""
  }
  members {
    name: "DOMAIN_IPV6"
    doc: ""
    type: ""
  }
  members {
    name: "DOMAIN_UNKNOWN"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "Type"
  brief: "socket type"
  description: "Socket type"
  members {
    name: "TYPE_STREAM"
    doc: ""
    type: ""
  }
  members {
    name: "TYPE_DGRAM"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "Protocol"
  brief: "network protocol"
  description: "Network protocol"
  members {
    name: "PROTOCOL_TCP"
    doc: ""
    type: ""
  }
  members {
    name: "PROTOCOL_UDP"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "ShutdownType"
  brief: "socket shutdown type"
  description: "Socket shutdown type"
  members {
    name: "SHUTDOWNTYPE_READ"
    doc: ""
    type: ""
  }
  members {
    name: "SHUTDOWNTYPE_WRITE"
    doc: ""
    type: ""
  }
  members {
    name: "SHUTDOWNTYPE_READWRITE"
    doc: ""
    type: ""
  }
}
elements {
  type: ENUM
  name: "Result"
  brief: "socket result"
  description: "Socket result"
  members {
    name: "RESULT_OK"
    doc: "0"
    type: ""
  }
  members {
    name: "RESULT_ACCES"
    doc: "-1"
    type: ""
  }
  members {
    name: "RESULT_AFNOSUPPORT"
    doc: "-2"
    type: ""
  }
  members {
    name: "RESULT_WOULDBLOCK"
    doc: "-3"
    type: ""
  }
  members {
    name: "RESULT_BADF"
    doc: "-4"
    type: ""
  }
  members {
    name: "RESULT_CONNRESET"
    doc: "-5"
    type: ""
  }
  members {
    name: "RESULT_DESTADDRREQ"
    doc: "-6"
    type: ""
  }
  members {
    name: "RESULT_FAULT"
    doc: "-7"
    type: ""
  }
  members {
    name: "RESULT_HOSTUNREACH"
    doc: "-8"
    type: ""
  }
  members {
    name: "RESULT_INTR"
    doc: "-9"
    type: ""
  }
  members {
    name: "RESULT_INVAL"
    doc: "-10"
    type: ""
  }
  members {
    name: "RESULT_ISCONN"
    doc: "-11"
    type: ""
  }
  members {
    name: "RESULT_MFILE"
    doc: "-12"
    type: ""
  }
  members {
    name: "RESULT_MSGSIZE"
    doc: "-13"
    type: ""
  }
  members {
    name: "RESULT_NETDOWN"
    doc: "-14"
    type: ""
  }
  members {
    name: "RESULT_NETUNREACH"
    doc: "-15"
    type: ""
  }
  members {
    name: "RESULT_NOBUFS"
    doc: "-17"
    type: ""
  }
  members {
    name: "RESULT_NOTCONN"
    doc: "-20"
    type: ""
  }
  members {
    name: "RESULT_NOTSOCK"
    doc: "-22"
    type: ""
  }
  members {
    name: "RESULT_OPNOTSUPP"
    doc: "-23"
    type: ""
  }
  members {
    name: "RESULT_PIPE"
    doc: "-24"
    type: ""
  }
  members {
    name: "RESULT_PROTONOSUPPORT"
    doc: "-25"
    type: ""
  }
  members {
    name: "RESULT_PROTOTYPE"
    doc: "-26"
    type: ""
  }
  members {
    name: "RESULT_TIMEDOUT"
    doc: "-27"
    type: ""
  }
  members {
    name: "RESULT_ADDRNOTAVAIL"
    doc: "-28"
    type: ""
  }
  members {
    name: "RESULT_CONNREFUSED"
    doc: "-29"
    type: ""
  }
  members {
    name: "RESULT_ADDRINUSE"
    doc: "-30"
    type: ""
  }
  members {
    name: "RESULT_CONNABORTED"
    doc: "-31"
    type: ""
  }
  members {
    name: "RESULT_INPROGRESS"
    doc: "-32"
    type: ""
  }
  members {
    name: "RESULT_HOST_NOT_FOUND"
    doc: "-100"
    type: ""
  }
  members {
    name: "RESULT_TRY_AGAIN"
    doc: "-101"
    type: ""
  }
  members {
    name: "RESULT_NO_RECOVERY"
    doc: "-102"
    type: ""
  }
  members {
    name: "RESULT_NO_DATA"
    doc: "-103"
    type: ""
  }
  members {
    name: "RESULT_UNKNOWN"
    doc: "-1000"
    type: ""
  }
}
elements {
  type: STRUCT
  name: "Address"
  brief: "network address"
  description: "Network addresses were previously represented as an uint32_t, but in\norder to support IPv6 the internal representation was changed to a struct."
}
elements {
  type: FUNCTION
  name: "New"
  brief: "create a socket"
  description: "Create a new socket. Corresponds to BSD socket function socket()."
  returnvalues {
    name: ""
    doc: "RESULT_OK on succcess"
    types: "Result"
  }
  parameters {
    name: "type"
    doc: "Socket type"
    types: "Type"
  }
  parameters {
    name: "protocol"
    doc: "Protocol"
    types: "Protocol"
  }
  parameters {
    name: "socket"
    doc: "Pointer to socket"
    types: "Socket*"
  }
}
elements {
  type: FUNCTION
  name: "Delete"
  brief: "delete a socket"
  description: "Delete a socket. Corresponds to BSD socket function close()"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to close"
    types: "Socket"
  }
}
elements {
  type: FUNCTION
  name: "Connect"
  brief: "make a connection"
  description: "Initiate a connection on a socket"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to initiate connection on"
    types: "Socket"
  }
  parameters {
    name: "address"
    doc: "Address to connect to"
    types: "Address"
  }
  parameters {
    name: "port"
    doc: "Port to connect to"
    types: "int"
  }
}
elements {
  type: FUNCTION
  name: "Shutdown"
  brief: "close socket"
  description: "Shutdown part of a socket connection"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to shutdown connection ow"
    types: "Socket"
  }
  parameters {
    name: "how"
    doc: "Shutdown type"
    types: "ShutdownType"
  }
}
elements {
  type: FUNCTION
  name: "GetFD"
  brief: "get underlying file descriptor"
  description: "Get underlying file descriptor"
  returnvalues {
    name: ""
    doc: "file-descriptor"
    types: "int"
  }
  parameters {
    name: "socket"
    doc: "socket to get fd for"
    types: "Socket"
  }
}
elements {
  type: FUNCTION
  name: "SetReuseAddress"
  brief: "Set reuse socket address option on socket. Socket ..."
  description: "Set reuse socket address option on socket. Socket option SO_REUSEADDR on most platforms"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to set reuse address to"
    types: "Socket"
  }
  parameters {
    name: "reuse"
    doc: "True if reuse"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "SetBroadcast"
  brief: "Set broadcast address option on socket. Socket opt..."
  description: "Set broadcast address option on socket. Socket option SO_BROADCAST on most platforms."
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to set reuse address to"
    types: "Socket"
  }
  parameters {
    name: "broadcast"
    doc: "True if broadcast"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "SetBlocking"
  brief: "Set blocking option on a socket"
  description: "Set blocking option on a socket"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to set blocking on"
    types: "Socket"
  }
  parameters {
    name: "blocking"
    doc: "True to block"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "SetNoDelay"
  brief: "Set TCP_NODELAY on socket"
  description: "Set TCP_NODELAY on socket"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to set TCP_NODELAY on"
    types: "Socket"
  }
  parameters {
    name: "no_delay"
    doc: "True for no delay"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "SetQuickAck"
  brief: "Set TCP_QUICKACK on socket"
  description: "Set TCP_QUICKACK on socket"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to set TCP_QUICKACK on"
    types: "Socket"
  }
  parameters {
    name: "use_quick_ack"
    doc: "False to disable quick ack"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "SetSendTimeout"
  brief: "Set socket send timeout"
  description: "Set socket send timeout"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "socket"
    types: "Socket"
  }
  parameters {
    name: "timeout"
    doc: "timeout in microseconds"
    types: "uint64_t"
  }
}
elements {
  type: FUNCTION
  name: "SetReceiveTimeout"
  brief: "Set socket receive timeout"
  description: "Set socket receive timeout"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "socket"
    types: "Socket"
  }
  parameters {
    name: "timeout"
    doc: "timeout in microseconds"
    types: "uint64_t"
  }
}
elements {
  type: FUNCTION
  name: "Send"
  brief: "Send a message on a socket"
  description: "Send a message on a socket"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to send a message on"
    types: "Socket"
  }
  parameters {
    name: "buffer"
    doc: "Buffer to send"
    types: "void*"
  }
  parameters {
    name: "length"
    doc: "Length of buffer to send"
    types: "int"
  }
  parameters {
    name: "sent_bytes[out]"
    doc: "Number of bytes sent (result)"
    types: "int*"
  }
}
elements {
  type: FUNCTION
  name: "Receive"
  brief: "Receive data on a socket"
  description: "Receive data on a socket"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "socket"
    doc: "Socket to receive data on"
    types: "Socket"
  }
  parameters {
    name: "buffer[out]"
    doc: "Buffer to receive to"
    types: "void*"
  }
  parameters {
    name: "length"
    doc: "Receive buffer length"
    types: "int"
  }
  parameters {
    name: "received_bytes[out]"
    doc: "Number of received bytes (result)"
    types: "int*"
  }
}
elements {
  type: FUNCTION
  name: "GetHostByName"
  brief: "get host by name"
  description: "Get host by name"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "name"
    doc: "Hostname to resolve"
    types: "const char*"
  }
  parameters {
    name: "address"
    doc: "Host address result"
    types: "Address*"
  }
  parameters {
    name: "ipv4"
    doc: "Whether or not to search for IPv4 addresses"
    types: "bool"
  }
  parameters {
    name: "ipv6"
    doc: "Whether or not to search for IPv6 addresses"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "GetHostByName"
  brief: "get host by name with timeout and cancelability"
  description: "Get host by name with timeout and cancelability"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "name"
    doc: "Hostname to resolve"
    types: "const char*"
  }
  parameters {
    name: "address"
    doc: "Host address result"
    types: "Address*"
  }
  parameters {
    name: "timeout"
    doc: "Timeout in microseconds"
    types: "uint64_t"
  }
  parameters {
    name: "cancelflag"
    doc: "if non null and set, will abort the call"
    types: "int*"
  }
  parameters {
    name: "ipv4"
    doc: "Whether or not to search for IPv4 addresses"
    types: "bool"
  }
  parameters {
    name: "ipv6"
    doc: "Whether or not to search for IPv6 addresses"
    types: "bool"
  }
}
elements {
  type: FUNCTION
  name: "ResultToString"
  brief: "Convert result value to string"
  description: "Convert result value to string"
  returnvalues {
    name: ""
    doc: "Result as string"
    types: "const char*"
  }
  parameters {
    name: "result"
    doc: "Result to convert"
    types: "Result"
  }
}
elements {
  type: ENUM
  name: "SelectorKind"
  brief: "Selector kind"
  description: "Selector kind"
  members {
    name: "SELECTOR_KIND_READ"
    doc: ""
    type: ""
  }
  members {
    name: "SELECTOR_KIND_WRITE"
    doc: ""
    type: ""
  }
  members {
    name: "SELECTOR_KIND_EXCEPT"
    doc: ""
    type: ""
  }
}
elements {
  type: STRUCT
  name: "Selector"
  brief: "Selector"
  description: "Selector"
}
elements {
  type: FUNCTION
  name: "SelectorClear"
  brief: "Clear selector for socket. Similar to FD_CLR"
  description: "Clear selector for socket. Similar to FD_CLR"
  returnvalues {
    name: ""
    doc: ""
    types: "void"
  }
  parameters {
    name: "selector"
    doc: "Selector"
    types: "Selector*"
  }
  parameters {
    name: "selector_kind"
    doc: "Kind to clear"
    types: "SelectorKind"
  }
  parameters {
    name: "socket"
    doc: "Socket to clear"
    types: "Socket"
  }
}
elements {
  type: FUNCTION
  name: "SelectorSet"
  brief: "Set selector for socket. Similar to FD_SET"
  description: "Set selector for socket. Similar to FD_SET"
  returnvalues {
    name: ""
    doc: ""
    types: "void"
  }
  parameters {
    name: "selector"
    doc: "Selector"
    types: "Selector*"
  }
  parameters {
    name: "selector_kind"
    doc: "Kind to clear"
    types: "SelectorKind"
  }
  parameters {
    name: "socket"
    doc: "Socket to set"
    types: "Socket"
  }
}
elements {
  type: FUNCTION
  name: "SelectorIsSet"
  brief: "Check if selector is set. Similar to FD_ISSET"
  description: "Check if selector is set. Similar to FD_ISSET"
  returnvalues {
    name: ""
    doc: "True if set."
    types: "bool"
  }
  parameters {
    name: "selector"
    doc: "Selector"
    types: "Selector*"
  }
  parameters {
    name: "selector_kind"
    doc: "Selector kind"
    types: "SelectorKind"
  }
  parameters {
    name: "socket"
    doc: "Socket to check for"
    types: "Socket"
  }
}
elements {
  type: FUNCTION
  name: "SelectorZero"
  brief: "Clear selector (all kinds). Similar to FD_ZERO"
  description: "Clear selector (all kinds). Similar to FD_ZERO"
  returnvalues {
    name: ""
    doc: ""
    types: "void"
  }
  parameters {
    name: "selector"
    doc: "Selector"
    types: "Selector*"
  }
}
elements {
  type: FUNCTION
  name: "Select"
  brief: "Select for pending data"
  description: "Select for pending data"
  returnvalues {
    name: ""
    doc: "RESULT_OK on success"
    types: "Result"
  }
  parameters {
    name: "selector"
    doc: "Selector"
    types: "Selector*"
  }
  parameters {
    name: "timeout"
    doc: "Timeout. For blocking pass -1. (microseconds)"
    types: "int"
  }
}
info {
  namespace: "dmSocket"
  name: "Socket"
  brief: "SDK Socket API documentation"
  description: "Socket functions."
  path: "engine/dlib/src/dmsdk/dlib/socket.h"
  file: "dmsdk/dlib/socket.h"
}
