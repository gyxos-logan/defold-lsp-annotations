- desc: Callback when iterating over the properties for a component.
  name: ComponentIterProperties
  parameters:
  - desc: the property iterator
    name: pit
    type: dmGameObject::SceneNodePropertyIterator
  - desc: the scene node
    name: node
    type: dmGameObject::SceneNode*
  type: function
- desc: Get the component type index. Used for with e.g. dmGameObject::GetWorld()/GetContext()
  name: ComponentTypeGetTypeIndex
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  returns:
  - desc: The type index.
    type: uint32_t
  type: function
- desc: Set the new world callback. Called when a collection (i.e. a "world") is created.
  name: ComponentTypeSetNewWorldFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentNewWorld
  type: function
- desc: Set the world destroy callback. Called when a collection (i.e. a "world")
    is destroyed.
  name: ComponentTypeSetDeleteWorldFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentDeleteWorld
  type: function
- desc: Set the component create callback. Called when a component instance is created.
  name: ComponentTypeSetCreateFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentCreate
  type: function
- desc: Set the component destroy callback. Called when a component instance is destroyed.
  name: ComponentTypeSetDestroyFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentDestroy
  type: function
- desc: Set the component init callback. Called on each gameobject's components, during
    a gameobject's initialization.
  name: ComponentTypeSetInitFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentInit
  type: function
- desc: Set the component finalize callback. Called on each gameobject's components,
    during a gameobject's finalization.
  name: ComponentTypeSetFinalFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentFinal
  type: function
- desc: Set the component add-to-update callback. Called for each component instal,
    when the game object is spawned.
  name: ComponentTypeSetAddToUpdateFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentAddToUpdate
  type: function
- desc: Set the component get callback. Called when the scripts want to retrieve the
    individual component user data given an url.
  name: ComponentTypeSetGetFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentGet
  type: function
- desc: Set the component render callback. Called when it's time to render all component
    instances.
  name: ComponentTypeSetRenderFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentsRender
  type: function
- desc: Set the component update callback. Called when it's time to update all component
    instances.
  name: ComponentTypeSetUpdateFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentsUpdate
  type: function
- desc: Set the component update callback. Called when it's time to update all component
    instances.
  name: ComponentTypeSetFixedUpdateFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentsFixedUpdate
  type: function
- desc: Set the component post update callback. Called for each collection after the
    update, before the render.
  name: ComponentTypeSetPostUpdateFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentsPostUpdate
  type: function
- desc: Set the component on-message callback. Called multiple times per frame, to
    flush messages.
  name: ComponentTypeSetOnMessageFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentOnMessage
  type: function
- desc: Set the component on-input callback. Called once per frame, before the Update
    function.
  name: ComponentTypeSetOnInputFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentOnInput
  type: function
- desc: Set the component on-reload callback. Called when the resource of a component
    instance is reloaded.
  name: ComponentTypeSetOnReloadFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentOnReload
  type: function
- desc: Set the component set properties callback. Called when the component instance
    is being spwned.
  name: ComponentTypeSetSetPropertiesFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentSetProperties
  type: function
- desc: Set the component get property callback. Called when accessing a property
    via `go.get()`
  name: ComponentTypeSetGetPropertyFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentGetProperty
  type: function
- desc: Set the component set property callback. Called when accessing a property
    via `go.set()`
  name: ComponentTypeSetSetPropertyFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: callback
    name: fn
    type: ComponentSetProperty
  type: function
- desc: Set the component type global context. Usually set when registering the component
    type.
  name: ComponentTypeSetContext
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: component type global context
    name: context
    type: void*
  type: function
- desc: get the component type global context
  name: ComponentTypeGetContext
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  returns:
  - desc: component type global context
    type: void*
  type: function
- desc: 'Set the component type transform dependency flag.

    If this flag is set, it might trigger an dmGameObject::UpdateTransforms() (if
    there are dirty transforms)'
  name: ComponentTypeSetReadsTransforms
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: transform dependency flag
    name: reads_transforms
    type: bool
  type: function
- desc: Set the component type prio order. Defines the update order of the component
    types.
  name: ComponentTypeSetPrio
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: prio order
    name: prio
    type: uint16_t
  type: function
- desc: Set the component type need for a per component instance user data. Defaults
    to true.
  name: ComponentTypeSetHasUserData
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: does each component instance need user data
    name: has_user_data
    type: bool
  type: function
- desc: set the component child iterator function. Called during inspection
  name: ComponentTypeSetChildIteratorFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: child iterator function
    name: fn
    type: FIteratorChildren
  type: function
- desc: set the component property iterator function. Called during inspection
  name: ComponentTypeSetPropertyIteratorFn
  parameters:
  - desc: the type
    name: type
    type: ComponentType*
  - desc: property iterator function
    name: fn
    type: FIteratorProperties
  type: function
- desc: Context used when registering a new component type
  name: ComponentTypeCreateCtx
  type: struct
- desc: Value for an invalid instance index, this must be the same as defined in gamesys_ddf.proto
    for Create#index.
  name: INVALID_INSTANCE_POOL_INDEX
  parameters: []
  type: function
- desc: Gameobject instance handle
  name: HInstance
  type: typedef
- desc: Script handle
  name: HScript
  type: typedef
- desc: Script instance handle
  name: HScriptInstance
  type: typedef
- desc: Collection register.
  name: HRegister
  type: typedef
- desc: Gameobject collection handle
  name: HCollection
  type: typedef
- desc: Gameobject prototype handle
  name: HPrototype
  type: typedef
- desc: Gameobject properties handle
  name: HProperties
  type: typedef
- desc: Result enumeration.
  name: Result
  type: enum
- desc: Property types.
  name: PropertyType
  type: enum
- desc: Property result.
  name: PropertyResult
  type: enum
- desc: Playback type enum
  name: Playback
  type: enum
- desc: Create result enum.
  name: CreateResult
  type: enum
- desc: Update result enum.
  name: UpdateResult
  type: enum
- desc: Type of property value
  name: PropertyValueType
  type: enum
- desc: Parameters variant that holds key or index for a propertys data structure.
  name: PropertyOptions
  type: struct
- desc: Property variant that holds the data for a variable
  name: PropertyVar
  type: struct
- desc: 'Description of a property.


    If the property is externally mutable, m_ValuePtr points to the value and its
    length is m_ElementCount.

    m_Variant always reflects the value.'
  name: PropertyDesc
  type: struct
- desc: Update context
  name: UpdateContext
  type: struct
- desc: Container of input related information.
  name: InputAction
  type: struct
- desc: Input result enum
  name: InputResult
  type: enum
- desc: Retrieve the message socket for the specified collection.
  name: GetMessageSocket
  parameters:
  - desc: Collection handle
    name: collection
    type: dmGameObject::HCollection
  returns:
  - desc: The message socket of the specified collection
    type: dmMessage::HSocket
  type: function
- desc: Retrieve a collection from the specified instance
  name: GetCollection
  parameters:
  - desc: Game object instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: The collection the specified instance belongs to
    type: dmGameObject::HInstance
  type: function
- desc: Create a new gameobject instance
  name: New
  parameters:
  - desc: Gameobject collection
    name: collection
    type: dmGameObject::HCollection
  - desc: '|type: const char*] Prototype file name. May be 0.'
    name: prototype_name
    type: ''
  returns:
  - desc: New gameobject instance. NULL if any error occured
    type: dmGameObject::HInstance
  type: function
- desc: Delete gameobject instance
  name: Delete
  parameters:
  - desc: Gameobject collection
    name: collection
    type: dmGameObject::HCollection
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  - desc: If true, delete child hierarchy recursively in child to parent order (leaf
      first)
    name: recursive
    type: bool
  type: function
- desc: Construct a hash of an instance id based on the index provided.
  name: ConstructInstanceId
  parameters:
  - desc: The index to base the id off of.
    name: index
    type: uint32_t
  returns:
  - desc: hash of the instance id constructed.
    type: dmhash_t
  type: function
- desc: Retrieve an instance index from the index pool for the collection.
  name: AcquireInstanceIndex
  parameters:
  - desc: Collection from which to retrieve the instance index.
    name: collection
    type: dmGameObject::HColleciton
  returns:
  - desc: index from the index pool of collection.
    type: uint32_t
  type: function
- desc: Assign an index to the instance, only if the instance is not null.
  name: AssignInstanceIndex
  parameters:
  - desc: The index to assign.
    name: index
    type: uint32_t
  - desc: The instance that should be assigned the index.
    name: instance
    type: dmGameObject::HInstance
  type: function
- desc: Get instance identifier
  name: GetIdentifier
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: Identifier. dmGameObject::UNNAMED_IDENTIFIER if not set.
    type: ''
  type: function
- desc: Set instance identifier. Must be unique within the collection.
  name: SetIdentifier
  parameters:
  - desc: Collection
    name: collection
    type: dmGameObject::HCollection
  - desc: Instance
    name: instance
    type: dmGameObject::HInstance
  - desc: Identifier
    name: identifier
    type: dmhash_t
  returns:
  - desc: RESULT_OK on success
    type: dmGameObject::Result
  type: function
- desc: Get component id from component index.
  name: GetComponentId
  parameters:
  - desc: Instance
    name: instance
    type: dmGameObject::HInstance
  - desc: Component index
    name: component_index
    type: uint16_t
  - desc: '[type: dmhash_t* Component id as out-argument'
    name: component_id
    type: ''
  returns:
  - desc: RESULT_OK if the comopnent was found
    type: dmGameObject::Result
  type: function
- desc: Set gameobject instance position
  name: SetPosition
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  - desc: New Position
    name: position
    type: dmGameObject::Point3
  type: function
- desc: Get gameobject instance position
  name: GetPosition
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: Position
    type: ''
  type: function
- desc: Set gameobject instance rotation
  name: SetRotation
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  - desc: New Position
    name: position
    type: ''
  type: function
- desc: Get gameobject instance rotation
  name: GetRotation
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: rotation
    type: ''
  type: function
- desc: Set gameobject instance uniform scale
  name: SetScale
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  - desc: New uniform scale
    name: scale
    type: ''
  type: function
- desc: Set gameobject instance non-uniform scale
  name: SetScale
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  - desc: New uniform scale
    name: scale
    type: ''
  type: function
- desc: Get gameobject instance uniform scale
  name: GetUniformScale
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: Uniform scale
    type: ''
  type: function
- desc: Get gameobject instance scale
  name: GetScale
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: Non-uniform scale
    type: ''
  type: function
- desc: Get gameobject instance world position
  name: GetWorldPosition
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: World position
    type: ''
  type: function
- desc: Get gameobject instance world rotation
  name: GetWorldRotation
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: World rotation
    type: ''
  type: function
- desc: Get game object instance world transform
  name: GetWorldScale
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: World scale
    type: ''
  type: function
- desc: Get game object instance uniform scale
  name: GetWorldUniformScale
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: World uniform scale
    type: ''
  type: function
- desc: Get game object instance world transform as Matrix4.
  name: GetWorldMatrix
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: World transform matrix.
    type: ''
  type: function
- desc: Get game object instance world transform
  name: GetWorldTransform
  parameters:
  - desc: Gameobject instance
    name: instance
    type: dmGameObject::HInstance
  returns:
  - desc: World transform
    type: ''
  type: function
- desc: 'Set whether the instance should be flagged as a bone.

    Instances flagged as bones can have their transforms updated in a batch through
    SetBoneTransforms.

    Used for animated skeletons.'
  name: SetBone
  parameters:
  - desc: Instance
    name: instance
    type: HImstance
  - desc: true if the instance is a bone
    name: bone
    type: bool
  type: function
- desc: Check whether the instance is flagged as a bone.
  name: IsBone
  parameters:
  - desc: Instance
    name: instance
    type: HImstance
  returns:
  - desc: True if flagged as a bone
    type: bool
  type: function
- desc: 'Set the local transforms recursively of all instances flagged as bones, starting
    with component with id.

    The order of the transforms is depth-first.'
  name: SetBoneTransforms
  parameters:
  - desc: First Instance of the hierarchy to set
    name: instance
    type: HImstance
  - desc: the transform for component root
    name: component_transform
    type: dmTransform::Transform
  - desc: Array of transforms to set depth-first for the bone instances
    name: transforms
    type: ''
  - desc: Size of the transforms array
    name: transform_count
    type: ''
  returns:
  - desc: of instances found
    type: ''
  type: function
- desc: 'Recursively delete all instances flagged as bones under the given parent
    instance.

    The order of deletion is depth-first, so that the children are deleted before
    the parents.'
  name: DeleteBones
  parameters:
  - desc: Parent instance of the hierarchy
    name: parent
    type: HInstance
  type: function
- desc: Opaque struct that holds info about the current node
  name: SceneNode
  type: struct
- desc: Opaque struct that holds info about the current position when traversing the
    scene
  name: SceneNodeIterator
  type: struct
- desc: Gets the top node of the whole game (the main collection)
  name: TraverseGetRoot
  parameters:
  - desc: the full gameobject register
    name: regist
    type: dmGameObject::HRegister
  - desc: the node to inspect
    name: node
    type: dmGameObject::HRegister
  returns:
  - desc: True if successful
    type: bool
  type: function
- desc: Get a scene node iterator for the nodes' children
  name: TraverseIterateChildren
  parameters:
  - desc: the parent node
    name: node
    type: dmGameObject::SceneNode*
  returns:
  - desc: the iterator
    type: dmGameObject::SceneNodeIterator
  type: function
- desc: Step a scene node iterator to the next sibling
  name: TraverseIterateNext
  parameters:
  - desc: the iterator
    name: it
    type: dmGameObject::SceneNodeIterator*
  returns:
  - desc: true if successful. false if the iterator is finished
    type: bool
  type: function
- desc: scene node property types
  name: SceneNodePropertyType
  type: enum
- desc: Struct that holds info about the current position when traversing the scene
  name: SceneNodeProperty
  type: struct
- desc: Holds the property
  name: SceneNodePropertyIterator
  type: struct
- desc: Create a scene node traversal property iterator
  name: TraverseIterateProperties
  parameters:
  - desc: the node to inspect
    name: node
    type: dmGameObject::SceneNode*
  returns:
  - desc: the property iterator
    type: dmGameObject::SceneNodePropertyIterator
  type: function
- desc: Steps the scene node traversal property iterator to the next property
  name: TraverseIteratePropertiesNext
  parameters:
  - desc: the iterator
    name: it
    type: dmGameObject::SceneNodePropertyIterator*
  returns:
  - desc: True if the iterator it valid, false if the iterator is finished.
    type: bool
  type: function
- desc: 'Get component user data from a url.

    The object referenced by the url must be in the same collection as the caller.'
  name: GetComponentFromLua
  parameters:
  - desc: Lua state
    name: L
    type: lua_State*
  - desc: index to argument (a url)
    name: index
    type: lua_State*
  - desc: the call will fail if the found component does not have the specified extension
    name: component_type
    type: const char*
  - desc: The world associated owning the component. May be 0
    name: world
    type: void**
  - desc: The component data associated with the url. May be 0
    name: component
    type: void**
  - desc: The resolved url. May be 0
    name: url
    type: dmMessage::URL*
  type: function
- desc: Sends a script message. Wraps the message in a dmGameSystemDDF::ScriptMessage
    struct.
  name: dmScript::PostDDF
  parameters:
  - desc: The ddf message to send
    name: message
    type: TDDFType*
  - desc: The sender
    name: sender
    type: dmMessage::Message*
  - desc: The receiver
    name: receiver
    type: dmMessage::Message*
  - desc: The function ref. 0 wil cause the "on_message" to be called
    name: function_ref
    type: int
  - desc: call dmScript::UnrefInInstance on the function_ref after the dmScript::PCall
      is made
    name: unref_function_after_call
    type: bool
  returns:
  - desc: true if successful
    type: bool
  type: function
- desc: '[file:<dmsdk/gameobject/script.h>]'
  members: []
  name: dmGameObject
  type: table
