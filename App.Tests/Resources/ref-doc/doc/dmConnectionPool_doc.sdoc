elements {
  type: TYPEDEF
  name: "HPool"
  brief: "Connection pool handle"
  description: "Connection pool handle"
}
elements {
  type: TYPEDEF
  name: "HConnection"
  brief: "Connection handle"
  description: "Connection handle"
}
elements {
  type: ENUM
  name: "dmConnectionPool::Result"
  brief: "result enumeration"
  description: "Result enumeration."
  members {
    name: "dmConnectionPool::RESULT_OK"
    doc: "0"
    type: ""
  }
  members {
    name: "dmConnectionPool::RESULT_OUT_OF_RESOURCES"
    doc: "-1"
    type: ""
  }
  members {
    name: "dmConnectionPool::RESULT_SOCKET_ERROR"
    doc: "-2"
    type: ""
  }
  members {
    name: "dmConnectionPool::RESULT_HANDSHAKE_FAILED"
    doc: "-3"
    type: ""
  }
  members {
    name: "dmConnectionPool::RESULT_SHUT_DOWN"
    doc: "-4"
    type: ""
  }
}
elements {
  type: STRUCT
  name: "dmConnectionPool::Params"
  brief: "Creation parameters"
  description: "Creation parameters"
  members {
    name: "m_MaxConnections"
    doc: "Max connection in pool"
    type: "int"
  }
  members {
    name: "m_MaxKeepAlive"
    doc: "Default max-keep-alive time in seconds"
    type: "int"
  }
}
elements {
  type: FUNCTION
  name: "dmConnectionPool::New"
  brief: "Create a new connection pool"
  description: "Create a new connection pool"
  returnvalues {
    name: "dmConnectionPool::RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "params"
    doc: ""
    types: ""
  }
  parameters {
    name: "pool"
    doc: "pool (out)"
    types: "dmConnectionPool::HPool*"
  }
}
elements {
  type: FUNCTION
  name: "dmConnectionPool::Delete"
  brief: "Delete connnection pool"
  description: "Delete connnection pool"
  returnvalues {
    name: "dmConnectionPool::RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "pool"
    doc: "pool"
    types: "dmConnectionPool::HPool"
  }
}
elements {
  type: FUNCTION
  name: "dmConnectionPool::Dial"
  brief: "Connection to a host/port"
  description: "Connection to a host/port"
  returnvalues {
    name: "dmConnectionPool::RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "pool"
    doc: "pool"
    types: "dmConnectionPool::HPool"
  }
  parameters {
    name: "host"
    doc: "host"
    types: "const char*"
  }
  parameters {
    name: "port"
    doc: "port"
    types: "uint16_t"
  }
  parameters {
    name: "ssl"
    doc: "true for ssl connection"
    types: "bool"
  }
  parameters {
    name: "timeout"
    doc: "The timeout (micro seconds) for the connection and ssl handshake"
    types: "int"
  }
  parameters {
    name: "connection"
    doc: "connection (out)"
    types: "dmConnectionPool::HConnection*"
  }
  parameters {
    name: "sock_res"
    doc: "socket-result code on failure"
    types: "dmSocket::Result*"
  }
}
elements {
  type: FUNCTION
  name: "dmConnectionPool::Dial"
  brief: "Connection to a host/port"
  description: "Connection to a host/port"
  returnvalues {
    name: "dmConnectionPool::RESULT_OK"
    doc: "on success"
    types: ""
  }
  parameters {
    name: "pool"
    doc: "pool"
    types: "dmConnectionPool::HPool"
  }
  parameters {
    name: "host"
    doc: "host"
    types: "const char*"
  }
  parameters {
    name: "port"
    doc: "port"
    types: "uint16_t"
  }
  parameters {
    name: "ssl"
    doc: "true for ssl connection"
    types: "bool"
  }
  parameters {
    name: "timeout"
    doc: "The timeout (micro seconds) for the connection and ssl handshake"
    types: "int"
  }
  parameters {
    name: "cancelflag"
    doc: "If set and not null, will make the request early out"
    types: "int*"
  }
  parameters {
    name: "connection"
    doc: "connection (out)"
    types: "dmConnectionPool::HConnection*"
  }
  parameters {
    name: "sock_res"
    doc: "socket-result code on failure"
    types: "dmSocket::Result*"
  }
}
elements {
  type: FUNCTION
  name: "dmConnectionPool::Return"
  brief: "Return connection to pool"
  description: "Return connection to pool"
  parameters {
    name: "pool"
    doc: "pool"
    types: "dmConnectionPool::HPool"
  }
  parameters {
    name: "connection"
    doc: ""
    types: "dmConnectionPool::HConnection"
  }
}
elements {
  type: FUNCTION
  name: "dmConnectionPool::Close"
  brief: "Close connection. Use this function whenever an er..."
  description: "Close connection. Use this function whenever an error occur in eg http."
  parameters {
    name: "pool"
    doc: "pool"
    types: "dmConnectionPool::HPool"
  }
  parameters {
    name: "connection"
    doc: ""
    types: "dmConnectionPool::HConnection"
  }
}
elements {
  type: FUNCTION
  name: "dmConnectionPool::GetSocket"
  brief: "Get socket for connection"
  description: "Get socket for connection"
  returnvalues {
    name: ""
    doc: "on success"
    types: "dmSocket::Socket"
  }
  parameters {
    name: "pool"
    doc: "pool"
    types: "dmConnectionPool::HPool"
  }
  parameters {
    name: "connection"
    doc: ""
    types: "dmConnectionPool::HConnection"
  }
}
elements {
  type: FUNCTION
  name: "dmConnectionPool::GetSSLSocket"
  brief: "Get secure socket."
  description: "Get secure socket."
  returnvalues {
    name: ""
    doc: "on success"
    types: "dmSSLSocket::Socket"
  }
  parameters {
    name: "pool"
    doc: "pool"
    types: "dmConnectionPool::HPool"
  }
  parameters {
    name: "connection"
    doc: ""
    types: "dmConnectionPool::HConnection"
  }
}
elements {
  type: FUNCTION
  name: "dmConnectionPool::Shutdown"
  brief: "Shuts down all open sockets in the pool and block ..."
  description: "Shuts down all open sockets in the pool and block new connection attempts. The function can be\ncalled repeatedly on the same pool until it returns no more connections in use."
  returnvalues {
    name: "current"
    doc: "number of connections in use"
    types: ""
  }
  parameters {
    name: "pool"
    doc: "pool"
    types: "dmConnectionPool::HPool"
  }
  parameters {
    name: "how"
    doc: "shutdown type to pass to socket shutdown function"
    types: "dmSocket::ShutdownType"
  }
}
info {
  namespace: "dmConnectionPool"
  name: "Connection Pool"
  brief: "SDK Connection pool API documentation"
  description: "Connection pool"
  path: "engine/dlib/src/dmsdk/dlib/connection_pool.h"
  file: "dmsdk/dlib/connection_pool.h"
}
