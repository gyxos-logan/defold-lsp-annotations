elements {
  type: ENUM
  name: "dmMessage::Result"
  brief: "Result enum"
  description: "Result enum"
  members {
    name: "RESULT_OK"
    doc: "= 0"
    type: ""
  }
  members {
    name: "RESULT_SOCKET_EXISTS"
    doc: "= -1"
    type: ""
  }
  members {
    name: "RESULT_SOCKET_NOT_FOUND"
    doc: "= -2"
    type: ""
  }
  members {
    name: "RESULT_SOCKET_OUT_OF_RESOURCES"
    doc: "= -3"
    type: ""
  }
  members {
    name: "RESULT_INVALID_SOCKET_NAME"
    doc: "= -4"
    type: ""
  }
  members {
    name: "RESULT_MALFORMED_URL"
    doc: "= -5"
    type: ""
  }
  members {
    name: "RESULT_NAME_OK_SOCKET_NOT_FOUND"
    doc: "= -6"
    type: ""
  }
}
elements {
  type: TYPEDEF
  name: "HSocket"
  brief: "Socket handle"
  description: "Socket handle"
}
elements {
  type: STRUCT
  name: "dmMessage::URL"
  brief: "URL specifying a sender/receiver of messages"
  description: "URL specifying a sender/receiver of messages"
}
elements {
  type: TYPEDEF
  name: "dmMessage::StringURL"
  brief: "Helper struct for parsing a string of the form \"so..."
  description: "Helper struct for parsing a string of the form \"socket:path#fragment\""
  members {
    name: "m_Socket"
    doc: "The socket"
    type: "const char*"
  }
  members {
    name: "m_SocketSize"
    doc: "The socket length"
    type: "uint32_t"
  }
  members {
    name: "m_Path"
    doc: "The path"
    type: "const char*"
  }
  members {
    name: "m_PathSize"
    doc: "The path length"
    type: "uint32_t"
  }
  members {
    name: "m_Fragment"
    doc: "The fragment"
    type: "const char*"
  }
  members {
    name: "m_FragmentSize"
    doc: "The fragment length"
    type: "uint32_t"
  }
}
elements {
  type: FUNCTION
  name: "ResetUrl"
  brief: "Resets the given URL to default values."
  description: "Resets the given URL to default values."
  parameters {
    name: "url"
    doc: "URL to reset"
    types: "dmMessage::URL"
  }
}
elements {
  type: FUNCTION
  name: "GetSocket"
  brief: "Get the message socket"
  description: "Get the message socket"
  returnvalues {
    name: "socket"
    doc: ""
    types: "dmMessage::HSocket"
  }
  parameters {
    name: "url"
    doc: "url"
    types: "dmMessage::URL"
  }
}
elements {
  type: FUNCTION
  name: "SetSocket"
  brief: "Set the socket"
  description: "Set the socket"
  parameters {
    name: "url"
    doc: "url"
    types: "dmMessage::URL"
  }
  parameters {
    name: "socket"
    doc: ""
    types: "dmMessage::HSocket"
  }
}
elements {
  type: FUNCTION
  name: "IsSocketValid"
  brief: "Tests if a socket is valid (not deleted)."
  description: "Tests if a socket is valid (not deleted)."
  returnvalues {
    name: "result"
    doc: "if the socket is valid or not"
    types: "bool"
  }
  parameters {
    name: "socket"
    doc: "Socket"
    types: "dmMessage::HSocket"
  }
}
elements {
  type: FUNCTION
  name: "GetSocketName"
  brief: "Get socket name"
  description: "Get socket name"
  returnvalues {
    name: "name"
    doc: "socket name. 0 if it was not found"
    types: "const char*"
  }
  parameters {
    name: "socket"
    doc: "Socket"
    types: "dmMessage::HSocket"
  }
}
elements {
  type: FUNCTION
  name: "GetPath"
  brief: "Get the message path"
  description: "Get the message path"
  returnvalues {
    name: "path"
    doc: ""
    types: "dmhash_t"
  }
  parameters {
    name: "url"
    doc: "url"
    types: "dmMessage::URL"
  }
}
elements {
  type: FUNCTION
  name: "SetPath"
  brief: "Set the message path"
  description: "Set the message path"
  parameters {
    name: "url"
    doc: "url"
    types: "dmMessage::URL"
  }
  parameters {
    name: "path"
    doc: ""
    types: "dmhash_t"
  }
}
elements {
  type: FUNCTION
  name: "GetFragment"
  brief: "Get the message fragment"
  description: "Get the message fragment"
  returnvalues {
    name: "fragment"
    doc: ""
    types: "dmhash_t"
  }
  parameters {
    name: "url"
    doc: "url"
    types: "dmMessage::URL"
  }
}
elements {
  type: FUNCTION
  name: "SetFragment"
  brief: "Set the message fragment"
  description: "Set the message fragment"
  parameters {
    name: "url"
    doc: "url"
    types: "dmMessage::URL"
  }
  parameters {
    name: "fragment"
    doc: ""
    types: "dmhash_t"
  }
}
elements {
  type: STRUCT
  name: "Message"
  brief: ""
  description: ""
}
elements {
  type: TYPEDEF
  name: "dmMMessage::MessageDestroyCallback"
  brief: "A callback for messages that needs cleanup after b..."
  description: "A callback for messages that needs cleanup after being dispatched. E.g. for freeing resources/memory."
}
elements {
  type: STRUCT
  name: "Message"
  brief: "Message data desc used at dispatch callback. When ..."
  description: "Message data desc used at dispatch callback. When a message is posted,\nthe actual object is copied into the sockets internal buffer."
  members {
    name: "m_Sender"
    doc: "Sender uri"
    type: "dmMessage::URL"
  }
  members {
    name: "m_Receiver"
    doc: "Receiver uri"
    type: "dmMessage::URL"
  }
  members {
    name: "m_Id"
    doc: "Unique id of message"
    type: "dmhash_t"
  }
  members {
    name: "m_UserData1"
    doc: "User data pointer"
    type: "uintptr_t"
  }
  members {
    name: "m_UserData2"
    doc: "User data pointer"
    type: "uintptr_t"
  }
  members {
    name: "m_Descriptor"
    doc: "User specified descriptor of the message data"
    type: "uintptr_t"
  }
  members {
    name: "m_DataSize"
    doc: "Size of message data in bytes"
    type: "uint32_t"
  }
  members {
    name: "m_Next"
    doc: "Ptr to next message (or 0 if last)"
    type: "dmMessage::Message*"
  }
  members {
    name: "m_DestroyCallback"
    doc: "If set, will be called after each dispatch"
    type: "dmMessage::MessageDestroyCallback"
  }
  members {
    name: "m_Data"
    doc: "Payload"
    type: "uint8_t*"
  }
}
elements {
  type: FUNCTION
  name: "ParseUrl"
  brief: "Convert a string to a URL struct"
  description: "Convert a string to a URL struct"
  returnvalues {
    name: "-"
    doc: "RESULT_OK on success\n- RESULT_MALFORMED_URL if the uri could not be parsed"
    types: ""
  }
  parameters {
    name: "uri"
    doc: "string of the format <span class=\"socket\">][path</span>[#fragment]"
    types: "const char*"
  }
  parameters {
    name: "out"
    doc: "url in string format, must not be 0x0"
    types: "dmMessage::StringUrl"
  }
}
info {
  namespace: "dmMessage"
  name: "Message"
  brief: "Message API documentation"
  description: "<span class=\"file\"><dmsdk/dlib/message.h></span>\nApi for sending messages"
  path: ""
  file: ""
}
